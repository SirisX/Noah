#include "noahLib.h"
#include "field.h"
#include "kernel/filesystem.h"
#include "kernel/decompress.h"
#include "kernel/graphics.h"
#include "kernel/gameState.h"
#include "walkMesh.h"
#include "fieldModel.h"
#include "kernel/isoManager.h"
#include "fieldDebugger/fieldInspector.h"
#include "fieldScriptSupport.h"
#include "opcodeTables.h"

#include <array>

struct sFieldVramMapping
{
    s16 m0_vramX;
    s16 m2_vramY;
    s16 m4;
    s16 m6;
};
std::array<sFieldVramMapping, 32> fieldVramMapping;

std::vector<u8> rawFieldBundle;
std::vector<u8> rawFieldModels;
std::vector<u8> rawFieldScriptData;
std::vector<u8> rawFieldTriggerData;
std::vector<u8> rawFieldDialogBundle;
std::vector<u8> rawFieldWalkMesh;
std::vector<u8> rawFieldActorSetupParams;

// this is malloc/free in original code, I keep it around for debugger
std::vector<u8> rawFieldImageBundle;
std::vector<u8> rawFieldImageBundle2;


std::array<s16, 4> fieldInitVar1;

s32 totalObjects;

s32 fieldMapNumber = -1;
s32 currentFieldId0 = -1;
s32 currentFieldId1 = -1;

s32 totalActors;

std::array<s32, 3> currentParty;

std::vector<sFieldEntity> fieldEntityArray;

std::vector<sFieldActorSetupParams> fieldActorSetupParams;

s16 numWalkMesh = 0;
std::array<s32, 5> walkMeshNumTrianglePerBlock;
u8* walkMeshVar1Raw;
std::vector<u32>* walkMeshVar1;
std::array<u8*, 5> walkMeshVerticesRaw;
std::array<u8*, 5> walkMeshTriangleRaw;
std::array<std::vector<SVECTOR>*, 5> walkMeshVertices;
std::array<std::vector<sWalkMesh::sTriangleData>*, 5> walkMeshTriangle;
s32 walkMeshVar4 = 0;

int playerControlledEntity = 0;

s16 entityMoveSpeedFactor = 0;

std::array<s16, 1025> atanTable = {
             0x0,     0x1,     0x2,     0x2,
             0x3,     0x3,     0x4,     0x5,
             0x5,     0x6,     0x7,     0x7,
             0x8,     0x9,     0x9,     0xA,
             0xA,     0xB,     0xC,     0xC,
             0xD,     0xE,     0xE,     0xF,
            0x10,    0x10,    0x11,    0x11,
            0x12,    0x13,    0x13,    0x14,
            0x15,    0x15,    0x16,    0x17,
            0x17,    0x18,    0x18,    0x19,
            0x1A,    0x1A,    0x1B,    0x1C,
            0x1C,    0x1D,    0x1E,    0x1E,
            0x1F,    0x1F,    0x20,    0x21,
            0x21,    0x22,    0x23,    0x23,
            0x24,    0x24,    0x25,    0x26,
            0x26,    0x27,    0x28,    0x28,
            0x29,    0x2A,    0x2A,    0x2B,
            0x2B,    0x2C,    0x2D,    0x2D,
            0x2E,    0x2F,    0x2F,    0x30,
            0x31,    0x31,    0x32,    0x32,
            0x33,    0x34,    0x34,    0x35,
            0x36,    0x36,    0x37,    0x37,
            0x38,    0x39,    0x39,    0x3A,
            0x3B,    0x3B,    0x3C,    0x3D,
            0x3D,    0x3E,    0x3E,    0x3F,
            0x40,    0x40,    0x41,    0x42,
            0x42,    0x43,    0x43,    0x44,
            0x45,    0x45,    0x46,    0x47,
            0x47,    0x48,    0x49,    0x49,
            0x4A,    0x4A,    0x4B,    0x4C,
            0x4C,    0x4D,    0x4E,    0x4E,
            0x4F,    0x4F,    0x50,    0x51,
            0x51,    0x52,    0x53,    0x53,
            0x54,    0x54,    0x55,    0x56,
            0x56,    0x57,    0x58,    0x58,
            0x59,    0x59,    0x5A,    0x5B,
            0x5B,    0x5C,    0x5D,    0x5D,
            0x5E,    0x5E,    0x5F,    0x60,
            0x60,    0x61,    0x62,    0x62,
            0x63,    0x63,    0x64,    0x65,
            0x65,    0x66,    0x67,    0x67,
            0x68,    0x68,    0x69,    0x6A,
            0x6A,    0x6B,    0x6B,    0x6C,
            0x6D,    0x6D,    0x6E,    0x6F,
            0x6F,    0x70,    0x70,    0x71,
            0x72,    0x72,    0x73,    0x74,
            0x74,    0x75,    0x75,    0x76,
            0x77,    0x77,    0x78,    0x78,
            0x79,    0x7A,    0x7A,    0x7B,
            0x7C,    0x7C,    0x7D,    0x7D,
            0x7E,    0x7F,    0x7F,    0x80,
            0x80,    0x81,    0x82,    0x82,
            0x83,    0x83,    0x84,    0x85,
            0x85,    0x86,    0x87,    0x87,
            0x88,    0x88,    0x89,    0x8A,
            0x8A,    0x8B,    0x8B,    0x8C,
            0x8D,    0x8D,    0x8E,    0x8E,
            0x8F,    0x90,    0x90,    0x91,
            0x91,    0x92,    0x93,    0x93,
            0x94,    0x94,    0x95,    0x96,
            0x96,    0x97,    0x98,    0x98,
            0x99,    0x99,    0x9A,    0x9B,
            0x9B,    0x9C,    0x9C,    0x9D,
            0x9E,    0x9E,    0x9F,    0x9F,
            0xA0,    0xA1,    0xA1,    0xA2,
            0xA2,    0xA3,    0xA4,    0xA4,
            0xA5,    0xA5,    0xA6,    0xA6,
            0xA7,    0xA8,    0xA8,    0xA9,
            0xA9,    0xAA,    0xAB,    0xAB,
            0xAC,    0xAC,    0xAD,    0xAE,
            0xAE,    0xAF,    0xAF,    0xB0,
            0xB1,    0xB1,    0xB2,    0xB2,
            0xB3,    0xB4,    0xB4,    0xB5,
            0xB5,    0xB6,    0xB6,    0xB7,
            0xB8,    0xB8,    0xB9,    0xB9,
            0xBA,    0xBB,    0xBB,    0xBC,
            0xBC,    0xBD,    0xBE,    0xBE,
            0xBF,    0xBF,    0xC0,    0xC0,
            0xC1,    0xC2,    0xC2,    0xC3,
            0xC3,    0xC4,    0xC5,    0xC5,
            0xC6,    0xC6,    0xC7,    0xC7,
            0xC8,    0xC9,    0xC9,    0xCA,
            0xCA,    0xCB,    0xCB,    0xCC,
            0xCD,    0xCD,    0xCE,    0xCE,
            0xCF,    0xCF,    0xD0,    0xD1,
            0xD1,    0xD2,    0xD2,    0xD3,
            0xD3,    0xD4,    0xD5,    0xD5,
            0xD6,    0xD6,    0xD7,    0xD7,
            0xD8,    0xD9,    0xD9,    0xDA,
            0xDA,    0xDB,    0xDB,    0xDC,
            0xDD,    0xDD,    0xDE,    0xDE,
            0xDF,    0xDF,    0xE0,    0xE1,
            0xE1,    0xE2,    0xE2,    0xE3,
            0xE3,    0xE4,    0xE4,    0xE5,
            0xE6,    0xE6,    0xE7,    0xE7,
            0xE8,    0xE8,    0xE9,    0xEA,
            0xEA,    0xEB,    0xEB,    0xEC,
            0xEC,    0xED,    0xED,    0xEE,
            0xEF,    0xEF,    0xF0,    0xF0,
            0xF1,    0xF1,    0xF2,    0xF2,
            0xF3,    0xF4,    0xF4,    0xF5,
            0xF5,    0xF6,    0xF6,    0xF7,
            0xF7,    0xF8,    0xF8,    0xF9,
            0xFA,    0xFA,    0xFB,    0xFB,
            0xFC,    0xFC,    0xFD,    0xFD,
            0xFE,    0xFE,    0xFF,   0x100,
           0x100,   0x101,   0x101,   0x102,
           0x102,   0x103,   0x103,   0x104,
           0x104,   0x105,   0x106,   0x106,
           0x107,   0x107,   0x108,   0x108,
           0x109,   0x109,   0x10A,   0x10A,
           0x10B,   0x10B,   0x10C,   0x10D,
           0x10D,   0x10E,   0x10E,   0x10F,
           0x10F,   0x110,   0x110,   0x111,
           0x111,   0x112,   0x112,   0x113,
           0x113,   0x114,   0x114,   0x115,
           0x116,   0x116,   0x117,   0x117,
           0x118,   0x118,   0x119,   0x119,
           0x11A,   0x11A,   0x11B,   0x11B,
           0x11C,   0x11C,   0x11D,   0x11D,
           0x11E,   0x11E,   0x11F,   0x120,
           0x120,   0x121,   0x121,   0x122,
           0x122,   0x123,   0x123,   0x124,
           0x124,   0x125,   0x125,   0x126,
           0x126,   0x127,   0x127,   0x128,
           0x128,   0x129,   0x129,   0x12A,
           0x12A,   0x12B,   0x12B,   0x12C,
           0x12C,   0x12D,   0x12D,   0x12E,
           0x12E,   0x12F,   0x12F,   0x130,
           0x130,   0x131,   0x131,   0x132,
           0x133,   0x133,   0x134,   0x134,
           0x135,   0x135,   0x136,   0x136,
           0x137,   0x137,   0x138,   0x138,
           0x139,   0x139,   0x13A,   0x13A,
           0x13B,   0x13B,   0x13C,   0x13C,
           0x13D,   0x13D,   0x13E,   0x13E,
           0x13F,   0x13F,   0x140,   0x140,
           0x141,   0x141,   0x142,   0x142,
           0x142,   0x143,   0x143,   0x144,
           0x144,   0x145,   0x145,   0x146,
           0x146,   0x147,   0x147,   0x148,
           0x148,   0x149,   0x149,   0x14A,
           0x14A,   0x14B,   0x14B,   0x14C,
           0x14C,   0x14D,   0x14D,   0x14E,
           0x14E,   0x14F,   0x14F,   0x150,
           0x150,   0x151,   0x151,   0x152,
           0x152,   0x153,   0x153,   0x154,
           0x154,   0x154,   0x155,   0x155,
           0x156,   0x156,   0x157,   0x157,
           0x158,   0x158,   0x159,   0x159,
           0x15A,   0x15A,   0x15B,   0x15B,
           0x15C,   0x15C,   0x15D,   0x15D,
           0x15D,   0x15E,   0x15E,   0x15F,
           0x15F,   0x160,   0x160,   0x161,
           0x161,   0x162,   0x162,   0x163,
           0x163,   0x164,   0x164,   0x164,
           0x165,   0x165,   0x166,   0x166,
           0x167,   0x167,   0x168,   0x168,
           0x169,   0x169,   0x16A,   0x16A,
           0x16A,   0x16B,   0x16B,   0x16C,
           0x16C,   0x16D,   0x16D,   0x16E,
           0x16E,   0x16F,   0x16F,   0x170,
           0x170,   0x170,   0x171,   0x171,
           0x172,   0x172,   0x173,   0x173,
           0x174,   0x174,   0x174,   0x175,
           0x175,   0x176,   0x176,   0x177,
           0x177,   0x178,   0x178,   0x179,
           0x179,   0x179,   0x17A,   0x17A,
           0x17B,   0x17B,   0x17C,   0x17C,
           0x17D,   0x17D,   0x17D,   0x17E,
           0x17E,   0x17F,   0x17F,   0x180,
           0x180,   0x181,   0x181,   0x181,
           0x182,   0x182,   0x183,   0x183,
           0x184,   0x184,   0x184,   0x185,
           0x185,   0x186,   0x186,   0x187,
           0x187,   0x187,   0x188,   0x188,
           0x189,   0x189,   0x18A,   0x18A,
           0x18B,   0x18B,   0x18B,   0x18C,
           0x18C,   0x18D,   0x18D,   0x18E,
           0x18E,   0x18E,   0x18F,   0x18F,
           0x190,   0x190,   0x191,   0x191,
           0x191,   0x192,   0x192,   0x193,
           0x193,   0x193,   0x194,   0x194,
           0x195,   0x195,   0x196,   0x196,
           0x196,   0x197,   0x197,   0x198,
           0x198,   0x199,   0x199,   0x199,
           0x19A,   0x19A,   0x19B,   0x19B,
           0x19B,   0x19C,   0x19C,   0x19D,
           0x19D,   0x19D,   0x19E,   0x19E,
           0x19F,   0x19F,   0x1A0,   0x1A0,
           0x1A0,   0x1A1,   0x1A1,   0x1A2,
           0x1A2,   0x1A2,   0x1A3,   0x1A3,
           0x1A4,   0x1A4,   0x1A4,   0x1A5,
           0x1A5,   0x1A6,   0x1A6,   0x1A6,
           0x1A7,   0x1A7,   0x1A8,   0x1A8,
           0x1A9,   0x1A9,   0x1A9,   0x1AA,
           0x1AA,   0x1AB,   0x1AB,   0x1AB,
           0x1AC,   0x1AC,   0x1AD,   0x1AD,
           0x1AD,   0x1AE,   0x1AE,   0x1AF,
           0x1AF,   0x1AF,   0x1B0,   0x1B0,
           0x1B0,   0x1B1,   0x1B1,   0x1B2,
           0x1B2,   0x1B2,   0x1B3,   0x1B3,
           0x1B4,   0x1B4,   0x1B4,   0x1B5,
           0x1B5,   0x1B6,   0x1B6,   0x1B6,
           0x1B7,   0x1B7,   0x1B8,   0x1B8,
           0x1B8,   0x1B9,   0x1B9,   0x1B9,
           0x1BA,   0x1BA,   0x1BB,   0x1BB,
           0x1BB,   0x1BC,   0x1BC,   0x1BD,
           0x1BD,   0x1BD,   0x1BE,   0x1BE,
           0x1BE,   0x1BF,   0x1BF,   0x1C0,
           0x1C0,   0x1C0,   0x1C1,   0x1C1,
           0x1C2,   0x1C2,   0x1C2,   0x1C3,
           0x1C3,   0x1C3,   0x1C4,   0x1C4,
           0x1C5,   0x1C5,   0x1C5,   0x1C6,
           0x1C6,   0x1C6,   0x1C7,   0x1C7,
           0x1C8,   0x1C8,   0x1C8,   0x1C9,
           0x1C9,   0x1C9,   0x1CA,   0x1CA,
           0x1CB,   0x1CB,   0x1CB,   0x1CC,
           0x1CC,   0x1CC,   0x1CD,   0x1CD,
           0x1CD,   0x1CE,   0x1CE,   0x1CF,
           0x1CF,   0x1CF,   0x1D0,   0x1D0,
           0x1D0,   0x1D1,   0x1D1,   0x1D1,
           0x1D2,   0x1D2,   0x1D3,   0x1D3,
           0x1D3,   0x1D4,   0x1D4,   0x1D4,
           0x1D5,   0x1D5,   0x1D5,   0x1D6,
           0x1D6,   0x1D7,   0x1D7,   0x1D7,
           0x1D8,   0x1D8,   0x1D8,   0x1D9,
           0x1D9,   0x1D9,   0x1DA,   0x1DA,
           0x1DA,   0x1DB,   0x1DB,   0x1DC,
           0x1DC,   0x1DC,   0x1DD,   0x1DD,
           0x1DD,   0x1DE,   0x1DE,   0x1DE,
           0x1DF,   0x1DF,   0x1DF,   0x1E0,
           0x1E0,   0x1E0,   0x1E1,   0x1E1,
           0x1E1,   0x1E2,   0x1E2,   0x1E3,
           0x1E3,   0x1E3,   0x1E4,   0x1E4,
           0x1E4,   0x1E5,   0x1E5,   0x1E5,
           0x1E6,   0x1E6,   0x1E6,   0x1E7,
           0x1E7,   0x1E7,   0x1E8,   0x1E8,
           0x1E8,   0x1E9,   0x1E9,   0x1E9,
           0x1EA,   0x1EA,   0x1EA,   0x1EB,
           0x1EB,   0x1EB,   0x1EC,   0x1EC,
           0x1EC,   0x1ED,   0x1ED,   0x1ED,
           0x1EE,   0x1EE,   0x1EE,   0x1EF,
           0x1EF,   0x1EF,   0x1F0,   0x1F0,
           0x1F0,   0x1F1,   0x1F1,   0x1F1,
           0x1F2,   0x1F2,   0x1F2,   0x1F3,
           0x1F3,   0x1F3,   0x1F4,   0x1F4,
           0x1F4,   0x1F5,   0x1F5,   0x1F5,
           0x1F6,   0x1F6,   0x1F6,   0x1F7,
           0x1F7,   0x1F7,   0x1F8,   0x1F8,
           0x1F8,   0x1F9,   0x1F9,   0x1F9,
           0x1FA,   0x1FA,   0x1FA,   0x1FB,
           0x1FB,   0x1FB,   0x1FC,   0x1FC,
           0x1FC,   0x1FD,   0x1FD,   0x1FD,
           0x1FE,   0x1FE,   0x1FE,   0x1FF,
           0x1FF,   0x1FF,   0x1FF,   0x200,
           0x200,
};

std::array<u16, 8192> rcossin_tbl = {
0x0,0x1000,0x6,0x1000,
0xD,0x1000,0x13,0x1000,
0x19,0x1000,0x1F,0x1000,
0x26,0x1000,0x2C,0x1000,
0x32,0x1000,0x39,0x1000,
0x3F,0x1000,0x45,0xFFF,
0x4B,0xFFF,0x52,0xFFF,
0x58,0xFFF,0x5E,0xFFF,
0x65,0xFFF,0x6B,0xFFF,
0x71,0xFFE,0x77,0xFFE,
0x7E,0xFFE,0x84,0xFFE,
0x8A,0xFFE,0x90,0xFFD,
0x97,0xFFD,0x9D,0xFFD,
0xA3,0xFFD,0xAA,0xFFC,
0xB0,0xFFC,0xB6,0xFFC,
0xBC,0xFFC,0xC3,0xFFB,
0xC9,0xFFB,0xCF,0xFFB,
0xD6,0xFFA,0xDC,0xFFA,
0xE2,0xFFA,0xE8,0xFF9,
0xEF,0xFF9,0xF5,0xFF9,
0xFB,0xFF8,0x101,0xFF8,
0x108,0xFF8,0x10E,0xFF7,
0x114,0xFF7,0x11B,0xFF6,
0x121,0xFF6,0x127,0xFF5,
0x12D,0xFF5,0x134,0xFF4,
0x13A,0xFF4,0x140,0xFF3,
0x146,0xFF3,0x14D,0xFF2,
0x153,0xFF2,0x159,0xFF1,
0x15F,0xFF1,0x166,0xFF0,
0x16C,0xFF0,0x172,0xFEF,
0x178,0xFEF,0x17F,0xFEE,
0x185,0xFED,0x18B,0xFED,
0x191,0xFEC,0x198,0xFEC,
0x19E,0xFEB,0x1A4,0xFEA,
0x1AA,0xFEA,0x1B1,0xFE9,
0x1B7,0xFE8,0x1BD,0xFE8,
0x1C3,0xFE7,0x1CA,0xFE6,
0x1D0,0xFE6,0x1D6,0xFE5,
0x1DC,0xFE4,0x1E3,0xFE3,
0x1E9,0xFE3,0x1EF,0xFE2,
0x1F5,0xFE1,0x1FC,0xFE0,
0x202,0xFE0,0x208,0xFDF,
0x20E,0xFDE,0x215,0xFDD,
0x21B,0xFDC,0x221,0xFDC,
0x227,0xFDB,0x22D,0xFDA,
0x234,0xFD9,0x23A,0xFD8,
0x240,0xFD7,0x246,0xFD6,
0x24D,0xFD5,0x253,0xFD5,
0x259,0xFD4,0x25F,0xFD3,
0x265,0xFD2,0x26C,0xFD1,
0x272,0xFD0,0x278,0xFCF,
0x27E,0xFCE,0x284,0xFCD,
0x28B,0xFCC,0x291,0xFCB,
0x297,0xFCA,0x29D,0xFC9,
0x2A3,0xFC8,0x2AA,0xFC7,
0x2B0,0xFC6,0x2B6,0xFC5,
0x2BC,0xFC4,0x2C2,0xFC3,
0x2C9,0xFC2,0x2CF,0xFC0,
0x2D5,0xFBF,0x2DB,0xFBE,
0x2E1,0xFBD,0x2E8,0xFBC,
0x2EE,0xFBB,0x2F4,0xFBA,
0x2FA,0xFB8,0x300,0xFB7,
0x306,0xFB6,0x30D,0xFB5,
0x313,0xFB4,0x319,0xFB3,
0x31F,0xFB1,0x325,0xFB0,
0x32B,0xFAF,0x332,0xFAE,
0x338,0xFAC,0x33E,0xFAB,
0x344,0xFAA,0x34A,0xFA8,
0x350,0xFA7,0x356,0xFA6,
0x35D,0xFA5,0x363,0xFA3,
0x369,0xFA2,0x36F,0xFA1,
0x375,0xF9F,0x37B,0xF9E,
0x381,0xF9C,0x388,0xF9B,
0x38E,0xF9A,0x394,0xF98,
0x39A,0xF97,0x3A0,0xF95,
0x3A6,0xF94,0x3AC,0xF93,
0x3B2,0xF91,0x3B9,0xF90,
0x3BF,0xF8E,0x3C5,0xF8D,
0x3CB,0xF8B,0x3D1,0xF8A,
0x3D7,0xF88,0x3DD,0xF87,
0x3E3,0xF85,0x3E9,0xF84,
0x3EF,0xF82,0x3F6,0xF81,
0x3FC,0xF7F,0x402,0xF7D,
0x408,0xF7C,0x40E,0xF7A,
0x414,0xF79,0x41A,0xF77,
0x420,0xF76,0x426,0xF74,
0x42C,0xF72,0x432,0xF71,
0x438,0xF6F,0x43E,0xF6D,
0x444,0xF6C,0x44B,0xF6A,
0x451,0xF68,0x457,0xF67,
0x45D,0xF65,0x463,0xF63,
0x469,0xF61,0x46F,0xF60,
0x475,0xF5E,0x47B,0xF5C,
0x481,0xF5A,0x487,0xF59,
0x48D,0xF57,0x493,0xF55,
0x499,0xF53,0x49F,0xF51,
0x4A5,0xF50,0x4AB,0xF4E,
0x4B1,0xF4C,0x4B7,0xF4A,
0x4BD,0xF48,0x4C3,0xF46,
0x4C9,0xF45,0x4CF,0xF43,
0x4D5,0xF41,0x4DB,0xF3F,
0x4E1,0xF3D,0x4E7,0xF3B,
0x4ED,0xF39,0x4F3,0xF37,
0x4F9,0xF35,0x4FF,0xF33,
0x505,0xF31,0x50B,0xF2F,
0x511,0xF2D,0x517,0xF2B,
0x51D,0xF29,0x523,0xF27,
0x529,0xF25,0x52F,0xF23,
0x534,0xF21,0x53A,0xF1F,
0x540,0xF1D,0x546,0xF1B,
0x54C,0xF19,0x552,0xF17,
0x558,0xF15,0x55E,0xF13,
0x564,0xF11,0x56A,0xF0E,
0x570,0xF0C,0x576,0xF0A,
0x57C,0xF08,0x581,0xF06,
0x587,0xF04,0x58D,0xF02,
0x593,0xEFF,0x599,0xEFD,
0x59F,0xEFB,0x5A5,0xEF9,
0x5AB,0xEF7,0x5B1,0xEF4,
0x5B6,0xEF2,0x5BC,0xEF0,
0x5C2,0xEEE,0x5C8,0xEEB,
0x5CE,0xEE9,0x5D4,0xEE7,
0x5DA,0xEE4,0x5DF,0xEE2,
0x5E5,0xEE0,0x5EB,0xEDD,
0x5F1,0xEDB,0x5F7,0xED9,
0x5FD,0xED6,0x602,0xED4,
0x608,0xED2,0x60E,0xECF,
0x614,0xECD,0x61A,0xECB,
0x61F,0xEC8,0x625,0xEC6,
0x62B,0xEC3,0x631,0xEC1,
0x637,0xEBF,0x63C,0xEBC,
0x642,0xEBA,0x648,0xEB7,
0x64E,0xEB5,0x654,0xEB2,
0x659,0xEB0,0x65F,0xEAD,
0x665,0xEAB,0x66B,0xEA8,
0x670,0xEA6,0x676,0xEA3,
0x67C,0xEA1,0x682,0xE9E,
0x687,0xE9B,0x68D,0xE99,
0x693,0xE96,0x699,0xE94,
0x69E,0xE91,0x6A4,0xE8F,
0x6AA,0xE8C,0x6AF,0xE89,
0x6B5,0xE87,0x6BB,0xE84,
0x6C1,0xE81,0x6C6,0xE7F,
0x6CC,0xE7C,0x6D2,0xE79,
0x6D7,0xE77,0x6DD,0xE74,
0x6E3,0xE71,0x6E8,0xE6F,
0x6EE,0xE6C,0x6F4,0xE69,
0x6F9,0xE66,0x6FF,0xE64,
0x705,0xE61,0x70A,0xE5E,
0x710,0xE5B,0x715,0xE59,
0x71B,0xE56,0x721,0xE53,
0x726,0xE50,0x72C,0xE4D,
0x732,0xE4B,0x737,0xE48,
0x73D,0xE45,0x742,0xE42,
0x748,0xE3F,0x74E,0xE3C,
0x753,0xE3A,0x759,0xE37,
0x75E,0xE34,0x764,0xE31,
0x76A,0xE2E,0x76F,0xE2B,
0x775,0xE28,0x77A,0xE25,
0x780,0xE22,0x785,0xE1F,
0x78B,0xE1C,0x790,0xE19,
0x796,0xE16,0x79B,0xE13,
0x7A1,0xE10,0x7A6,0xE0D,
0x7AC,0xE0A,0x7B2,0xE07,
0x7B7,0xE04,0x7BD,0xE01,
0x7C2,0xDFE,0x7C8,0xDFB,
0x7CD,0xDF8,0x7D2,0xDF5,
0x7D8,0xDF2,0x7DD,0xDEF,
0x7E3,0xDEC,0x7E8,0xDE9,
0x7EE,0xDE6,0x7F3,0xDE3,
0x7F9,0xDDF,0x7FE,0xDDC,
0x804,0xDD9,0x809,0xDD6,
0x80E,0xDD3,0x814,0xDD0,
0x819,0xDCC,0x81F,0xDC9,
0x824,0xDC6,0x82A,0xDC3,
0x82F,0xDC0,0x834,0xDBC,
0x83A,0xDB9,0x83F,0xDB6,
0x845,0xDB3,0x84A,0xDB0,
0x84F,0xDAC,0x855,0xDA9,
0x85A,0xDA6,0x85F,0xDA2,
0x865,0xD9F,0x86A,0xD9C,
0x86F,0xD99,0x875,0xD95,
0x87A,0xD92,0x87F,0xD8F,
0x885,0xD8B,0x88A,0xD88,
0x88F,0xD85,0x895,0xD81,
0x89A,0xD7E,0x89F,0xD7A,
0x8A5,0xD77,0x8AA,0xD74,
0x8AF,0xD70,0x8B4,0xD6D,
0x8BA,0xD69,0x8BF,0xD66,
0x8C4,0xD62,0x8C9,0xD5F,
0x8CF,0xD5C,0x8D4,0xD58,
0x8D9,0xD55,0x8DE,0xD51,
0x8E4,0xD4E,0x8E9,0xD4A,
0x8EE,0xD47,0x8F3,0xD43,
0x8F8,0xD40,0x8FE,0xD3C,
0x903,0xD39,0x908,0xD35,
0x90D,0xD32,0x912,0xD2E,
0x918,0xD2A,0x91D,0xD27,
0x922,0xD23,0x927,0xD20,
0x92C,0xD1C,0x931,0xD18,
0x937,0xD15,0x93C,0xD11,
0x941,0xD0E,0x946,0xD0A,
0x94B,0xD06,0x950,0xD03,
0x955,0xCFF,0x95A,0xCFB,
0x95F,0xCF8,0x965,0xCF4,
0x96A,0xCF0,0x96F,0xCED,
0x974,0xCE9,0x979,0xCE5,
0x97E,0xCE1,0x983,0xCDE,
0x988,0xCDA,0x98D,0xCD6,
0x992,0xCD2,0x997,0xCCF,
0x99C,0xCCB,0x9A1,0xCC7,
0x9A6,0xCC3,0x9AB,0xCC0,
0x9B0,0xCBC,0x9B5,0xCB8,
0x9BA,0xCB4,0x9BF,0xCB0,
0x9C4,0xCAC,0x9C9,0xCA9,
0x9CE,0xCA5,0x9D3,0xCA1,
0x9D8,0xC9D,0x9DD,0xC99,
0x9E2,0xC95,0x9E7,0xC91,
0x9EC,0xC8E,0x9F1,0xC8A,
0x9F6,0xC86,0x9FB,0xC82,
0x9FF,0xC7E,0xA04,0xC7A,
0xA09,0xC76,0xA0E,0xC72,
0xA13,0xC6E,0xA18,0xC6A,
0xA1D,0xC66,0xA22,0xC62,
0xA26,0xC5E,0xA2B,0xC5A,
0xA30,0xC56,0xA35,0xC52,
0xA3A,0xC4E,0xA3F,0xC4A,
0xA44,0xC46,0xA48,0xC42,
0xA4D,0xC3E,0xA52,0xC3A,
0xA57,0xC36,0xA5C,0xC32,
0xA60,0xC2E,0xA65,0xC2A,
0xA6A,0xC26,0xA6F,0xC22,
0xA73,0xC1E,0xA78,0xC19,
0xA7D,0xC15,0xA82,0xC11,
0xA86,0xC0D,0xA8B,0xC09,
0xA90,0xC05,0xA95,0xC01,
0xA99,0xBFC,0xA9E,0xBF8,
0xAA3,0xBF4,0xAA7,0xBF0,
0xAAC,0xBEC,0xAB1,0xBE8,
0xAB5,0xBE3,0xABA,0xBDF,
0xABF,0xBDB,0xAC3,0xBD7,
0xAC8,0xBD2,0xACD,0xBCE,
0xAD1,0xBCA,0xAD6,0xBC6,
0xADB,0xBC1,0xADF,0xBBD,
0xAE4,0xBB9,0xAE8,0xBB5,
0xAED,0xBB0,0xAF2,0xBAC,
0xAF6,0xBA8,0xAFB,0xBA3,
0xAFF,0xB9F,0xB04,0xB9B,
0xB08,0xB97,0xB0D,0xB92,
0xB11,0xB8E,0xB16,0xB89,
0xB1B,0xB85,0xB1F,0xB81,
0xB24,0xB7C,0xB28,0xB78,
0xB2D,0xB74,0xB31,0xB6F,
0xB36,0xB6B,0xB3A,0xB66,
0xB3E,0xB62,0xB43,0xB5E,
0xB47,0xB59,0xB4C,0xB55,
0xB50,0xB50,0xB55,0xB4C,
0xB59,0xB47,0xB5E,0xB43,
0xB62,0xB3E,0xB66,0xB3A,
0xB6B,0xB36,0xB6F,0xB31,
0xB74,0xB2D,0xB78,0xB28,
0xB7C,0xB24,0xB81,0xB1F,
0xB85,0xB1B,0xB89,0xB16,
0xB8E,0xB11,0xB92,0xB0D,
0xB97,0xB08,0xB9B,0xB04,
0xB9F,0xAFF,0xBA3,0xAFB,
0xBA8,0xAF6,0xBAC,0xAF2,
0xBB0,0xAED,0xBB5,0xAE8,
0xBB9,0xAE4,0xBBD,0xADF,
0xBC1,0xADB,0xBC6,0xAD6,
0xBCA,0xAD1,0xBCE,0xACD,
0xBD2,0xAC8,0xBD7,0xAC3,
0xBDB,0xABF,0xBDF,0xABA,
0xBE3,0xAB5,0xBE8,0xAB1,
0xBEC,0xAAC,0xBF0,0xAA7,
0xBF4,0xAA3,0xBF8,0xA9E,
0xBFC,0xA99,0xC01,0xA95,
0xC05,0xA90,0xC09,0xA8B,
0xC0D,0xA86,0xC11,0xA82,
0xC15,0xA7D,0xC19,0xA78,
0xC1E,0xA73,0xC22,0xA6F,
0xC26,0xA6A,0xC2A,0xA65,
0xC2E,0xA60,0xC32,0xA5C,
0xC36,0xA57,0xC3A,0xA52,
0xC3E,0xA4D,0xC42,0xA48,
0xC46,0xA44,0xC4A,0xA3F,
0xC4E,0xA3A,0xC52,0xA35,
0xC56,0xA30,0xC5A,0xA2B,
0xC5E,0xA26,0xC62,0xA22,
0xC66,0xA1D,0xC6A,0xA18,
0xC6E,0xA13,0xC72,0xA0E,
0xC76,0xA09,0xC7A,0xA04,
0xC7E,0x9FF,0xC82,0x9FB,
0xC86,0x9F6,0xC8A,0x9F1,
0xC8E,0x9EC,0xC91,0x9E7,
0xC95,0x9E2,0xC99,0x9DD,
0xC9D,0x9D8,0xCA1,0x9D3,
0xCA5,0x9CE,0xCA9,0x9C9,
0xCAC,0x9C4,0xCB0,0x9BF,
0xCB4,0x9BA,0xCB8,0x9B5,
0xCBC,0x9B0,0xCC0,0x9AB,
0xCC3,0x9A6,0xCC7,0x9A1,
0xCCB,0x99C,0xCCF,0x997,
0xCD2,0x992,0xCD6,0x98D,
0xCDA,0x988,0xCDE,0x983,
0xCE1,0x97E,0xCE5,0x979,
0xCE9,0x974,0xCED,0x96F,
0xCF0,0x96A,0xCF4,0x965,
0xCF8,0x95F,0xCFB,0x95A,
0xCFF,0x955,0xD03,0x950,
0xD06,0x94B,0xD0A,0x946,
0xD0E,0x941,0xD11,0x93C,
0xD15,0x937,0xD18,0x931,
0xD1C,0x92C,0xD20,0x927,
0xD23,0x922,0xD27,0x91D,
0xD2A,0x918,0xD2E,0x912,
0xD32,0x90D,0xD35,0x908,
0xD39,0x903,0xD3C,0x8FE,
0xD40,0x8F8,0xD43,0x8F3,
0xD47,0x8EE,0xD4A,0x8E9,
0xD4E,0x8E4,0xD51,0x8DE,
0xD55,0x8D9,0xD58,0x8D4,
0xD5C,0x8CF,0xD5F,0x8C9,
0xD62,0x8C4,0xD66,0x8BF,
0xD69,0x8BA,0xD6D,0x8B4,
0xD70,0x8AF,0xD74,0x8AA,
0xD77,0x8A5,0xD7A,0x89F,
0xD7E,0x89A,0xD81,0x895,
0xD85,0x88F,0xD88,0x88A,
0xD8B,0x885,0xD8F,0x87F,
0xD92,0x87A,0xD95,0x875,
0xD99,0x86F,0xD9C,0x86A,
0xD9F,0x865,0xDA2,0x85F,
0xDA6,0x85A,0xDA9,0x855,
0xDAC,0x84F,0xDB0,0x84A,
0xDB3,0x845,0xDB6,0x83F,
0xDB9,0x83A,0xDBC,0x834,
0xDC0,0x82F,0xDC3,0x82A,
0xDC6,0x824,0xDC9,0x81F,
0xDCC,0x819,0xDD0,0x814,
0xDD3,0x80E,0xDD6,0x809,
0xDD9,0x804,0xDDC,0x7FE,
0xDDF,0x7F9,0xDE3,0x7F3,
0xDE6,0x7EE,0xDE9,0x7E8,
0xDEC,0x7E3,0xDEF,0x7DD,
0xDF2,0x7D8,0xDF5,0x7D2,
0xDF8,0x7CD,0xDFB,0x7C8,
0xDFE,0x7C2,0xE01,0x7BD,
0xE04,0x7B7,0xE07,0x7B2,
0xE0A,0x7AC,0xE0D,0x7A6,
0xE10,0x7A1,0xE13,0x79B,
0xE16,0x796,0xE19,0x790,
0xE1C,0x78B,0xE1F,0x785,
0xE22,0x780,0xE25,0x77A,
0xE28,0x775,0xE2B,0x76F,
0xE2E,0x76A,0xE31,0x764,
0xE34,0x75E,0xE37,0x759,
0xE3A,0x753,0xE3C,0x74E,
0xE3F,0x748,0xE42,0x742,
0xE45,0x73D,0xE48,0x737,
0xE4B,0x732,0xE4D,0x72C,
0xE50,0x726,0xE53,0x721,
0xE56,0x71B,0xE59,0x715,
0xE5B,0x710,0xE5E,0x70A,
0xE61,0x705,0xE64,0x6FF,
0xE66,0x6F9,0xE69,0x6F4,
0xE6C,0x6EE,0xE6F,0x6E8,
0xE71,0x6E3,0xE74,0x6DD,
0xE77,0x6D7,0xE79,0x6D2,
0xE7C,0x6CC,0xE7F,0x6C6,
0xE81,0x6C1,0xE84,0x6BB,
0xE87,0x6B5,0xE89,0x6AF,
0xE8C,0x6AA,0xE8F,0x6A4,
0xE91,0x69E,0xE94,0x699,
0xE96,0x693,0xE99,0x68D,
0xE9B,0x687,0xE9E,0x682,
0xEA1,0x67C,0xEA3,0x676,
0xEA6,0x670,0xEA8,0x66B,
0xEAB,0x665,0xEAD,0x65F,
0xEB0,0x659,0xEB2,0x654,
0xEB5,0x64E,0xEB7,0x648,
0xEBA,0x642,0xEBC,0x63C,
0xEBF,0x637,0xEC1,0x631,
0xEC3,0x62B,0xEC6,0x625,
0xEC8,0x61F,0xECB,0x61A,
0xECD,0x614,0xECF,0x60E,
0xED2,0x608,0xED4,0x602,
0xED6,0x5FD,0xED9,0x5F7,
0xEDB,0x5F1,0xEDD,0x5EB,
0xEE0,0x5E5,0xEE2,0x5DF,
0xEE4,0x5DA,0xEE7,0x5D4,
0xEE9,0x5CE,0xEEB,0x5C8,
0xEEE,0x5C2,0xEF0,0x5BC,
0xEF2,0x5B6,0xEF4,0x5B1,
0xEF7,0x5AB,0xEF9,0x5A5,
0xEFB,0x59F,0xEFD,0x599,
0xEFF,0x593,0xF02,0x58D,
0xF04,0x587,0xF06,0x581,
0xF08,0x57C,0xF0A,0x576,
0xF0C,0x570,0xF0E,0x56A,
0xF11,0x564,0xF13,0x55E,
0xF15,0x558,0xF17,0x552,
0xF19,0x54C,0xF1B,0x546,
0xF1D,0x540,0xF1F,0x53A,
0xF21,0x534,0xF23,0x52F,
0xF25,0x529,0xF27,0x523,
0xF29,0x51D,0xF2B,0x517,
0xF2D,0x511,0xF2F,0x50B,
0xF31,0x505,0xF33,0x4FF,
0xF35,0x4F9,0xF37,0x4F3,
0xF39,0x4ED,0xF3B,0x4E7,
0xF3D,0x4E1,0xF3F,0x4DB,
0xF41,0x4D5,0xF43,0x4CF,
0xF45,0x4C9,0xF46,0x4C3,
0xF48,0x4BD,0xF4A,0x4B7,
0xF4C,0x4B1,0xF4E,0x4AB,
0xF50,0x4A5,0xF51,0x49F,
0xF53,0x499,0xF55,0x493,
0xF57,0x48D,0xF59,0x487,
0xF5A,0x481,0xF5C,0x47B,
0xF5E,0x475,0xF60,0x46F,
0xF61,0x469,0xF63,0x463,
0xF65,0x45D,0xF67,0x457,
0xF68,0x451,0xF6A,0x44B,
0xF6C,0x444,0xF6D,0x43E,
0xF6F,0x438,0xF71,0x432,
0xF72,0x42C,0xF74,0x426,
0xF76,0x420,0xF77,0x41A,
0xF79,0x414,0xF7A,0x40E,
0xF7C,0x408,0xF7D,0x402,
0xF7F,0x3FC,0xF81,0x3F6,
0xF82,0x3EF,0xF84,0x3E9,
0xF85,0x3E3,0xF87,0x3DD,
0xF88,0x3D7,0xF8A,0x3D1,
0xF8B,0x3CB,0xF8D,0x3C5,
0xF8E,0x3BF,0xF90,0x3B9,
0xF91,0x3B2,0xF93,0x3AC,
0xF94,0x3A6,0xF95,0x3A0,
0xF97,0x39A,0xF98,0x394,
0xF9A,0x38E,0xF9B,0x388,
0xF9C,0x381,0xF9E,0x37B,
0xF9F,0x375,0xFA1,0x36F,
0xFA2,0x369,0xFA3,0x363,
0xFA5,0x35D,0xFA6,0x356,
0xFA7,0x350,0xFA8,0x34A,
0xFAA,0x344,0xFAB,0x33E,
0xFAC,0x338,0xFAE,0x332,
0xFAF,0x32B,0xFB0,0x325,
0xFB1,0x31F,0xFB3,0x319,
0xFB4,0x313,0xFB5,0x30D,
0xFB6,0x306,0xFB7,0x300,
0xFB8,0x2FA,0xFBA,0x2F4,
0xFBB,0x2EE,0xFBC,0x2E8,
0xFBD,0x2E1,0xFBE,0x2DB,
0xFBF,0x2D5,0xFC0,0x2CF,
0xFC2,0x2C9,0xFC3,0x2C2,
0xFC4,0x2BC,0xFC5,0x2B6,
0xFC6,0x2B0,0xFC7,0x2AA,
0xFC8,0x2A3,0xFC9,0x29D,
0xFCA,0x297,0xFCB,0x291,
0xFCC,0x28B,0xFCD,0x284,
0xFCE,0x27E,0xFCF,0x278,
0xFD0,0x272,0xFD1,0x26C,
0xFD2,0x265,0xFD3,0x25F,
0xFD4,0x259,0xFD5,0x253,
0xFD5,0x24D,0xFD6,0x246,
0xFD7,0x240,0xFD8,0x23A,
0xFD9,0x234,0xFDA,0x22D,
0xFDB,0x227,0xFDC,0x221,
0xFDC,0x21B,0xFDD,0x215,
0xFDE,0x20E,0xFDF,0x208,
0xFE0,0x202,0xFE0,0x1FC,
0xFE1,0x1F5,0xFE2,0x1EF,
0xFE3,0x1E9,0xFE3,0x1E3,
0xFE4,0x1DC,0xFE5,0x1D6,
0xFE6,0x1D0,0xFE6,0x1CA,
0xFE7,0x1C3,0xFE8,0x1BD,
0xFE8,0x1B7,0xFE9,0x1B1,
0xFEA,0x1AA,0xFEA,0x1A4,
0xFEB,0x19E,0xFEC,0x198,
0xFEC,0x191,0xFED,0x18B,
0xFED,0x185,0xFEE,0x17F,
0xFEF,0x178,0xFEF,0x172,
0xFF0,0x16C,0xFF0,0x166,
0xFF1,0x15F,0xFF1,0x159,
0xFF2,0x153,0xFF2,0x14D,
0xFF3,0x146,0xFF3,0x140,
0xFF4,0x13A,0xFF4,0x134,
0xFF5,0x12D,0xFF5,0x127,
0xFF6,0x121,0xFF6,0x11B,
0xFF7,0x114,0xFF7,0x10E,
0xFF8,0x108,0xFF8,0x101,
0xFF8,0xFB,0xFF9,0xF5,
0xFF9,0xEF,0xFF9,0xE8,
0xFFA,0xE2,0xFFA,0xDC,
0xFFA,0xD6,0xFFB,0xCF,
0xFFB,0xC9,0xFFB,0xC3,
0xFFC,0xBC,0xFFC,0xB6,
0xFFC,0xB0,0xFFC,0xAA,
0xFFD,0xA3,0xFFD,0x9D,
0xFFD,0x97,0xFFD,0x90,
0xFFE,0x8A,0xFFE,0x84,
0xFFE,0x7E,0xFFE,0x77,
0xFFE,0x71,0xFFF,0x6B,
0xFFF,0x65,0xFFF,0x5E,
0xFFF,0x58,0xFFF,0x52,
0xFFF,0x4B,0xFFF,0x45,
0x1000,0x3F,0x1000,0x39,
0x1000,0x32,0x1000,0x2C,
0x1000,0x26,0x1000,0x1F,
0x1000,0x19,0x1000,0x13,
0x1000,0xD,0x1000,0x6,
0x1000,0x0,0x1000,0xFFFA,
0x1000,0xFFF3,0x1000,0xFFED,
0x1000,0xFFE7,0x1000,0xFFE1,
0x1000,0xFFDA,0x1000,0xFFD4,
0x1000,0xFFCE,0x1000,0xFFC7,
0x1000,0xFFC1,0xFFF,0xFFBB,
0xFFF,0xFFB5,0xFFF,0xFFAE,
0xFFF,0xFFA8,0xFFF,0xFFA2,
0xFFF,0xFF9B,0xFFF,0xFF95,
0xFFE,0xFF8F,0xFFE,0xFF89,
0xFFE,0xFF82,0xFFE,0xFF7C,
0xFFE,0xFF76,0xFFD,0xFF70,
0xFFD,0xFF69,0xFFD,0xFF63,
0xFFD,0xFF5D,0xFFC,0xFF56,
0xFFC,0xFF50,0xFFC,0xFF4A,
0xFFC,0xFF44,0xFFB,0xFF3D,
0xFFB,0xFF37,0xFFB,0xFF31,
0xFFA,0xFF2A,0xFFA,0xFF24,
0xFFA,0xFF1E,0xFF9,0xFF18,
0xFF9,0xFF11,0xFF9,0xFF0B,
0xFF8,0xFF05,0xFF8,0xFEFF,
0xFF8,0xFEF8,0xFF7,0xFEF2,
0xFF7,0xFEEC,0xFF6,0xFEE5,
0xFF6,0xFEDF,0xFF5,0xFED9,
0xFF5,0xFED3,0xFF4,0xFECC,
0xFF4,0xFEC6,0xFF3,0xFEC0,
0xFF3,0xFEBA,0xFF2,0xFEB3,
0xFF2,0xFEAD,0xFF1,0xFEA7,
0xFF1,0xFEA1,0xFF0,0xFE9A,
0xFF0,0xFE94,0xFEF,0xFE8E,
0xFEF,0xFE88,0xFEE,0xFE81,
0xFED,0xFE7B,0xFED,0xFE75,
0xFEC,0xFE6F,0xFEC,0xFE68,
0xFEB,0xFE62,0xFEA,0xFE5C,
0xFEA,0xFE56,0xFE9,0xFE4F,
0xFE8,0xFE49,0xFE8,0xFE43,
0xFE7,0xFE3D,0xFE6,0xFE36,
0xFE6,0xFE30,0xFE5,0xFE2A,
0xFE4,0xFE24,0xFE3,0xFE1D,
0xFE3,0xFE17,0xFE2,0xFE11,
0xFE1,0xFE0B,0xFE0,0xFE04,
0xFE0,0xFDFE,0xFDF,0xFDF8,
0xFDE,0xFDF2,0xFDD,0xFDEB,
0xFDC,0xFDE5,0xFDC,0xFDDF,
0xFDB,0xFDD9,0xFDA,0xFDD3,
0xFD9,0xFDCC,0xFD8,0xFDC6,
0xFD7,0xFDC0,0xFD6,0xFDBA,
0xFD5,0xFDB3,0xFD5,0xFDAD,
0xFD4,0xFDA7,0xFD3,0xFDA1,
0xFD2,0xFD9B,0xFD1,0xFD94,
0xFD0,0xFD8E,0xFCF,0xFD88,
0xFCE,0xFD82,0xFCD,0xFD7C,
0xFCC,0xFD75,0xFCB,0xFD6F,
0xFCA,0xFD69,0xFC9,0xFD63,
0xFC8,0xFD5D,0xFC7,0xFD56,
0xFC6,0xFD50,0xFC5,0xFD4A,
0xFC4,0xFD44,0xFC3,0xFD3E,
0xFC2,0xFD37,0xFC0,0xFD31,
0xFBF,0xFD2B,0xFBE,0xFD25,
0xFBD,0xFD1F,0xFBC,0xFD18,
0xFBB,0xFD12,0xFBA,0xFD0C,
0xFB8,0xFD06,0xFB7,0xFD00,
0xFB6,0xFCFA,0xFB5,0xFCF3,
0xFB4,0xFCED,0xFB3,0xFCE7,
0xFB1,0xFCE1,0xFB0,0xFCDB,
0xFAF,0xFCD5,0xFAE,0xFCCE,
0xFAC,0xFCC8,0xFAB,0xFCC2,
0xFAA,0xFCBC,0xFA8,0xFCB6,
0xFA7,0xFCB0,0xFA6,0xFCAA,
0xFA5,0xFCA3,0xFA3,0xFC9D,
0xFA2,0xFC97,0xFA1,0xFC91,
0xF9F,0xFC8B,0xF9E,0xFC85,
0xF9C,0xFC7F,0xF9B,0xFC78,
0xF9A,0xFC72,0xF98,0xFC6C,
0xF97,0xFC66,0xF95,0xFC60,
0xF94,0xFC5A,0xF93,0xFC54,
0xF91,0xFC4E,0xF90,0xFC47,
0xF8E,0xFC41,0xF8D,0xFC3B,
0xF8B,0xFC35,0xF8A,0xFC2F,
0xF88,0xFC29,0xF87,0xFC23,
0xF85,0xFC1D,0xF84,0xFC17,
0xF82,0xFC11,0xF81,0xFC0A,
0xF7F,0xFC04,0xF7D,0xFBFE,
0xF7C,0xFBF8,0xF7A,0xFBF2,
0xF79,0xFBEC,0xF77,0xFBE6,
0xF76,0xFBE0,0xF74,0xFBDA,
0xF72,0xFBD4,0xF71,0xFBCE,
0xF6F,0xFBC8,0xF6D,0xFBC2,
0xF6C,0xFBBC,0xF6A,0xFBB5,
0xF68,0xFBAF,0xF67,0xFBA9,
0xF65,0xFBA3,0xF63,0xFB9D,
0xF61,0xFB97,0xF60,0xFB91,
0xF5E,0xFB8B,0xF5C,0xFB85,
0xF5A,0xFB7F,0xF59,0xFB79,
0xF57,0xFB73,0xF55,0xFB6D,
0xF53,0xFB67,0xF51,0xFB61,
0xF50,0xFB5B,0xF4E,0xFB55,
0xF4C,0xFB4F,0xF4A,0xFB49,
0xF48,0xFB43,0xF46,0xFB3D,
0xF45,0xFB37,0xF43,0xFB31,
0xF41,0xFB2B,0xF3F,0xFB25,
0xF3D,0xFB1F,0xF3B,0xFB19,
0xF39,0xFB13,0xF37,0xFB0D,
0xF35,0xFB07,0xF33,0xFB01,
0xF31,0xFAFB,0xF2F,0xFAF5,
0xF2D,0xFAEF,0xF2B,0xFAE9,
0xF29,0xFAE3,0xF27,0xFADD,
0xF25,0xFAD7,0xF23,0xFAD1,
0xF21,0xFACC,0xF1F,0xFAC6,
0xF1D,0xFAC0,0xF1B,0xFABA,
0xF19,0xFAB4,0xF17,0xFAAE,
0xF15,0xFAA8,0xF13,0xFAA2,
0xF11,0xFA9C,0xF0E,0xFA96,
0xF0C,0xFA90,0xF0A,0xFA8A,
0xF08,0xFA84,0xF06,0xFA7F,
0xF04,0xFA79,0xF02,0xFA73,
0xEFF,0xFA6D,0xEFD,0xFA67,
0xEFB,0xFA61,0xEF9,0xFA5B,
0xEF7,0xFA55,0xEF4,0xFA4F,
0xEF2,0xFA4A,0xEF0,0xFA44,
0xEEE,0xFA3E,0xEEB,0xFA38,
0xEE9,0xFA32,0xEE7,0xFA2C,
0xEE4,0xFA26,0xEE2,0xFA21,
0xEE0,0xFA1B,0xEDD,0xFA15,
0xEDB,0xFA0F,0xED9,0xFA09,
0xED6,0xFA03,0xED4,0xF9FE,
0xED2,0xF9F8,0xECF,0xF9F2,
0xECD,0xF9EC,0xECB,0xF9E6,
0xEC8,0xF9E1,0xEC6,0xF9DB,
0xEC3,0xF9D5,0xEC1,0xF9CF,
0xEBF,0xF9C9,0xEBC,0xF9C4,
0xEBA,0xF9BE,0xEB7,0xF9B8,
0xEB5,0xF9B2,0xEB2,0xF9AC,
0xEB0,0xF9A7,0xEAD,0xF9A1,
0xEAB,0xF99B,0xEA8,0xF995,
0xEA6,0xF990,0xEA3,0xF98A,
0xEA1,0xF984,0xE9E,0xF97E,
0xE9B,0xF979,0xE99,0xF973,
0xE96,0xF96D,0xE94,0xF967,
0xE91,0xF962,0xE8F,0xF95C,
0xE8C,0xF956,0xE89,0xF951,
0xE87,0xF94B,0xE84,0xF945,
0xE81,0xF93F,0xE7F,0xF93A,
0xE7C,0xF934,0xE79,0xF92E,
0xE77,0xF929,0xE74,0xF923,
0xE71,0xF91D,0xE6F,0xF918,
0xE6C,0xF912,0xE69,0xF90C,
0xE66,0xF907,0xE64,0xF901,
0xE61,0xF8FB,0xE5E,0xF8F6,
0xE5B,0xF8F0,0xE59,0xF8EB,
0xE56,0xF8E5,0xE53,0xF8DF,
0xE50,0xF8DA,0xE4D,0xF8D4,
0xE4B,0xF8CE,0xE48,0xF8C9,
0xE45,0xF8C3,0xE42,0xF8BE,
0xE3F,0xF8B8,0xE3C,0xF8B2,
0xE3A,0xF8AD,0xE37,0xF8A7,
0xE34,0xF8A2,0xE31,0xF89C,
0xE2E,0xF896,0xE2B,0xF891,
0xE28,0xF88B,0xE25,0xF886,
0xE22,0xF880,0xE1F,0xF87B,
0xE1C,0xF875,0xE19,0xF870,
0xE16,0xF86A,0xE13,0xF865,
0xE10,0xF85F,0xE0D,0xF85A,
0xE0A,0xF854,0xE07,0xF84E,
0xE04,0xF849,0xE01,0xF843,
0xDFE,0xF83E,0xDFB,0xF838,
0xDF8,0xF833,0xDF5,0xF82E,
0xDF2,0xF828,0xDEF,0xF823,
0xDEC,0xF81D,0xDE9,0xF818,
0xDE6,0xF812,0xDE3,0xF80D,
0xDDF,0xF807,0xDDC,0xF802,
0xDD9,0xF7FC,0xDD6,0xF7F7,
0xDD3,0xF7F2,0xDD0,0xF7EC,
0xDCC,0xF7E7,0xDC9,0xF7E1,
0xDC6,0xF7DC,0xDC3,0xF7D6,
0xDC0,0xF7D1,0xDBC,0xF7CC,
0xDB9,0xF7C6,0xDB6,0xF7C1,
0xDB3,0xF7BB,0xDB0,0xF7B6,
0xDAC,0xF7B1,0xDA9,0xF7AB,
0xDA6,0xF7A6,0xDA2,0xF7A1,
0xD9F,0xF79B,0xD9C,0xF796,
0xD99,0xF791,0xD95,0xF78B,
0xD92,0xF786,0xD8F,0xF781,
0xD8B,0xF77B,0xD88,0xF776,
0xD85,0xF771,0xD81,0xF76B,
0xD7E,0xF766,0xD7A,0xF761,
0xD77,0xF75B,0xD74,0xF756,
0xD70,0xF751,0xD6D,0xF74C,
0xD69,0xF746,0xD66,0xF741,
0xD62,0xF73C,0xD5F,0xF737,
0xD5C,0xF731,0xD58,0xF72C,
0xD55,0xF727,0xD51,0xF722,
0xD4E,0xF71C,0xD4A,0xF717,
0xD47,0xF712,0xD43,0xF70D,
0xD40,0xF708,0xD3C,0xF702,
0xD39,0xF6FD,0xD35,0xF6F8,
0xD32,0xF6F3,0xD2E,0xF6EE,
0xD2A,0xF6E8,0xD27,0xF6E3,
0xD23,0xF6DE,0xD20,0xF6D9,
0xD1C,0xF6D4,0xD18,0xF6CF,
0xD15,0xF6C9,0xD11,0xF6C4,
0xD0E,0xF6BF,0xD0A,0xF6BA,
0xD06,0xF6B5,0xD03,0xF6B0,
0xCFF,0xF6AB,0xCFB,0xF6A6,
0xCF8,0xF6A1,0xCF4,0xF69B,
0xCF0,0xF696,0xCED,0xF691,
0xCE9,0xF68C,0xCE5,0xF687,
0xCE1,0xF682,0xCDE,0xF67D,
0xCDA,0xF678,0xCD6,0xF673,
0xCD2,0xF66E,0xCCF,0xF669,
0xCCB,0xF664,0xCC7,0xF65F,
0xCC3,0xF65A,0xCC0,0xF655,
0xCBC,0xF650,0xCB8,0xF64B,
0xCB4,0xF646,0xCB0,0xF641,
0xCAC,0xF63C,0xCA9,0xF637,
0xCA5,0xF632,0xCA1,0xF62D,
0xC9D,0xF628,0xC99,0xF623,
0xC95,0xF61E,0xC91,0xF619,
0xC8E,0xF614,0xC8A,0xF60F,
0xC86,0xF60A,0xC82,0xF605,
0xC7E,0xF601,0xC7A,0xF5FC,
0xC76,0xF5F7,0xC72,0xF5F2,
0xC6E,0xF5ED,0xC6A,0xF5E8,
0xC66,0xF5E3,0xC62,0xF5DE,
0xC5E,0xF5DA,0xC5A,0xF5D5,
0xC56,0xF5D0,0xC52,0xF5CB,
0xC4E,0xF5C6,0xC4A,0xF5C1,
0xC46,0xF5BC,0xC42,0xF5B8,
0xC3E,0xF5B3,0xC3A,0xF5AE,
0xC36,0xF5A9,0xC32,0xF5A4,
0xC2E,0xF5A0,0xC2A,0xF59B,
0xC26,0xF596,0xC22,0xF591,
0xC1E,0xF58D,0xC19,0xF588,
0xC15,0xF583,0xC11,0xF57E,
0xC0D,0xF57A,0xC09,0xF575,
0xC05,0xF570,0xC01,0xF56B,
0xBFC,0xF567,0xBF8,0xF562,
0xBF4,0xF55D,0xBF0,0xF559,
0xBEC,0xF554,0xBE8,0xF54F,
0xBE3,0xF54B,0xBDF,0xF546,
0xBDB,0xF541,0xBD7,0xF53D,
0xBD2,0xF538,0xBCE,0xF533,
0xBCA,0xF52F,0xBC6,0xF52A,
0xBC1,0xF525,0xBBD,0xF521,
0xBB9,0xF51C,0xBB5,0xF518,
0xBB0,0xF513,0xBAC,0xF50E,
0xBA8,0xF50A,0xBA3,0xF505,
0xB9F,0xF501,0xB9B,0xF4FC,
0xB97,0xF4F8,0xB92,0xF4F3,
0xB8E,0xF4EF,0xB89,0xF4EA,
0xB85,0xF4E5,0xB81,0xF4E1,
0xB7C,0xF4DC,0xB78,0xF4D8,
0xB74,0xF4D3,0xB6F,0xF4CF,
0xB6B,0xF4CA,0xB66,0xF4C6,
0xB62,0xF4C2,0xB5E,0xF4BD,
0xB59,0xF4B9,0xB55,0xF4B4,
0xB50,0xF4B0,0xB4C,0xF4AB,
0xB47,0xF4A7,0xB43,0xF4A2,
0xB3E,0xF49E,0xB3A,0xF49A,
0xB36,0xF495,0xB31,0xF491,
0xB2D,0xF48C,0xB28,0xF488,
0xB24,0xF484,0xB1F,0xF47F,
0xB1B,0xF47B,0xB16,0xF477,
0xB11,0xF472,0xB0D,0xF46E,
0xB08,0xF469,0xB04,0xF465,
0xAFF,0xF461,0xAFB,0xF45D,
0xAF6,0xF458,0xAF2,0xF454,
0xAED,0xF450,0xAE8,0xF44B,
0xAE4,0xF447,0xADF,0xF443,
0xADB,0xF43F,0xAD6,0xF43A,
0xAD1,0xF436,0xACD,0xF432,
0xAC8,0xF42E,0xAC3,0xF429,
0xABF,0xF425,0xABA,0xF421,
0xAB5,0xF41D,0xAB1,0xF418,
0xAAC,0xF414,0xAA7,0xF410,
0xAA3,0xF40C,0xA9E,0xF408,
0xA99,0xF404,0xA95,0xF3FF,
0xA90,0xF3FB,0xA8B,0xF3F7,
0xA86,0xF3F3,0xA82,0xF3EF,
0xA7D,0xF3EB,0xA78,0xF3E7,
0xA73,0xF3E2,0xA6F,0xF3DE,
0xA6A,0xF3DA,0xA65,0xF3D6,
0xA60,0xF3D2,0xA5C,0xF3CE,
0xA57,0xF3CA,0xA52,0xF3C6,
0xA4D,0xF3C2,0xA48,0xF3BE,
0xA44,0xF3BA,0xA3F,0xF3B6,
0xA3A,0xF3B2,0xA35,0xF3AE,
0xA30,0xF3AA,0xA2B,0xF3A6,
0xA26,0xF3A2,0xA22,0xF39E,
0xA1D,0xF39A,0xA18,0xF396,
0xA13,0xF392,0xA0E,0xF38E,
0xA09,0xF38A,0xA04,0xF386,
0x9FF,0xF382,0x9FB,0xF37E,
0x9F6,0xF37A,0x9F1,0xF376,
0x9EC,0xF372,0x9E7,0xF36F,
0x9E2,0xF36B,0x9DD,0xF367,
0x9D8,0xF363,0x9D3,0xF35F,
0x9CE,0xF35B,0x9C9,0xF357,
0x9C4,0xF354,0x9BF,0xF350,
0x9BA,0xF34C,0x9B5,0xF348,
0x9B0,0xF344,0x9AB,0xF340,
0x9A6,0xF33D,0x9A1,0xF339,
0x99C,0xF335,0x997,0xF331,
0x992,0xF32E,0x98D,0xF32A,
0x988,0xF326,0x983,0xF322,
0x97E,0xF31F,0x979,0xF31B,
0x974,0xF317,0x96F,0xF313,
0x96A,0xF310,0x965,0xF30C,
0x95F,0xF308,0x95A,0xF305,
0x955,0xF301,0x950,0xF2FD,
0x94B,0xF2FA,0x946,0xF2F6,
0x941,0xF2F2,0x93C,0xF2EF,
0x937,0xF2EB,0x931,0xF2E8,
0x92C,0xF2E4,0x927,0xF2E0,
0x922,0xF2DD,0x91D,0xF2D9,
0x918,0xF2D6,0x912,0xF2D2,
0x90D,0xF2CE,0x908,0xF2CB,
0x903,0xF2C7,0x8FE,0xF2C4,
0x8F8,0xF2C0,0x8F3,0xF2BD,
0x8EE,0xF2B9,0x8E9,0xF2B6,
0x8E4,0xF2B2,0x8DE,0xF2AF,
0x8D9,0xF2AB,0x8D4,0xF2A8,
0x8CF,0xF2A4,0x8C9,0xF2A1,
0x8C4,0xF29E,0x8BF,0xF29A,
0x8BA,0xF297,0x8B4,0xF293,
0x8AF,0xF290,0x8AA,0xF28C,
0x8A5,0xF289,0x89F,0xF286,
0x89A,0xF282,0x895,0xF27F,
0x88F,0xF27B,0x88A,0xF278,
0x885,0xF275,0x87F,0xF271,
0x87A,0xF26E,0x875,0xF26B,
0x86F,0xF267,0x86A,0xF264,
0x865,0xF261,0x85F,0xF25E,
0x85A,0xF25A,0x855,0xF257,
0x84F,0xF254,0x84A,0xF250,
0x845,0xF24D,0x83F,0xF24A,
0x83A,0xF247,0x834,0xF244,
0x82F,0xF240,0x82A,0xF23D,
0x824,0xF23A,0x81F,0xF237,
0x819,0xF234,0x814,0xF230,
0x80E,0xF22D,0x809,0xF22A,
0x804,0xF227,0x7FE,0xF224,
0x7F9,0xF221,0x7F3,0xF21D,
0x7EE,0xF21A,0x7E8,0xF217,
0x7E3,0xF214,0x7DD,0xF211,
0x7D8,0xF20E,0x7D2,0xF20B,
0x7CD,0xF208,0x7C8,0xF205,
0x7C2,0xF202,0x7BD,0xF1FF,
0x7B7,0xF1FC,0x7B2,0xF1F9,
0x7AC,0xF1F6,0x7A6,0xF1F3,
0x7A1,0xF1F0,0x79B,0xF1ED,
0x796,0xF1EA,0x790,0xF1E7,
0x78B,0xF1E4,0x785,0xF1E1,
0x780,0xF1DE,0x77A,0xF1DB,
0x775,0xF1D8,0x76F,0xF1D5,
0x76A,0xF1D2,0x764,0xF1CF,
0x75E,0xF1CC,0x759,0xF1C9,
0x753,0xF1C6,0x74E,0xF1C4,
0x748,0xF1C1,0x742,0xF1BE,
0x73D,0xF1BB,0x737,0xF1B8,
0x732,0xF1B5,0x72C,0xF1B3,
0x726,0xF1B0,0x721,0xF1AD,
0x71B,0xF1AA,0x715,0xF1A7,
0x710,0xF1A5,0x70A,0xF1A2,
0x705,0xF19F,0x6FF,0xF19C,
0x6F9,0xF19A,0x6F4,0xF197,
0x6EE,0xF194,0x6E8,0xF191,
0x6E3,0xF18F,0x6DD,0xF18C,
0x6D7,0xF189,0x6D2,0xF187,
0x6CC,0xF184,0x6C6,0xF181,
0x6C1,0xF17F,0x6BB,0xF17C,
0x6B5,0xF179,0x6AF,0xF177,
0x6AA,0xF174,0x6A4,0xF171,
0x69E,0xF16F,0x699,0xF16C,
0x693,0xF16A,0x68D,0xF167,
0x687,0xF165,0x682,0xF162,
0x67C,0xF15F,0x676,0xF15D,
0x670,0xF15A,0x66B,0xF158,
0x665,0xF155,0x65F,0xF153,
0x659,0xF150,0x654,0xF14E,
0x64E,0xF14B,0x648,0xF149,
0x642,0xF146,0x63C,0xF144,
0x637,0xF141,0x631,0xF13F,
0x62B,0xF13D,0x625,0xF13A,
0x61F,0xF138,0x61A,0xF135,
0x614,0xF133,0x60E,0xF131,
0x608,0xF12E,0x602,0xF12C,
0x5FD,0xF12A,0x5F7,0xF127,
0x5F1,0xF125,0x5EB,0xF123,
0x5E5,0xF120,0x5DF,0xF11E,
0x5DA,0xF11C,0x5D4,0xF119,
0x5CE,0xF117,0x5C8,0xF115,
0x5C2,0xF112,0x5BC,0xF110,
0x5B6,0xF10E,0x5B1,0xF10C,
0x5AB,0xF109,0x5A5,0xF107,
0x59F,0xF105,0x599,0xF103,
0x593,0xF101,0x58D,0xF0FE,
0x587,0xF0FC,0x581,0xF0FA,
0x57C,0xF0F8,0x576,0xF0F6,
0x570,0xF0F4,0x56A,0xF0F2,
0x564,0xF0EF,0x55E,0xF0ED,
0x558,0xF0EB,0x552,0xF0E9,
0x54C,0xF0E7,0x546,0xF0E5,
0x540,0xF0E3,0x53A,0xF0E1,
0x534,0xF0DF,0x52F,0xF0DD,
0x529,0xF0DB,0x523,0xF0D9,
0x51D,0xF0D7,0x517,0xF0D5,
0x511,0xF0D3,0x50B,0xF0D1,
0x505,0xF0CF,0x4FF,0xF0CD,
0x4F9,0xF0CB,0x4F3,0xF0C9,
0x4ED,0xF0C7,0x4E7,0xF0C5,
0x4E1,0xF0C3,0x4DB,0xF0C1,
0x4D5,0xF0BF,0x4CF,0xF0BD,
0x4C9,0xF0BB,0x4C3,0xF0BA,
0x4BD,0xF0B8,0x4B7,0xF0B6,
0x4B1,0xF0B4,0x4AB,0xF0B2,
0x4A5,0xF0B0,0x49F,0xF0AF,
0x499,0xF0AD,0x493,0xF0AB,
0x48D,0xF0A9,0x487,0xF0A7,
0x481,0xF0A6,0x47B,0xF0A4,
0x475,0xF0A2,0x46F,0xF0A0,
0x469,0xF09F,0x463,0xF09D,
0x45D,0xF09B,0x457,0xF099,
0x451,0xF098,0x44B,0xF096,
0x444,0xF094,0x43E,0xF093,
0x438,0xF091,0x432,0xF08F,
0x42C,0xF08E,0x426,0xF08C,
0x420,0xF08A,0x41A,0xF089,
0x414,0xF087,0x40E,0xF086,
0x408,0xF084,0x402,0xF083,
0x3FC,0xF081,0x3F6,0xF07F,
0x3EF,0xF07E,0x3E9,0xF07C,
0x3E3,0xF07B,0x3DD,0xF079,
0x3D7,0xF078,0x3D1,0xF076,
0x3CB,0xF075,0x3C5,0xF073,
0x3BF,0xF072,0x3B9,0xF070,
0x3B2,0xF06F,0x3AC,0xF06D,
0x3A6,0xF06C,0x3A0,0xF06B,
0x39A,0xF069,0x394,0xF068,
0x38E,0xF066,0x388,0xF065,
0x381,0xF064,0x37B,0xF062,
0x375,0xF061,0x36F,0xF05F,
0x369,0xF05E,0x363,0xF05D,
0x35D,0xF05B,0x356,0xF05A,
0x350,0xF059,0x34A,0xF058,
0x344,0xF056,0x33E,0xF055,
0x338,0xF054,0x332,0xF052,
0x32B,0xF051,0x325,0xF050,
0x31F,0xF04F,0x319,0xF04D,
0x313,0xF04C,0x30D,0xF04B,
0x306,0xF04A,0x300,0xF049,
0x2FA,0xF048,0x2F4,0xF046,
0x2EE,0xF045,0x2E8,0xF044,
0x2E1,0xF043,0x2DB,0xF042,
0x2D5,0xF041,0x2CF,0xF040,
0x2C9,0xF03E,0x2C2,0xF03D,
0x2BC,0xF03C,0x2B6,0xF03B,
0x2B0,0xF03A,0x2AA,0xF039,
0x2A3,0xF038,0x29D,0xF037,
0x297,0xF036,0x291,0xF035,
0x28B,0xF034,0x284,0xF033,
0x27E,0xF032,0x278,0xF031,
0x272,0xF030,0x26C,0xF02F,
0x265,0xF02E,0x25F,0xF02D,
0x259,0xF02C,0x253,0xF02B,
0x24D,0xF02B,0x246,0xF02A,
0x240,0xF029,0x23A,0xF028,
0x234,0xF027,0x22D,0xF026,
0x227,0xF025,0x221,0xF024,
0x21B,0xF024,0x215,0xF023,
0x20E,0xF022,0x208,0xF021,
0x202,0xF020,0x1FC,0xF020,
0x1F5,0xF01F,0x1EF,0xF01E,
0x1E9,0xF01D,0x1E3,0xF01D,
0x1DC,0xF01C,0x1D6,0xF01B,
0x1D0,0xF01A,0x1CA,0xF01A,
0x1C3,0xF019,0x1BD,0xF018,
0x1B7,0xF018,0x1B1,0xF017,
0x1AA,0xF016,0x1A4,0xF016,
0x19E,0xF015,0x198,0xF014,
0x191,0xF014,0x18B,0xF013,
0x185,0xF013,0x17F,0xF012,
0x178,0xF011,0x172,0xF011,
0x16C,0xF010,0x166,0xF010,
0x15F,0xF00F,0x159,0xF00F,
0x153,0xF00E,0x14D,0xF00E,
0x146,0xF00D,0x140,0xF00D,
0x13A,0xF00C,0x134,0xF00C,
0x12D,0xF00B,0x127,0xF00B,
0x121,0xF00A,0x11B,0xF00A,
0x114,0xF009,0x10E,0xF009,
0x108,0xF008,0x101,0xF008,
0xFB,0xF008,0xF5,0xF007,
0xEF,0xF007,0xE8,0xF007,
0xE2,0xF006,0xDC,0xF006,
0xD6,0xF006,0xCF,0xF005,
0xC9,0xF005,0xC3,0xF005,
0xBC,0xF004,0xB6,0xF004,
0xB0,0xF004,0xAA,0xF004,
0xA3,0xF003,0x9D,0xF003,
0x97,0xF003,0x90,0xF003,
0x8A,0xF002,0x84,0xF002,
0x7E,0xF002,0x77,0xF002,
0x71,0xF002,0x6B,0xF001,
0x65,0xF001,0x5E,0xF001,
0x58,0xF001,0x52,0xF001,
0x4B,0xF001,0x45,0xF001,
0x3F,0xF000,0x39,0xF000,
0x32,0xF000,0x2C,0xF000,
0x26,0xF000,0x1F,0xF000,
0x19,0xF000,0x13,0xF000,
0xD,0xF000,0x6,0xF000,
0x0,0xF000,0xFFFA,0xF000,
0xFFF3,0xF000,0xFFED,0xF000,
0xFFE7,0xF000,0xFFE1,0xF000,
0xFFDA,0xF000,0xFFD4,0xF000,
0xFFCE,0xF000,0xFFC7,0xF000,
0xFFC1,0xF000,0xFFBB,0xF001,
0xFFB5,0xF001,0xFFAE,0xF001,
0xFFA8,0xF001,0xFFA2,0xF001,
0xFF9B,0xF001,0xFF95,0xF001,
0xFF8F,0xF002,0xFF89,0xF002,
0xFF82,0xF002,0xFF7C,0xF002,
0xFF76,0xF002,0xFF70,0xF003,
0xFF69,0xF003,0xFF63,0xF003,
0xFF5D,0xF003,0xFF56,0xF004,
0xFF50,0xF004,0xFF4A,0xF004,
0xFF44,0xF004,0xFF3D,0xF005,
0xFF37,0xF005,0xFF31,0xF005,
0xFF2A,0xF006,0xFF24,0xF006,
0xFF1E,0xF006,0xFF18,0xF007,
0xFF11,0xF007,0xFF0B,0xF007,
0xFF05,0xF008,0xFEFF,0xF008,
0xFEF8,0xF008,0xFEF2,0xF009,
0xFEEC,0xF009,0xFEE5,0xF00A,
0xFEDF,0xF00A,0xFED9,0xF00B,
0xFED3,0xF00B,0xFECC,0xF00C,
0xFEC6,0xF00C,0xFEC0,0xF00D,
0xFEBA,0xF00D,0xFEB3,0xF00E,
0xFEAD,0xF00E,0xFEA7,0xF00F,
0xFEA1,0xF00F,0xFE9A,0xF010,
0xFE94,0xF010,0xFE8E,0xF011,
0xFE88,0xF011,0xFE81,0xF012,
0xFE7B,0xF013,0xFE75,0xF013,
0xFE6F,0xF014,0xFE68,0xF014,
0xFE62,0xF015,0xFE5C,0xF016,
0xFE56,0xF016,0xFE4F,0xF017,
0xFE49,0xF018,0xFE43,0xF018,
0xFE3D,0xF019,0xFE36,0xF01A,
0xFE30,0xF01A,0xFE2A,0xF01B,
0xFE24,0xF01C,0xFE1D,0xF01D,
0xFE17,0xF01D,0xFE11,0xF01E,
0xFE0B,0xF01F,0xFE04,0xF020,
0xFDFE,0xF020,0xFDF8,0xF021,
0xFDF2,0xF022,0xFDEB,0xF023,
0xFDE5,0xF024,0xFDDF,0xF024,
0xFDD9,0xF025,0xFDD3,0xF026,
0xFDCC,0xF027,0xFDC6,0xF028,
0xFDC0,0xF029,0xFDBA,0xF02A,
0xFDB3,0xF02B,0xFDAD,0xF02B,
0xFDA7,0xF02C,0xFDA1,0xF02D,
0xFD9B,0xF02E,0xFD94,0xF02F,
0xFD8E,0xF030,0xFD88,0xF031,
0xFD82,0xF032,0xFD7C,0xF033,
0xFD75,0xF034,0xFD6F,0xF035,
0xFD69,0xF036,0xFD63,0xF037,
0xFD5D,0xF038,0xFD56,0xF039,
0xFD50,0xF03A,0xFD4A,0xF03B,
0xFD44,0xF03C,0xFD3E,0xF03D,
0xFD37,0xF03E,0xFD31,0xF040,
0xFD2B,0xF041,0xFD25,0xF042,
0xFD1F,0xF043,0xFD18,0xF044,
0xFD12,0xF045,0xFD0C,0xF046,
0xFD06,0xF048,0xFD00,0xF049,
0xFCFA,0xF04A,0xFCF3,0xF04B,
0xFCED,0xF04C,0xFCE7,0xF04D,
0xFCE1,0xF04F,0xFCDB,0xF050,
0xFCD5,0xF051,0xFCCE,0xF052,
0xFCC8,0xF054,0xFCC2,0xF055,
0xFCBC,0xF056,0xFCB6,0xF058,
0xFCB0,0xF059,0xFCAA,0xF05A,
0xFCA3,0xF05B,0xFC9D,0xF05D,
0xFC97,0xF05E,0xFC91,0xF05F,
0xFC8B,0xF061,0xFC85,0xF062,
0xFC7F,0xF064,0xFC78,0xF065,
0xFC72,0xF066,0xFC6C,0xF068,
0xFC66,0xF069,0xFC60,0xF06B,
0xFC5A,0xF06C,0xFC54,0xF06D,
0xFC4E,0xF06F,0xFC47,0xF070,
0xFC41,0xF072,0xFC3B,0xF073,
0xFC35,0xF075,0xFC2F,0xF076,
0xFC29,0xF078,0xFC23,0xF079,
0xFC1D,0xF07B,0xFC17,0xF07C,
0xFC11,0xF07E,0xFC0A,0xF07F,
0xFC04,0xF081,0xFBFE,0xF083,
0xFBF8,0xF084,0xFBF2,0xF086,
0xFBEC,0xF087,0xFBE6,0xF089,
0xFBE0,0xF08A,0xFBDA,0xF08C,
0xFBD4,0xF08E,0xFBCE,0xF08F,
0xFBC8,0xF091,0xFBC2,0xF093,
0xFBBC,0xF094,0xFBB5,0xF096,
0xFBAF,0xF098,0xFBA9,0xF099,
0xFBA3,0xF09B,0xFB9D,0xF09D,
0xFB97,0xF09F,0xFB91,0xF0A0,
0xFB8B,0xF0A2,0xFB85,0xF0A4,
0xFB7F,0xF0A6,0xFB79,0xF0A7,
0xFB73,0xF0A9,0xFB6D,0xF0AB,
0xFB67,0xF0AD,0xFB61,0xF0AF,
0xFB5B,0xF0B0,0xFB55,0xF0B2,
0xFB4F,0xF0B4,0xFB49,0xF0B6,
0xFB43,0xF0B8,0xFB3D,0xF0BA,
0xFB37,0xF0BB,0xFB31,0xF0BD,
0xFB2B,0xF0BF,0xFB25,0xF0C1,
0xFB1F,0xF0C3,0xFB19,0xF0C5,
0xFB13,0xF0C7,0xFB0D,0xF0C9,
0xFB07,0xF0CB,0xFB01,0xF0CD,
0xFAFB,0xF0CF,0xFAF5,0xF0D1,
0xFAEF,0xF0D3,0xFAE9,0xF0D5,
0xFAE3,0xF0D7,0xFADD,0xF0D9,
0xFAD7,0xF0DB,0xFAD1,0xF0DD,
0xFACC,0xF0DF,0xFAC6,0xF0E1,
0xFAC0,0xF0E3,0xFABA,0xF0E5,
0xFAB4,0xF0E7,0xFAAE,0xF0E9,
0xFAA8,0xF0EB,0xFAA2,0xF0ED,
0xFA9C,0xF0EF,0xFA96,0xF0F2,
0xFA90,0xF0F4,0xFA8A,0xF0F6,
0xFA84,0xF0F8,0xFA7F,0xF0FA,
0xFA79,0xF0FC,0xFA73,0xF0FE,
0xFA6D,0xF101,0xFA67,0xF103,
0xFA61,0xF105,0xFA5B,0xF107,
0xFA55,0xF109,0xFA4F,0xF10C,
0xFA4A,0xF10E,0xFA44,0xF110,
0xFA3E,0xF112,0xFA38,0xF115,
0xFA32,0xF117,0xFA2C,0xF119,
0xFA26,0xF11C,0xFA21,0xF11E,
0xFA1B,0xF120,0xFA15,0xF123,
0xFA0F,0xF125,0xFA09,0xF127,
0xFA03,0xF12A,0xF9FE,0xF12C,
0xF9F8,0xF12E,0xF9F2,0xF131,
0xF9EC,0xF133,0xF9E6,0xF135,
0xF9E1,0xF138,0xF9DB,0xF13A,
0xF9D5,0xF13D,0xF9CF,0xF13F,
0xF9C9,0xF141,0xF9C4,0xF144,
0xF9BE,0xF146,0xF9B8,0xF149,
0xF9B2,0xF14B,0xF9AC,0xF14E,
0xF9A7,0xF150,0xF9A1,0xF153,
0xF99B,0xF155,0xF995,0xF158,
0xF990,0xF15A,0xF98A,0xF15D,
0xF984,0xF15F,0xF97E,0xF162,
0xF979,0xF165,0xF973,0xF167,
0xF96D,0xF16A,0xF967,0xF16C,
0xF962,0xF16F,0xF95C,0xF171,
0xF956,0xF174,0xF951,0xF177,
0xF94B,0xF179,0xF945,0xF17C,
0xF93F,0xF17F,0xF93A,0xF181,
0xF934,0xF184,0xF92E,0xF187,
0xF929,0xF189,0xF923,0xF18C,
0xF91D,0xF18F,0xF918,0xF191,
0xF912,0xF194,0xF90C,0xF197,
0xF907,0xF19A,0xF901,0xF19C,
0xF8FB,0xF19F,0xF8F6,0xF1A2,
0xF8F0,0xF1A5,0xF8EB,0xF1A7,
0xF8E5,0xF1AA,0xF8DF,0xF1AD,
0xF8DA,0xF1B0,0xF8D4,0xF1B3,
0xF8CE,0xF1B5,0xF8C9,0xF1B8,
0xF8C3,0xF1BB,0xF8BE,0xF1BE,
0xF8B8,0xF1C1,0xF8B2,0xF1C4,
0xF8AD,0xF1C6,0xF8A7,0xF1C9,
0xF8A2,0xF1CC,0xF89C,0xF1CF,
0xF896,0xF1D2,0xF891,0xF1D5,
0xF88B,0xF1D8,0xF886,0xF1DB,
0xF880,0xF1DE,0xF87B,0xF1E1,
0xF875,0xF1E4,0xF870,0xF1E7,
0xF86A,0xF1EA,0xF865,0xF1ED,
0xF85F,0xF1F0,0xF85A,0xF1F3,
0xF854,0xF1F6,0xF84E,0xF1F9,
0xF849,0xF1FC,0xF843,0xF1FF,
0xF83E,0xF202,0xF838,0xF205,
0xF833,0xF208,0xF82E,0xF20B,
0xF828,0xF20E,0xF823,0xF211,
0xF81D,0xF214,0xF818,0xF217,
0xF812,0xF21A,0xF80D,0xF21D,
0xF807,0xF221,0xF802,0xF224,
0xF7FC,0xF227,0xF7F7,0xF22A,
0xF7F2,0xF22D,0xF7EC,0xF230,
0xF7E7,0xF234,0xF7E1,0xF237,
0xF7DC,0xF23A,0xF7D6,0xF23D,
0xF7D1,0xF240,0xF7CC,0xF244,
0xF7C6,0xF247,0xF7C1,0xF24A,
0xF7BB,0xF24D,0xF7B6,0xF250,
0xF7B1,0xF254,0xF7AB,0xF257,
0xF7A6,0xF25A,0xF7A1,0xF25E,
0xF79B,0xF261,0xF796,0xF264,
0xF791,0xF267,0xF78B,0xF26B,
0xF786,0xF26E,0xF781,0xF271,
0xF77B,0xF275,0xF776,0xF278,
0xF771,0xF27B,0xF76B,0xF27F,
0xF766,0xF282,0xF761,0xF286,
0xF75B,0xF289,0xF756,0xF28C,
0xF751,0xF290,0xF74C,0xF293,
0xF746,0xF297,0xF741,0xF29A,
0xF73C,0xF29E,0xF737,0xF2A1,
0xF731,0xF2A4,0xF72C,0xF2A8,
0xF727,0xF2AB,0xF722,0xF2AF,
0xF71C,0xF2B2,0xF717,0xF2B6,
0xF712,0xF2B9,0xF70D,0xF2BD,
0xF708,0xF2C0,0xF702,0xF2C4,
0xF6FD,0xF2C7,0xF6F8,0xF2CB,
0xF6F3,0xF2CE,0xF6EE,0xF2D2,
0xF6E8,0xF2D6,0xF6E3,0xF2D9,
0xF6DE,0xF2DD,0xF6D9,0xF2E0,
0xF6D4,0xF2E4,0xF6CF,0xF2E8,
0xF6C9,0xF2EB,0xF6C4,0xF2EF,
0xF6BF,0xF2F2,0xF6BA,0xF2F6,
0xF6B5,0xF2FA,0xF6B0,0xF2FD,
0xF6AB,0xF301,0xF6A6,0xF305,
0xF6A1,0xF308,0xF69B,0xF30C,
0xF696,0xF310,0xF691,0xF313,
0xF68C,0xF317,0xF687,0xF31B,
0xF682,0xF31F,0xF67D,0xF322,
0xF678,0xF326,0xF673,0xF32A,
0xF66E,0xF32E,0xF669,0xF331,
0xF664,0xF335,0xF65F,0xF339,
0xF65A,0xF33D,0xF655,0xF340,
0xF650,0xF344,0xF64B,0xF348,
0xF646,0xF34C,0xF641,0xF350,
0xF63C,0xF354,0xF637,0xF357,
0xF632,0xF35B,0xF62D,0xF35F,
0xF628,0xF363,0xF623,0xF367,
0xF61E,0xF36B,0xF619,0xF36F,
0xF614,0xF372,0xF60F,0xF376,
0xF60A,0xF37A,0xF605,0xF37E,
0xF601,0xF382,0xF5FC,0xF386,
0xF5F7,0xF38A,0xF5F2,0xF38E,
0xF5ED,0xF392,0xF5E8,0xF396,
0xF5E3,0xF39A,0xF5DE,0xF39E,
0xF5DA,0xF3A2,0xF5D5,0xF3A6,
0xF5D0,0xF3AA,0xF5CB,0xF3AE,
0xF5C6,0xF3B2,0xF5C1,0xF3B6,
0xF5BC,0xF3BA,0xF5B8,0xF3BE,
0xF5B3,0xF3C2,0xF5AE,0xF3C6,
0xF5A9,0xF3CA,0xF5A4,0xF3CE,
0xF5A0,0xF3D2,0xF59B,0xF3D6,
0xF596,0xF3DA,0xF591,0xF3DE,
0xF58D,0xF3E2,0xF588,0xF3E7,
0xF583,0xF3EB,0xF57E,0xF3EF,
0xF57A,0xF3F3,0xF575,0xF3F7,
0xF570,0xF3FB,0xF56B,0xF3FF,
0xF567,0xF404,0xF562,0xF408,
0xF55D,0xF40C,0xF559,0xF410,
0xF554,0xF414,0xF54F,0xF418,
0xF54B,0xF41D,0xF546,0xF421,
0xF541,0xF425,0xF53D,0xF429,
0xF538,0xF42E,0xF533,0xF432,
0xF52F,0xF436,0xF52A,0xF43A,
0xF525,0xF43F,0xF521,0xF443,
0xF51C,0xF447,0xF518,0xF44B,
0xF513,0xF450,0xF50E,0xF454,
0xF50A,0xF458,0xF505,0xF45D,
0xF501,0xF461,0xF4FC,0xF465,
0xF4F8,0xF469,0xF4F3,0xF46E,
0xF4EF,0xF472,0xF4EA,0xF477,
0xF4E5,0xF47B,0xF4E1,0xF47F,
0xF4DC,0xF484,0xF4D8,0xF488,
0xF4D3,0xF48C,0xF4CF,0xF491,
0xF4CA,0xF495,0xF4C6,0xF49A,
0xF4C2,0xF49E,0xF4BD,0xF4A2,
0xF4B9,0xF4A7,0xF4B4,0xF4AB,
0xF4B0,0xF4B0,0xF4AB,0xF4B4,
0xF4A7,0xF4B9,0xF4A2,0xF4BD,
0xF49E,0xF4C2,0xF49A,0xF4C6,
0xF495,0xF4CA,0xF491,0xF4CF,
0xF48C,0xF4D3,0xF488,0xF4D8,
0xF484,0xF4DC,0xF47F,0xF4E1,
0xF47B,0xF4E5,0xF477,0xF4EA,
0xF472,0xF4EF,0xF46E,0xF4F3,
0xF469,0xF4F8,0xF465,0xF4FC,
0xF461,0xF501,0xF45D,0xF505,
0xF458,0xF50A,0xF454,0xF50E,
0xF450,0xF513,0xF44B,0xF518,
0xF447,0xF51C,0xF443,0xF521,
0xF43F,0xF525,0xF43A,0xF52A,
0xF436,0xF52F,0xF432,0xF533,
0xF42E,0xF538,0xF429,0xF53D,
0xF425,0xF541,0xF421,0xF546,
0xF41D,0xF54B,0xF418,0xF54F,
0xF414,0xF554,0xF410,0xF559,
0xF40C,0xF55D,0xF408,0xF562,
0xF404,0xF567,0xF3FF,0xF56B,
0xF3FB,0xF570,0xF3F7,0xF575,
0xF3F3,0xF57A,0xF3EF,0xF57E,
0xF3EB,0xF583,0xF3E7,0xF588,
0xF3E2,0xF58D,0xF3DE,0xF591,
0xF3DA,0xF596,0xF3D6,0xF59B,
0xF3D2,0xF5A0,0xF3CE,0xF5A4,
0xF3CA,0xF5A9,0xF3C6,0xF5AE,
0xF3C2,0xF5B3,0xF3BE,0xF5B8,
0xF3BA,0xF5BC,0xF3B6,0xF5C1,
0xF3B2,0xF5C6,0xF3AE,0xF5CB,
0xF3AA,0xF5D0,0xF3A6,0xF5D5,
0xF3A2,0xF5DA,0xF39E,0xF5DE,
0xF39A,0xF5E3,0xF396,0xF5E8,
0xF392,0xF5ED,0xF38E,0xF5F2,
0xF38A,0xF5F7,0xF386,0xF5FC,
0xF382,0xF601,0xF37E,0xF605,
0xF37A,0xF60A,0xF376,0xF60F,
0xF372,0xF614,0xF36F,0xF619,
0xF36B,0xF61E,0xF367,0xF623,
0xF363,0xF628,0xF35F,0xF62D,
0xF35B,0xF632,0xF357,0xF637,
0xF354,0xF63C,0xF350,0xF641,
0xF34C,0xF646,0xF348,0xF64B,
0xF344,0xF650,0xF340,0xF655,
0xF33D,0xF65A,0xF339,0xF65F,
0xF335,0xF664,0xF331,0xF669,
0xF32E,0xF66E,0xF32A,0xF673,
0xF326,0xF678,0xF322,0xF67D,
0xF31F,0xF682,0xF31B,0xF687,
0xF317,0xF68C,0xF313,0xF691,
0xF310,0xF696,0xF30C,0xF69B,
0xF308,0xF6A1,0xF305,0xF6A6,
0xF301,0xF6AB,0xF2FD,0xF6B0,
0xF2FA,0xF6B5,0xF2F6,0xF6BA,
0xF2F2,0xF6BF,0xF2EF,0xF6C4,
0xF2EB,0xF6C9,0xF2E8,0xF6CF,
0xF2E4,0xF6D4,0xF2E0,0xF6D9,
0xF2DD,0xF6DE,0xF2D9,0xF6E3,
0xF2D6,0xF6E8,0xF2D2,0xF6EE,
0xF2CE,0xF6F3,0xF2CB,0xF6F8,
0xF2C7,0xF6FD,0xF2C4,0xF702,
0xF2C0,0xF708,0xF2BD,0xF70D,
0xF2B9,0xF712,0xF2B6,0xF717,
0xF2B2,0xF71C,0xF2AF,0xF722,
0xF2AB,0xF727,0xF2A8,0xF72C,
0xF2A4,0xF731,0xF2A1,0xF737,
0xF29E,0xF73C,0xF29A,0xF741,
0xF297,0xF746,0xF293,0xF74C,
0xF290,0xF751,0xF28C,0xF756,
0xF289,0xF75B,0xF286,0xF761,
0xF282,0xF766,0xF27F,0xF76B,
0xF27B,0xF771,0xF278,0xF776,
0xF275,0xF77B,0xF271,0xF781,
0xF26E,0xF786,0xF26B,0xF78B,
0xF267,0xF791,0xF264,0xF796,
0xF261,0xF79B,0xF25E,0xF7A1,
0xF25A,0xF7A6,0xF257,0xF7AB,
0xF254,0xF7B1,0xF250,0xF7B6,
0xF24D,0xF7BB,0xF24A,0xF7C1,
0xF247,0xF7C6,0xF244,0xF7CC,
0xF240,0xF7D1,0xF23D,0xF7D6,
0xF23A,0xF7DC,0xF237,0xF7E1,
0xF234,0xF7E7,0xF230,0xF7EC,
0xF22D,0xF7F2,0xF22A,0xF7F7,
0xF227,0xF7FC,0xF224,0xF802,
0xF221,0xF807,0xF21D,0xF80D,
0xF21A,0xF812,0xF217,0xF818,
0xF214,0xF81D,0xF211,0xF823,
0xF20E,0xF828,0xF20B,0xF82E,
0xF208,0xF833,0xF205,0xF838,
0xF202,0xF83E,0xF1FF,0xF843,
0xF1FC,0xF849,0xF1F9,0xF84E,
0xF1F6,0xF854,0xF1F3,0xF85A,
0xF1F0,0xF85F,0xF1ED,0xF865,
0xF1EA,0xF86A,0xF1E7,0xF870,
0xF1E4,0xF875,0xF1E1,0xF87B,
0xF1DE,0xF880,0xF1DB,0xF886,
0xF1D8,0xF88B,0xF1D5,0xF891,
0xF1D2,0xF896,0xF1CF,0xF89C,
0xF1CC,0xF8A2,0xF1C9,0xF8A7,
0xF1C6,0xF8AD,0xF1C4,0xF8B2,
0xF1C1,0xF8B8,0xF1BE,0xF8BE,
0xF1BB,0xF8C3,0xF1B8,0xF8C9,
0xF1B5,0xF8CE,0xF1B3,0xF8D4,
0xF1B0,0xF8DA,0xF1AD,0xF8DF,
0xF1AA,0xF8E5,0xF1A7,0xF8EB,
0xF1A5,0xF8F0,0xF1A2,0xF8F6,
0xF19F,0xF8FB,0xF19C,0xF901,
0xF19A,0xF907,0xF197,0xF90C,
0xF194,0xF912,0xF191,0xF918,
0xF18F,0xF91D,0xF18C,0xF923,
0xF189,0xF929,0xF187,0xF92E,
0xF184,0xF934,0xF181,0xF93A,
0xF17F,0xF93F,0xF17C,0xF945,
0xF179,0xF94B,0xF177,0xF951,
0xF174,0xF956,0xF171,0xF95C,
0xF16F,0xF962,0xF16C,0xF967,
0xF16A,0xF96D,0xF167,0xF973,
0xF165,0xF979,0xF162,0xF97E,
0xF15F,0xF984,0xF15D,0xF98A,
0xF15A,0xF990,0xF158,0xF995,
0xF155,0xF99B,0xF153,0xF9A1,
0xF150,0xF9A7,0xF14E,0xF9AC,
0xF14B,0xF9B2,0xF149,0xF9B8,
0xF146,0xF9BE,0xF144,0xF9C4,
0xF141,0xF9C9,0xF13F,0xF9CF,
0xF13D,0xF9D5,0xF13A,0xF9DB,
0xF138,0xF9E1,0xF135,0xF9E6,
0xF133,0xF9EC,0xF131,0xF9F2,
0xF12E,0xF9F8,0xF12C,0xF9FE,
0xF12A,0xFA03,0xF127,0xFA09,
0xF125,0xFA0F,0xF123,0xFA15,
0xF120,0xFA1B,0xF11E,0xFA21,
0xF11C,0xFA26,0xF119,0xFA2C,
0xF117,0xFA32,0xF115,0xFA38,
0xF112,0xFA3E,0xF110,0xFA44,
0xF10E,0xFA4A,0xF10C,0xFA4F,
0xF109,0xFA55,0xF107,0xFA5B,
0xF105,0xFA61,0xF103,0xFA67,
0xF101,0xFA6D,0xF0FE,0xFA73,
0xF0FC,0xFA79,0xF0FA,0xFA7F,
0xF0F8,0xFA84,0xF0F6,0xFA8A,
0xF0F4,0xFA90,0xF0F2,0xFA96,
0xF0EF,0xFA9C,0xF0ED,0xFAA2,
0xF0EB,0xFAA8,0xF0E9,0xFAAE,
0xF0E7,0xFAB4,0xF0E5,0xFABA,
0xF0E3,0xFAC0,0xF0E1,0xFAC6,
0xF0DF,0xFACC,0xF0DD,0xFAD1,
0xF0DB,0xFAD7,0xF0D9,0xFADD,
0xF0D7,0xFAE3,0xF0D5,0xFAE9,
0xF0D3,0xFAEF,0xF0D1,0xFAF5,
0xF0CF,0xFAFB,0xF0CD,0xFB01,
0xF0CB,0xFB07,0xF0C9,0xFB0D,
0xF0C7,0xFB13,0xF0C5,0xFB19,
0xF0C3,0xFB1F,0xF0C1,0xFB25,
0xF0BF,0xFB2B,0xF0BD,0xFB31,
0xF0BB,0xFB37,0xF0BA,0xFB3D,
0xF0B8,0xFB43,0xF0B6,0xFB49,
0xF0B4,0xFB4F,0xF0B2,0xFB55,
0xF0B0,0xFB5B,0xF0AF,0xFB61,
0xF0AD,0xFB67,0xF0AB,0xFB6D,
0xF0A9,0xFB73,0xF0A7,0xFB79,
0xF0A6,0xFB7F,0xF0A4,0xFB85,
0xF0A2,0xFB8B,0xF0A0,0xFB91,
0xF09F,0xFB97,0xF09D,0xFB9D,
0xF09B,0xFBA3,0xF099,0xFBA9,
0xF098,0xFBAF,0xF096,0xFBB5,
0xF094,0xFBBC,0xF093,0xFBC2,
0xF091,0xFBC8,0xF08F,0xFBCE,
0xF08E,0xFBD4,0xF08C,0xFBDA,
0xF08A,0xFBE0,0xF089,0xFBE6,
0xF087,0xFBEC,0xF086,0xFBF2,
0xF084,0xFBF8,0xF083,0xFBFE,
0xF081,0xFC04,0xF07F,0xFC0A,
0xF07E,0xFC11,0xF07C,0xFC17,
0xF07B,0xFC1D,0xF079,0xFC23,
0xF078,0xFC29,0xF076,0xFC2F,
0xF075,0xFC35,0xF073,0xFC3B,
0xF072,0xFC41,0xF070,0xFC47,
0xF06F,0xFC4E,0xF06D,0xFC54,
0xF06C,0xFC5A,0xF06B,0xFC60,
0xF069,0xFC66,0xF068,0xFC6C,
0xF066,0xFC72,0xF065,0xFC78,
0xF064,0xFC7F,0xF062,0xFC85,
0xF061,0xFC8B,0xF05F,0xFC91,
0xF05E,0xFC97,0xF05D,0xFC9D,
0xF05B,0xFCA3,0xF05A,0xFCAA,
0xF059,0xFCB0,0xF058,0xFCB6,
0xF056,0xFCBC,0xF055,0xFCC2,
0xF054,0xFCC8,0xF052,0xFCCE,
0xF051,0xFCD5,0xF050,0xFCDB,
0xF04F,0xFCE1,0xF04D,0xFCE7,
0xF04C,0xFCED,0xF04B,0xFCF3,
0xF04A,0xFCFA,0xF049,0xFD00,
0xF048,0xFD06,0xF046,0xFD0C,
0xF045,0xFD12,0xF044,0xFD18,
0xF043,0xFD1F,0xF042,0xFD25,
0xF041,0xFD2B,0xF040,0xFD31,
0xF03E,0xFD37,0xF03D,0xFD3E,
0xF03C,0xFD44,0xF03B,0xFD4A,
0xF03A,0xFD50,0xF039,0xFD56,
0xF038,0xFD5D,0xF037,0xFD63,
0xF036,0xFD69,0xF035,0xFD6F,
0xF034,0xFD75,0xF033,0xFD7C,
0xF032,0xFD82,0xF031,0xFD88,
0xF030,0xFD8E,0xF02F,0xFD94,
0xF02E,0xFD9B,0xF02D,0xFDA1,
0xF02C,0xFDA7,0xF02B,0xFDAD,
0xF02B,0xFDB3,0xF02A,0xFDBA,
0xF029,0xFDC0,0xF028,0xFDC6,
0xF027,0xFDCC,0xF026,0xFDD3,
0xF025,0xFDD9,0xF024,0xFDDF,
0xF024,0xFDE5,0xF023,0xFDEB,
0xF022,0xFDF2,0xF021,0xFDF8,
0xF020,0xFDFE,0xF020,0xFE04,
0xF01F,0xFE0B,0xF01E,0xFE11,
0xF01D,0xFE17,0xF01D,0xFE1D,
0xF01C,0xFE24,0xF01B,0xFE2A,
0xF01A,0xFE30,0xF01A,0xFE36,
0xF019,0xFE3D,0xF018,0xFE43,
0xF018,0xFE49,0xF017,0xFE4F,
0xF016,0xFE56,0xF016,0xFE5C,
0xF015,0xFE62,0xF014,0xFE68,
0xF014,0xFE6F,0xF013,0xFE75,
0xF013,0xFE7B,0xF012,0xFE81,
0xF011,0xFE88,0xF011,0xFE8E,
0xF010,0xFE94,0xF010,0xFE9A,
0xF00F,0xFEA1,0xF00F,0xFEA7,
0xF00E,0xFEAD,0xF00E,0xFEB3,
0xF00D,0xFEBA,0xF00D,0xFEC0,
0xF00C,0xFEC6,0xF00C,0xFECC,
0xF00B,0xFED3,0xF00B,0xFED9,
0xF00A,0xFEDF,0xF00A,0xFEE5,
0xF009,0xFEEC,0xF009,0xFEF2,
0xF008,0xFEF8,0xF008,0xFEFF,
0xF008,0xFF05,0xF007,0xFF0B,
0xF007,0xFF11,0xF007,0xFF18,
0xF006,0xFF1E,0xF006,0xFF24,
0xF006,0xFF2A,0xF005,0xFF31,
0xF005,0xFF37,0xF005,0xFF3D,
0xF004,0xFF44,0xF004,0xFF4A,
0xF004,0xFF50,0xF004,0xFF56,
0xF003,0xFF5D,0xF003,0xFF63,
0xF003,0xFF69,0xF003,0xFF70,
0xF002,0xFF76,0xF002,0xFF7C,
0xF002,0xFF82,0xF002,0xFF89,
0xF002,0xFF8F,0xF001,0xFF95,
0xF001,0xFF9B,0xF001,0xFFA2,
0xF001,0xFFA8,0xF001,0xFFAE,
0xF001,0xFFB5,0xF001,0xFFBB,
0xF000,0xFFC1,0xF000,0xFFC7,
0xF000,0xFFCE,0xF000,0xFFD4,
0xF000,0xFFDA,0xF000,0xFFE1,
0xF000,0xFFE7,0xF000,0xFFED,
0xF000,0xFFF3,0xF000,0xFFFA,
0xF000,0x0,0xF000,0x6,
0xF000,0xD,0xF000,0x13,
0xF000,0x19,0xF000,0x1F,
0xF000,0x26,0xF000,0x2C,
0xF000,0x32,0xF000,0x39,
0xF000,0x3F,0xF001,0x45,
0xF001,0x4B,0xF001,0x52,
0xF001,0x58,0xF001,0x5E,
0xF001,0x65,0xF001,0x6B,
0xF002,0x71,0xF002,0x77,
0xF002,0x7E,0xF002,0x84,
0xF002,0x8A,0xF003,0x90,
0xF003,0x97,0xF003,0x9D,
0xF003,0xA3,0xF004,0xAA,
0xF004,0xB0,0xF004,0xB6,
0xF004,0xBC,0xF005,0xC3,
0xF005,0xC9,0xF005,0xCF,
0xF006,0xD6,0xF006,0xDC,
0xF006,0xE2,0xF007,0xE8,
0xF007,0xEF,0xF007,0xF5,
0xF008,0xFB,0xF008,0x101,
0xF008,0x108,0xF009,0x10E,
0xF009,0x114,0xF00A,0x11B,
0xF00A,0x121,0xF00B,0x127,
0xF00B,0x12D,0xF00C,0x134,
0xF00C,0x13A,0xF00D,0x140,
0xF00D,0x146,0xF00E,0x14D,
0xF00E,0x153,0xF00F,0x159,
0xF00F,0x15F,0xF010,0x166,
0xF010,0x16C,0xF011,0x172,
0xF011,0x178,0xF012,0x17F,
0xF013,0x185,0xF013,0x18B,
0xF014,0x191,0xF014,0x198,
0xF015,0x19E,0xF016,0x1A4,
0xF016,0x1AA,0xF017,0x1B1,
0xF018,0x1B7,0xF018,0x1BD,
0xF019,0x1C3,0xF01A,0x1CA,
0xF01A,0x1D0,0xF01B,0x1D6,
0xF01C,0x1DC,0xF01D,0x1E3,
0xF01D,0x1E9,0xF01E,0x1EF,
0xF01F,0x1F5,0xF020,0x1FC,
0xF020,0x202,0xF021,0x208,
0xF022,0x20E,0xF023,0x215,
0xF024,0x21B,0xF024,0x221,
0xF025,0x227,0xF026,0x22D,
0xF027,0x234,0xF028,0x23A,
0xF029,0x240,0xF02A,0x246,
0xF02B,0x24D,0xF02B,0x253,
0xF02C,0x259,0xF02D,0x25F,
0xF02E,0x265,0xF02F,0x26C,
0xF030,0x272,0xF031,0x278,
0xF032,0x27E,0xF033,0x284,
0xF034,0x28B,0xF035,0x291,
0xF036,0x297,0xF037,0x29D,
0xF038,0x2A3,0xF039,0x2AA,
0xF03A,0x2B0,0xF03B,0x2B6,
0xF03C,0x2BC,0xF03D,0x2C2,
0xF03E,0x2C9,0xF040,0x2CF,
0xF041,0x2D5,0xF042,0x2DB,
0xF043,0x2E1,0xF044,0x2E8,
0xF045,0x2EE,0xF046,0x2F4,
0xF048,0x2FA,0xF049,0x300,
0xF04A,0x306,0xF04B,0x30D,
0xF04C,0x313,0xF04D,0x319,
0xF04F,0x31F,0xF050,0x325,
0xF051,0x32B,0xF052,0x332,
0xF054,0x338,0xF055,0x33E,
0xF056,0x344,0xF058,0x34A,
0xF059,0x350,0xF05A,0x356,
0xF05B,0x35D,0xF05D,0x363,
0xF05E,0x369,0xF05F,0x36F,
0xF061,0x375,0xF062,0x37B,
0xF064,0x381,0xF065,0x388,
0xF066,0x38E,0xF068,0x394,
0xF069,0x39A,0xF06B,0x3A0,
0xF06C,0x3A6,0xF06D,0x3AC,
0xF06F,0x3B2,0xF070,0x3B9,
0xF072,0x3BF,0xF073,0x3C5,
0xF075,0x3CB,0xF076,0x3D1,
0xF078,0x3D7,0xF079,0x3DD,
0xF07B,0x3E3,0xF07C,0x3E9,
0xF07E,0x3EF,0xF07F,0x3F6,
0xF081,0x3FC,0xF083,0x402,
0xF084,0x408,0xF086,0x40E,
0xF087,0x414,0xF089,0x41A,
0xF08A,0x420,0xF08C,0x426,
0xF08E,0x42C,0xF08F,0x432,
0xF091,0x438,0xF093,0x43E,
0xF094,0x444,0xF096,0x44B,
0xF098,0x451,0xF099,0x457,
0xF09B,0x45D,0xF09D,0x463,
0xF09F,0x469,0xF0A0,0x46F,
0xF0A2,0x475,0xF0A4,0x47B,
0xF0A6,0x481,0xF0A7,0x487,
0xF0A9,0x48D,0xF0AB,0x493,
0xF0AD,0x499,0xF0AF,0x49F,
0xF0B0,0x4A5,0xF0B2,0x4AB,
0xF0B4,0x4B1,0xF0B6,0x4B7,
0xF0B8,0x4BD,0xF0BA,0x4C3,
0xF0BB,0x4C9,0xF0BD,0x4CF,
0xF0BF,0x4D5,0xF0C1,0x4DB,
0xF0C3,0x4E1,0xF0C5,0x4E7,
0xF0C7,0x4ED,0xF0C9,0x4F3,
0xF0CB,0x4F9,0xF0CD,0x4FF,
0xF0CF,0x505,0xF0D1,0x50B,
0xF0D3,0x511,0xF0D5,0x517,
0xF0D7,0x51D,0xF0D9,0x523,
0xF0DB,0x529,0xF0DD,0x52F,
0xF0DF,0x534,0xF0E1,0x53A,
0xF0E3,0x540,0xF0E5,0x546,
0xF0E7,0x54C,0xF0E9,0x552,
0xF0EB,0x558,0xF0ED,0x55E,
0xF0EF,0x564,0xF0F2,0x56A,
0xF0F4,0x570,0xF0F6,0x576,
0xF0F8,0x57C,0xF0FA,0x581,
0xF0FC,0x587,0xF0FE,0x58D,
0xF101,0x593,0xF103,0x599,
0xF105,0x59F,0xF107,0x5A5,
0xF109,0x5AB,0xF10C,0x5B1,
0xF10E,0x5B6,0xF110,0x5BC,
0xF112,0x5C2,0xF115,0x5C8,
0xF117,0x5CE,0xF119,0x5D4,
0xF11C,0x5DA,0xF11E,0x5DF,
0xF120,0x5E5,0xF123,0x5EB,
0xF125,0x5F1,0xF127,0x5F7,
0xF12A,0x5FD,0xF12C,0x602,
0xF12E,0x608,0xF131,0x60E,
0xF133,0x614,0xF135,0x61A,
0xF138,0x61F,0xF13A,0x625,
0xF13D,0x62B,0xF13F,0x631,
0xF141,0x637,0xF144,0x63C,
0xF146,0x642,0xF149,0x648,
0xF14B,0x64E,0xF14E,0x654,
0xF150,0x659,0xF153,0x65F,
0xF155,0x665,0xF158,0x66B,
0xF15A,0x670,0xF15D,0x676,
0xF15F,0x67C,0xF162,0x682,
0xF165,0x687,0xF167,0x68D,
0xF16A,0x693,0xF16C,0x699,
0xF16F,0x69E,0xF171,0x6A4,
0xF174,0x6AA,0xF177,0x6AF,
0xF179,0x6B5,0xF17C,0x6BB,
0xF17F,0x6C1,0xF181,0x6C6,
0xF184,0x6CC,0xF187,0x6D2,
0xF189,0x6D7,0xF18C,0x6DD,
0xF18F,0x6E3,0xF191,0x6E8,
0xF194,0x6EE,0xF197,0x6F4,
0xF19A,0x6F9,0xF19C,0x6FF,
0xF19F,0x705,0xF1A2,0x70A,
0xF1A5,0x710,0xF1A7,0x715,
0xF1AA,0x71B,0xF1AD,0x721,
0xF1B0,0x726,0xF1B3,0x72C,
0xF1B5,0x732,0xF1B8,0x737,
0xF1BB,0x73D,0xF1BE,0x742,
0xF1C1,0x748,0xF1C4,0x74E,
0xF1C6,0x753,0xF1C9,0x759,
0xF1CC,0x75E,0xF1CF,0x764,
0xF1D2,0x76A,0xF1D5,0x76F,
0xF1D8,0x775,0xF1DB,0x77A,
0xF1DE,0x780,0xF1E1,0x785,
0xF1E4,0x78B,0xF1E7,0x790,
0xF1EA,0x796,0xF1ED,0x79B,
0xF1F0,0x7A1,0xF1F3,0x7A6,
0xF1F6,0x7AC,0xF1F9,0x7B2,
0xF1FC,0x7B7,0xF1FF,0x7BD,
0xF202,0x7C2,0xF205,0x7C8,
0xF208,0x7CD,0xF20B,0x7D2,
0xF20E,0x7D8,0xF211,0x7DD,
0xF214,0x7E3,0xF217,0x7E8,
0xF21A,0x7EE,0xF21D,0x7F3,
0xF221,0x7F9,0xF224,0x7FE,
0xF227,0x804,0xF22A,0x809,
0xF22D,0x80E,0xF230,0x814,
0xF234,0x819,0xF237,0x81F,
0xF23A,0x824,0xF23D,0x82A,
0xF240,0x82F,0xF244,0x834,
0xF247,0x83A,0xF24A,0x83F,
0xF24D,0x845,0xF250,0x84A,
0xF254,0x84F,0xF257,0x855,
0xF25A,0x85A,0xF25E,0x85F,
0xF261,0x865,0xF264,0x86A,
0xF267,0x86F,0xF26B,0x875,
0xF26E,0x87A,0xF271,0x87F,
0xF275,0x885,0xF278,0x88A,
0xF27B,0x88F,0xF27F,0x895,
0xF282,0x89A,0xF286,0x89F,
0xF289,0x8A5,0xF28C,0x8AA,
0xF290,0x8AF,0xF293,0x8B4,
0xF297,0x8BA,0xF29A,0x8BF,
0xF29E,0x8C4,0xF2A1,0x8C9,
0xF2A4,0x8CF,0xF2A8,0x8D4,
0xF2AB,0x8D9,0xF2AF,0x8DE,
0xF2B2,0x8E4,0xF2B6,0x8E9,
0xF2B9,0x8EE,0xF2BD,0x8F3,
0xF2C0,0x8F8,0xF2C4,0x8FE,
0xF2C7,0x903,0xF2CB,0x908,
0xF2CE,0x90D,0xF2D2,0x912,
0xF2D6,0x918,0xF2D9,0x91D,
0xF2DD,0x922,0xF2E0,0x927,
0xF2E4,0x92C,0xF2E8,0x931,
0xF2EB,0x937,0xF2EF,0x93C,
0xF2F2,0x941,0xF2F6,0x946,
0xF2FA,0x94B,0xF2FD,0x950,
0xF301,0x955,0xF305,0x95A,
0xF308,0x95F,0xF30C,0x965,
0xF310,0x96A,0xF313,0x96F,
0xF317,0x974,0xF31B,0x979,
0xF31F,0x97E,0xF322,0x983,
0xF326,0x988,0xF32A,0x98D,
0xF32E,0x992,0xF331,0x997,
0xF335,0x99C,0xF339,0x9A1,
0xF33D,0x9A6,0xF340,0x9AB,
0xF344,0x9B0,0xF348,0x9B5,
0xF34C,0x9BA,0xF350,0x9BF,
0xF354,0x9C4,0xF357,0x9C9,
0xF35B,0x9CE,0xF35F,0x9D3,
0xF363,0x9D8,0xF367,0x9DD,
0xF36B,0x9E2,0xF36F,0x9E7,
0xF372,0x9EC,0xF376,0x9F1,
0xF37A,0x9F6,0xF37E,0x9FB,
0xF382,0x9FF,0xF386,0xA04,
0xF38A,0xA09,0xF38E,0xA0E,
0xF392,0xA13,0xF396,0xA18,
0xF39A,0xA1D,0xF39E,0xA22,
0xF3A2,0xA26,0xF3A6,0xA2B,
0xF3AA,0xA30,0xF3AE,0xA35,
0xF3B2,0xA3A,0xF3B6,0xA3F,
0xF3BA,0xA44,0xF3BE,0xA48,
0xF3C2,0xA4D,0xF3C6,0xA52,
0xF3CA,0xA57,0xF3CE,0xA5C,
0xF3D2,0xA60,0xF3D6,0xA65,
0xF3DA,0xA6A,0xF3DE,0xA6F,
0xF3E2,0xA73,0xF3E7,0xA78,
0xF3EB,0xA7D,0xF3EF,0xA82,
0xF3F3,0xA86,0xF3F7,0xA8B,
0xF3FB,0xA90,0xF3FF,0xA95,
0xF404,0xA99,0xF408,0xA9E,
0xF40C,0xAA3,0xF410,0xAA7,
0xF414,0xAAC,0xF418,0xAB1,
0xF41D,0xAB5,0xF421,0xABA,
0xF425,0xABF,0xF429,0xAC3,
0xF42E,0xAC8,0xF432,0xACD,
0xF436,0xAD1,0xF43A,0xAD6,
0xF43F,0xADB,0xF443,0xADF,
0xF447,0xAE4,0xF44B,0xAE8,
0xF450,0xAED,0xF454,0xAF2,
0xF458,0xAF6,0xF45D,0xAFB,
0xF461,0xAFF,0xF465,0xB04,
0xF469,0xB08,0xF46E,0xB0D,
0xF472,0xB11,0xF477,0xB16,
0xF47B,0xB1B,0xF47F,0xB1F,
0xF484,0xB24,0xF488,0xB28,
0xF48C,0xB2D,0xF491,0xB31,
0xF495,0xB36,0xF49A,0xB3A,
0xF49E,0xB3E,0xF4A2,0xB43,
0xF4A7,0xB47,0xF4AB,0xB4C,
0xF4B0,0xB50,0xF4B4,0xB55,
0xF4B9,0xB59,0xF4BD,0xB5E,
0xF4C2,0xB62,0xF4C6,0xB66,
0xF4CA,0xB6B,0xF4CF,0xB6F,
0xF4D3,0xB74,0xF4D8,0xB78,
0xF4DC,0xB7C,0xF4E1,0xB81,
0xF4E5,0xB85,0xF4EA,0xB89,
0xF4EF,0xB8E,0xF4F3,0xB92,
0xF4F8,0xB97,0xF4FC,0xB9B,
0xF501,0xB9F,0xF505,0xBA3,
0xF50A,0xBA8,0xF50E,0xBAC,
0xF513,0xBB0,0xF518,0xBB5,
0xF51C,0xBB9,0xF521,0xBBD,
0xF525,0xBC1,0xF52A,0xBC6,
0xF52F,0xBCA,0xF533,0xBCE,
0xF538,0xBD2,0xF53D,0xBD7,
0xF541,0xBDB,0xF546,0xBDF,
0xF54B,0xBE3,0xF54F,0xBE8,
0xF554,0xBEC,0xF559,0xBF0,
0xF55D,0xBF4,0xF562,0xBF8,
0xF567,0xBFC,0xF56B,0xC01,
0xF570,0xC05,0xF575,0xC09,
0xF57A,0xC0D,0xF57E,0xC11,
0xF583,0xC15,0xF588,0xC19,
0xF58D,0xC1E,0xF591,0xC22,
0xF596,0xC26,0xF59B,0xC2A,
0xF5A0,0xC2E,0xF5A4,0xC32,
0xF5A9,0xC36,0xF5AE,0xC3A,
0xF5B3,0xC3E,0xF5B8,0xC42,
0xF5BC,0xC46,0xF5C1,0xC4A,
0xF5C6,0xC4E,0xF5CB,0xC52,
0xF5D0,0xC56,0xF5D5,0xC5A,
0xF5DA,0xC5E,0xF5DE,0xC62,
0xF5E3,0xC66,0xF5E8,0xC6A,
0xF5ED,0xC6E,0xF5F2,0xC72,
0xF5F7,0xC76,0xF5FC,0xC7A,
0xF601,0xC7E,0xF605,0xC82,
0xF60A,0xC86,0xF60F,0xC8A,
0xF614,0xC8E,0xF619,0xC91,
0xF61E,0xC95,0xF623,0xC99,
0xF628,0xC9D,0xF62D,0xCA1,
0xF632,0xCA5,0xF637,0xCA9,
0xF63C,0xCAC,0xF641,0xCB0,
0xF646,0xCB4,0xF64B,0xCB8,
0xF650,0xCBC,0xF655,0xCC0,
0xF65A,0xCC3,0xF65F,0xCC7,
0xF664,0xCCB,0xF669,0xCCF,
0xF66E,0xCD2,0xF673,0xCD6,
0xF678,0xCDA,0xF67D,0xCDE,
0xF682,0xCE1,0xF687,0xCE5,
0xF68C,0xCE9,0xF691,0xCED,
0xF696,0xCF0,0xF69B,0xCF4,
0xF6A1,0xCF8,0xF6A6,0xCFB,
0xF6AB,0xCFF,0xF6B0,0xD03,
0xF6B5,0xD06,0xF6BA,0xD0A,
0xF6BF,0xD0E,0xF6C4,0xD11,
0xF6C9,0xD15,0xF6CF,0xD18,
0xF6D4,0xD1C,0xF6D9,0xD20,
0xF6DE,0xD23,0xF6E3,0xD27,
0xF6E8,0xD2A,0xF6EE,0xD2E,
0xF6F3,0xD32,0xF6F8,0xD35,
0xF6FD,0xD39,0xF702,0xD3C,
0xF708,0xD40,0xF70D,0xD43,
0xF712,0xD47,0xF717,0xD4A,
0xF71C,0xD4E,0xF722,0xD51,
0xF727,0xD55,0xF72C,0xD58,
0xF731,0xD5C,0xF737,0xD5F,
0xF73C,0xD62,0xF741,0xD66,
0xF746,0xD69,0xF74C,0xD6D,
0xF751,0xD70,0xF756,0xD74,
0xF75B,0xD77,0xF761,0xD7A,
0xF766,0xD7E,0xF76B,0xD81,
0xF771,0xD85,0xF776,0xD88,
0xF77B,0xD8B,0xF781,0xD8F,
0xF786,0xD92,0xF78B,0xD95,
0xF791,0xD99,0xF796,0xD9C,
0xF79B,0xD9F,0xF7A1,0xDA2,
0xF7A6,0xDA6,0xF7AB,0xDA9,
0xF7B1,0xDAC,0xF7B6,0xDB0,
0xF7BB,0xDB3,0xF7C1,0xDB6,
0xF7C6,0xDB9,0xF7CC,0xDBC,
0xF7D1,0xDC0,0xF7D6,0xDC3,
0xF7DC,0xDC6,0xF7E1,0xDC9,
0xF7E7,0xDCC,0xF7EC,0xDD0,
0xF7F2,0xDD3,0xF7F7,0xDD6,
0xF7FC,0xDD9,0xF802,0xDDC,
0xF807,0xDDF,0xF80D,0xDE3,
0xF812,0xDE6,0xF818,0xDE9,
0xF81D,0xDEC,0xF823,0xDEF,
0xF828,0xDF2,0xF82E,0xDF5,
0xF833,0xDF8,0xF838,0xDFB,
0xF83E,0xDFE,0xF843,0xE01,
0xF849,0xE04,0xF84E,0xE07,
0xF854,0xE0A,0xF85A,0xE0D,
0xF85F,0xE10,0xF865,0xE13,
0xF86A,0xE16,0xF870,0xE19,
0xF875,0xE1C,0xF87B,0xE1F,
0xF880,0xE22,0xF886,0xE25,
0xF88B,0xE28,0xF891,0xE2B,
0xF896,0xE2E,0xF89C,0xE31,
0xF8A2,0xE34,0xF8A7,0xE37,
0xF8AD,0xE3A,0xF8B2,0xE3C,
0xF8B8,0xE3F,0xF8BE,0xE42,
0xF8C3,0xE45,0xF8C9,0xE48,
0xF8CE,0xE4B,0xF8D4,0xE4D,
0xF8DA,0xE50,0xF8DF,0xE53,
0xF8E5,0xE56,0xF8EB,0xE59,
0xF8F0,0xE5B,0xF8F6,0xE5E,
0xF8FB,0xE61,0xF901,0xE64,
0xF907,0xE66,0xF90C,0xE69,
0xF912,0xE6C,0xF918,0xE6F,
0xF91D,0xE71,0xF923,0xE74,
0xF929,0xE77,0xF92E,0xE79,
0xF934,0xE7C,0xF93A,0xE7F,
0xF93F,0xE81,0xF945,0xE84,
0xF94B,0xE87,0xF951,0xE89,
0xF956,0xE8C,0xF95C,0xE8F,
0xF962,0xE91,0xF967,0xE94,
0xF96D,0xE96,0xF973,0xE99,
0xF979,0xE9B,0xF97E,0xE9E,
0xF984,0xEA1,0xF98A,0xEA3,
0xF990,0xEA6,0xF995,0xEA8,
0xF99B,0xEAB,0xF9A1,0xEAD,
0xF9A7,0xEB0,0xF9AC,0xEB2,
0xF9B2,0xEB5,0xF9B8,0xEB7,
0xF9BE,0xEBA,0xF9C4,0xEBC,
0xF9C9,0xEBF,0xF9CF,0xEC1,
0xF9D5,0xEC3,0xF9DB,0xEC6,
0xF9E1,0xEC8,0xF9E6,0xECB,
0xF9EC,0xECD,0xF9F2,0xECF,
0xF9F8,0xED2,0xF9FE,0xED4,
0xFA03,0xED6,0xFA09,0xED9,
0xFA0F,0xEDB,0xFA15,0xEDD,
0xFA1B,0xEE0,0xFA21,0xEE2,
0xFA26,0xEE4,0xFA2C,0xEE7,
0xFA32,0xEE9,0xFA38,0xEEB,
0xFA3E,0xEEE,0xFA44,0xEF0,
0xFA4A,0xEF2,0xFA4F,0xEF4,
0xFA55,0xEF7,0xFA5B,0xEF9,
0xFA61,0xEFB,0xFA67,0xEFD,
0xFA6D,0xEFF,0xFA73,0xF02,
0xFA79,0xF04,0xFA7F,0xF06,
0xFA84,0xF08,0xFA8A,0xF0A,
0xFA90,0xF0C,0xFA96,0xF0E,
0xFA9C,0xF11,0xFAA2,0xF13,
0xFAA8,0xF15,0xFAAE,0xF17,
0xFAB4,0xF19,0xFABA,0xF1B,
0xFAC0,0xF1D,0xFAC6,0xF1F,
0xFACC,0xF21,0xFAD1,0xF23,
0xFAD7,0xF25,0xFADD,0xF27,
0xFAE3,0xF29,0xFAE9,0xF2B,
0xFAEF,0xF2D,0xFAF5,0xF2F,
0xFAFB,0xF31,0xFB01,0xF33,
0xFB07,0xF35,0xFB0D,0xF37,
0xFB13,0xF39,0xFB19,0xF3B,
0xFB1F,0xF3D,0xFB25,0xF3F,
0xFB2B,0xF41,0xFB31,0xF43,
0xFB37,0xF45,0xFB3D,0xF46,
0xFB43,0xF48,0xFB49,0xF4A,
0xFB4F,0xF4C,0xFB55,0xF4E,
0xFB5B,0xF50,0xFB61,0xF51,
0xFB67,0xF53,0xFB6D,0xF55,
0xFB73,0xF57,0xFB79,0xF59,
0xFB7F,0xF5A,0xFB85,0xF5C,
0xFB8B,0xF5E,0xFB91,0xF60,
0xFB97,0xF61,0xFB9D,0xF63,
0xFBA3,0xF65,0xFBA9,0xF67,
0xFBAF,0xF68,0xFBB5,0xF6A,
0xFBBC,0xF6C,0xFBC2,0xF6D,
0xFBC8,0xF6F,0xFBCE,0xF71,
0xFBD4,0xF72,0xFBDA,0xF74,
0xFBE0,0xF76,0xFBE6,0xF77,
0xFBEC,0xF79,0xFBF2,0xF7A,
0xFBF8,0xF7C,0xFBFE,0xF7D,
0xFC04,0xF7F,0xFC0A,0xF81,
0xFC11,0xF82,0xFC17,0xF84,
0xFC1D,0xF85,0xFC23,0xF87,
0xFC29,0xF88,0xFC2F,0xF8A,
0xFC35,0xF8B,0xFC3B,0xF8D,
0xFC41,0xF8E,0xFC47,0xF90,
0xFC4E,0xF91,0xFC54,0xF93,
0xFC5A,0xF94,0xFC60,0xF95,
0xFC66,0xF97,0xFC6C,0xF98,
0xFC72,0xF9A,0xFC78,0xF9B,
0xFC7F,0xF9C,0xFC85,0xF9E,
0xFC8B,0xF9F,0xFC91,0xFA1,
0xFC97,0xFA2,0xFC9D,0xFA3,
0xFCA3,0xFA5,0xFCAA,0xFA6,
0xFCB0,0xFA7,0xFCB6,0xFA8,
0xFCBC,0xFAA,0xFCC2,0xFAB,
0xFCC8,0xFAC,0xFCCE,0xFAE,
0xFCD5,0xFAF,0xFCDB,0xFB0,
0xFCE1,0xFB1,0xFCE7,0xFB3,
0xFCED,0xFB4,0xFCF3,0xFB5,
0xFCFA,0xFB6,0xFD00,0xFB7,
0xFD06,0xFB8,0xFD0C,0xFBA,
0xFD12,0xFBB,0xFD18,0xFBC,
0xFD1F,0xFBD,0xFD25,0xFBE,
0xFD2B,0xFBF,0xFD31,0xFC0,
0xFD37,0xFC2,0xFD3E,0xFC3,
0xFD44,0xFC4,0xFD4A,0xFC5,
0xFD50,0xFC6,0xFD56,0xFC7,
0xFD5D,0xFC8,0xFD63,0xFC9,
0xFD69,0xFCA,0xFD6F,0xFCB,
0xFD75,0xFCC,0xFD7C,0xFCD,
0xFD82,0xFCE,0xFD88,0xFCF,
0xFD8E,0xFD0,0xFD94,0xFD1,
0xFD9B,0xFD2,0xFDA1,0xFD3,
0xFDA7,0xFD4,0xFDAD,0xFD5,
0xFDB3,0xFD5,0xFDBA,0xFD6,
0xFDC0,0xFD7,0xFDC6,0xFD8,
0xFDCC,0xFD9,0xFDD3,0xFDA,
0xFDD9,0xFDB,0xFDDF,0xFDC,
0xFDE5,0xFDC,0xFDEB,0xFDD,
0xFDF2,0xFDE,0xFDF8,0xFDF,
0xFDFE,0xFE0,0xFE04,0xFE0,
0xFE0B,0xFE1,0xFE11,0xFE2,
0xFE17,0xFE3,0xFE1D,0xFE3,
0xFE24,0xFE4,0xFE2A,0xFE5,
0xFE30,0xFE6,0xFE36,0xFE6,
0xFE3D,0xFE7,0xFE43,0xFE8,
0xFE49,0xFE8,0xFE4F,0xFE9,
0xFE56,0xFEA,0xFE5C,0xFEA,
0xFE62,0xFEB,0xFE68,0xFEC,
0xFE6F,0xFEC,0xFE75,0xFED,
0xFE7B,0xFED,0xFE81,0xFEE,
0xFE88,0xFEF,0xFE8E,0xFEF,
0xFE94,0xFF0,0xFE9A,0xFF0,
0xFEA1,0xFF1,0xFEA7,0xFF1,
0xFEAD,0xFF2,0xFEB3,0xFF2,
0xFEBA,0xFF3,0xFEC0,0xFF3,
0xFEC6,0xFF4,0xFECC,0xFF4,
0xFED3,0xFF5,0xFED9,0xFF5,
0xFEDF,0xFF6,0xFEE5,0xFF6,
0xFEEC,0xFF7,0xFEF2,0xFF7,
0xFEF8,0xFF8,0xFEFF,0xFF8,
0xFF05,0xFF8,0xFF0B,0xFF9,
0xFF11,0xFF9,0xFF18,0xFF9,
0xFF1E,0xFFA,0xFF24,0xFFA,
0xFF2A,0xFFA,0xFF31,0xFFB,
0xFF37,0xFFB,0xFF3D,0xFFB,
0xFF44,0xFFC,0xFF4A,0xFFC,
0xFF50,0xFFC,0xFF56,0xFFC,
0xFF5D,0xFFD,0xFF63,0xFFD,
0xFF69,0xFFD,0xFF70,0xFFD,
0xFF76,0xFFE,0xFF7C,0xFFE,
0xFF82,0xFFE,0xFF89,0xFFE,
0xFF8F,0xFFE,0xFF95,0xFFF,
0xFF9B,0xFFF,0xFFA2,0xFFF,
0xFFA8,0xFFF,0xFFAE,0xFFF,
0xFFB5,0xFFF,0xFFBB,0xFFF,
0xFFC1,0x1000,0xFFC7,0x1000,
0xFFCE,0x1000,0xFFD4,0x1000,
0xFFDA,0x1000,0xFFE1,0x1000,
0xFFE7,0x1000,0xFFED,0x1000,
0xFFF3,0x1000,0xFFFA,0x1000,

};

int getAngleSin(u32 param_1)
{
    return (int)rcossin_tbl[(param_1 & 0xfff) * 2 + 1];
}

int getAngleCos(u32 param_1)
{
    return (int)rcossin_tbl[(param_1 & 0xfff) * 2];
}

void fieldModelRelocation(std::vector<u8>::iterator& pModelData)
{
    MissingCode();
}

s32 fieldChangePrevented = -1;
s32 fieldChangePrevented2 = -1;
s32 fieldTransitionMode = 0;

void resetFieldDefault()
{
    MissingCode();

    fieldTransitionMode = 2;

    MissingCode();

    entityMoveSpeedFactor = 0x1000;

    MissingCode();

    fieldChangePrevented = -1;

    MissingCode();
}

void uploadFieldImages(std::vector<u8>::iterator& pImageData)
{
    MissingCode();
}

struct RECT
{
    s16 x;
    s16 y;
    s16 w;
    s16 h;
};

RECT* currentNpcSpriteUploadRect = nullptr;
std::vector<u8>::iterator currentNpcSpriteUploadDataPtr;

void transfertNpcSpriteSheetElement()
{
    MissingCode();
}

void uploadNpcSpriteSheet(std::vector<u8>::iterator& pImageData, int x, int y)
{
    int count = READ_LE_U32(pImageData);

    int xOffset = 0;

    for (int i=0; i<count; i++)
    {
        int offset = READ_LE_U32(pImageData + 4 + i * 4);
        std::vector<u8>::iterator data = pImageData + offset;

        RECT rect;
        rect.x = x + xOffset;
        rect.y = y;
        rect.w = READ_LE_U16(data);
        rect.h = READ_LE_U16(data + 2);

        xOffset += 0x40;

        currentNpcSpriteUploadDataPtr = data + 4;
        currentNpcSpriteUploadRect = &rect;

        transfertNpcSpriteSheetElement();
    }

    MissingCode();
}

void setupField3d(std::vector<u8>::iterator input)
{
    MissingCode();
}


long NCLIP(sFP1616 sxy0, sFP1616 sxy1, sFP1616 sxy2)
{
    s16 SX0;
    s16 SY0;
    s16 SX1;
    s16 SY1;
    s16 SX2;
    s16 SY2;

    sxy0.get(SY0, SX0);
    sxy1.get(SY1, SX1);
    sxy2.get(SY2, SX2);

    return ((int64_t)(SX0 * SY1) + (SX1 * SY2) + (SX2 * SY0) - (SX0 * SY2) - (SX1 * SY0) - (SX2 * SY1));
}

void OuterProduct12(VECTOR* a, VECTOR* b, VECTOR* r)
{
    r->vx = a->vy * b->vz - a->vz * b->vy;
    r->vy = a->vz * b->vx - a->vx * b->vz;
    r->vz = a->vx * b->vy - a->vy * b->vx;
}

void toFloat(VECTOR* v0, std::array<float, 3>& output)
{
    output[0] = v0->vx / (float)0x10000;
    output[1] = v0->vy / (float)0x10000;
    output[2] = v0->vz / (float)0x10000;
}

void fromFloat(VECTOR* v0, std::array<float, 3>& asFloat)
{
    v0->vx = asFloat[0] * (float)0x10000;
    v0->vy = asFloat[1] * (float)0x10000;
    v0->vz = asFloat[2] * (float)0x10000;
}

int VectorNormal(VECTOR* v0, VECTOR* v1)
{
    std::array<float, 3> fb0;

    toFloat(v0, fb0);

    float sum = (fb0[0] * fb0[0]) + (fb0[1] * fb0[1]) + (fb0[2] * fb0[2]);
    float lenght = sqrtf(sum);

    fb0[0] /= lenght;
    fb0[1] /= lenght;
    fb0[2] /= lenght;

    fromFloat(v1, fb0);

    return (v0->vx * v0->vx) + (v0->vy * v0->vy) + (v0->vz * v0->vz);
}

void projectPositionOnTriangle(const SVECTOR& vec0, const SVECTOR& vec1, const SVECTOR& vec2, SVECTOR* outputPosition, VECTOR* inputPosition)
{
    VECTOR sStack72;
    VECTOR sStack56;
    VECTOR local_28;

    local_28.vx = vec1.vx - vec0.vx;
    local_28.vy = vec1.vy - vec0.vy;
    local_28.vz = vec1.vz - vec0.vz;
    VectorNormal(&local_28, &sStack72);

    local_28.vx = vec2.vx - vec0.vx;
    local_28.vy = vec2.vy - vec0.vy;
    local_28.vz = vec2.vz - vec0.vz;
    VectorNormal(&local_28, &sStack56);
    OuterProduct12(&sStack72, &sStack56, inputPosition);
    if (inputPosition->vy == 0) {
        outputPosition->vy = 0;
    }
    else {
        outputPosition->vy = vec0.vy + (short)((-(inputPosition->vz * (outputPosition->vz - vec0.vz)) - inputPosition->vx * (outputPosition->vx - vec0.vx)) / inputPosition->vy);
    }
}

s16 findTriangleInWalkMesh(int posX, int posZ, int walkmeshId, SVECTOR* param_4, VECTOR* param_5)
{
    SVECTOR resultPosition;

    resultPosition.vx = (short)posX;
    resultPosition.vy = 0;
    resultPosition.vz = (short)posZ;

    std::vector<sWalkMesh::sTriangleData>::iterator pTriangle = walkMeshTriangle[walkmeshId]->begin();
    std::vector<SVECTOR>::iterator pVertices = walkMeshVertices[walkmeshId]->begin();

    sFP1616 refPos;
    refPos.set(posX, posZ);

    for (int i = 0; i < walkMeshNumTrianglePerBlock[walkmeshId]; i++)
    {
        sFP1616 pos0;
        sFP1616 pos1;
        sFP1616 pos2;

        pos0.set(pVertices[pTriangle->m0_verticeIndex[0]].vx, pVertices[pTriangle->m0_verticeIndex[0]].vz);
        pos1.set(pVertices[pTriangle->m0_verticeIndex[1]].vx, pVertices[pTriangle->m0_verticeIndex[1]].vz);
        pos2.set(pVertices[pTriangle->m0_verticeIndex[2]].vx, pVertices[pTriangle->m0_verticeIndex[2]].vz);

        if ((NCLIP(pos0, pos1, refPos) > -1) && (NCLIP(pos1, pos2, refPos) > -1) && (NCLIP(pos2, pos0, refPos) > -1))
        {
            SVECTOR vec0 = pVertices[pTriangle->m0_verticeIndex[0]];
            SVECTOR vec1 = pVertices[pTriangle->m0_verticeIndex[1]];
            SVECTOR vec2 = pVertices[pTriangle->m0_verticeIndex[2]];

            projectPositionOnTriangle(vec0, vec1, vec2, &resultPosition, param_5);
            param_4->vx = resultPosition.vx;
            param_4->vy = resultPosition.vy;
            param_4->vz = resultPosition.vz;

            return i;
        }

        pTriangle++;
    }

    param_4->vx = 0;
    param_4->vy = 0;
    param_4->vz = 0;

    param_5->vx = 0;
    param_5->vy = 0;
    param_5->vz = 0;
    return 0;
}

int getWalkmeshTriangleFlag(sFieldScriptEntity* param_1)
{
    if ((param_1->m4_flags >> (param_1->m10_walkmeshId + 3U & 0x1f) & 1) == 0) {
        int triangleId = param_1->m8_currentWalkMeshTriangle[param_1->m10_walkmeshId];
        int materialId = (*walkMeshTriangle[param_1->m10_walkmeshId])[triangleId].mC_indexInWalkmeshData1;
        return (*walkMeshVar1)[materialId];
    }
    return 0;
}

void initFieldScriptEntityValues(int index)
{
    sFieldScriptEntity* pFieldScriptEntity = fieldEntityArray[index].m4C_scriptEntity;

    pFieldScriptEntity->m0_flags = 0xB0;
    pFieldScriptEntity->m4_flags = 0x800;
    pFieldScriptEntity->m18[0] = 0x10;
    pFieldScriptEntity->m18[2] = 0x10;
    pFieldScriptEntity->m18[1] = 0x60;
    pFieldScriptEntity->m74 = -1;

    pFieldScriptEntity->m40.vx = 0;
    pFieldScriptEntity->m40.vy = 0;
    pFieldScriptEntity->m40.vz = 0;

    pFieldScriptEntity->m30_stepVector.vx = 0;
    pFieldScriptEntity->m30_stepVector.vy = 0;
    pFieldScriptEntity->m30_stepVector.vz = 0;

    pFieldScriptEntity->m60[2] = 0;
    pFieldScriptEntity->m60[0] = 0;
    pFieldScriptEntity->m60[1] = 0;

    pFieldScriptEntity->mD0_targetPositionOffset[0] = 0;
    pFieldScriptEntity->mD0_targetPositionOffset[1] = 0;
    pFieldScriptEntity->mD0_targetPositionOffset[2] = 0;
    pFieldScriptEntity->mE6 = 0;
    pFieldScriptEntity->mEA_currentAnimationPlaying = 0xff;

    pFieldScriptEntity->mE2 = 0;
    pFieldScriptEntity->mCC_scriptPC = 0;
    pFieldScriptEntity->m6E = 0;
    pFieldScriptEntity->m12C_flags &= 0xffffffdf;
    pFieldScriptEntity->m11E = 0x200;
    pFieldScriptEntity->m18[3] = pFieldScriptEntity->m18[0];
    pFieldScriptEntity->m12C_flags &= 0xfffffffc;
    pFieldScriptEntity->mFC[5] = 0x80;
    pFieldScriptEntity->mFC[4] = 0x80;
    pFieldScriptEntity->mFC[3] = 0x80;
    pFieldScriptEntity->mFC[2] = 0x80;
    pFieldScriptEntity->mFC[1] = 0x80;
    pFieldScriptEntity->mFC[0] = 0x80;
    pFieldScriptEntity->m128 = -1;
    pFieldScriptEntity->m12C_flags &= 0xfffcffff;
    pFieldScriptEntity->m130.m0 = 0;
    pFieldScriptEntity->m12C_flags &= 0xf003ffff;

    for (int i=0; i<8; i++)
    {
        pFieldScriptEntity->m8C_scriptSlots[i].m2_delay = 0;
        pFieldScriptEntity->m8C_scriptSlots[i].m0_scriptPC = -1;
        pFieldScriptEntity->m8C_scriptSlots[i].m4_flags.m16 = 0;
        pFieldScriptEntity->m8C_scriptSlots[i].m4_flags.m18 = 0xF;
        pFieldScriptEntity->m8C_scriptSlots[i].m4_flags.m22 = 0;
        pFieldScriptEntity->m8C_scriptSlots[i].m4_flags.m23_walkMode = 0;
        pFieldScriptEntity->m8C_scriptSlots[i].m4_flags.m0 = -1;
    }

    delete pFieldScriptEntity->m120_special2dAnimation;
    pFieldScriptEntity->m120_special2dAnimation = nullptr;
    pFieldScriptEntity->m120_special2dAnimationRaw.clear();
    pFieldScriptEntity->mE4_playableCharacterId = 0xFF;
    pFieldScriptEntity->m76 = 0x100;

    pFieldScriptEntity->m82[1] = 0;
    pFieldScriptEntity->m82[0] = 0;
    pFieldScriptEntity->m88[1] = 0;
    pFieldScriptEntity->m88[0] = 0;
    pFieldScriptEntity->m84 = 0;
    pFieldScriptEntity->mCF = 0;
    pFieldScriptEntity->mCE_currentScriptSlot = 0;
    pFieldScriptEntity->mE8 = 0;
    pFieldScriptEntity->m10_walkmeshId = 0;
    pFieldScriptEntity->mEC_elevation = 0;

    pFieldScriptEntity->m134.m7 = 0;

    pFieldScriptEntity->m12C_flags &= 0xffffe03f;

    pFieldScriptEntity->m134.m5 = 0;

    pFieldScriptEntity->m102_rotationCount = rand();

    pFieldScriptEntity->mF4_scale3d[0] = 0x1000;
    pFieldScriptEntity->mF4_scale3d[1] = 0x1000;
    pFieldScriptEntity->mF4_scale3d[2] = 0x1000;
    pFieldScriptEntity->m10D = 0xff;
    pFieldScriptEntity->m80_DialogAvatarFace = 0xff;
    pFieldScriptEntity->m106_currentRotation = -0x8000;
    pFieldScriptEntity->m104_rotation = -0x8000;
    pFieldScriptEntity->m108_rotation3 = -0x8000;
    pFieldScriptEntity->m124_special2dAnimationId = -1;
    pFieldScriptEntity->mE3 = 0;
    pFieldScriptEntity->m8_currentWalkMeshTriangle[3] = 0;
    pFieldScriptEntity->m8_currentWalkMeshTriangle[2] = 0;
    pFieldScriptEntity->m8_currentWalkMeshTriangle[1] = 0;
    pFieldScriptEntity->m8_currentWalkMeshTriangle[0] = 0;
    pFieldScriptEntity->m12C_flags &= 0xffffffe3;

    SVECTOR local_48[4];
    VECTOR local_88[4];

    for (int i = 0; i < numWalkMesh; i++)
    {
        pFieldScriptEntity->m8_currentWalkMeshTriangle[i] = findTriangleInWalkMesh(fieldEntityArray[index].mC_matrix.t[0], fieldEntityArray[index].mC_matrix.t[2], i, &local_48[i], &local_88[i]);
        if ((pFieldScriptEntity->m8_currentWalkMeshTriangle[i] != -1) && (walkMeshNumTrianglePerBlock[i] <= pFieldScriptEntity->m8_currentWalkMeshTriangle[i]))
        {
            // seems like this would be a bug
            assert(0);

            walkMeshNumTrianglePerBlock[i] = 0;
            local_88[i].vx = 0;
            local_88[i].vy = 0;
            local_88[i].vz = 0;
            local_48[i].vx = 0;
            local_48[i].vy = 0;
            local_48[i].vz = 0;
        }
    }

    pFieldScriptEntity->m14_currentTriangleFlag = getWalkmeshTriangleFlag(pFieldScriptEntity);

    pFieldScriptEntity->m50.vx = local_88[pFieldScriptEntity->m10_walkmeshId].vx;
    pFieldScriptEntity->m50.vy = local_88[pFieldScriptEntity->m10_walkmeshId].vy;
    pFieldScriptEntity->m50.vz = local_88[pFieldScriptEntity->m10_walkmeshId].vz;

    if ((fieldEntityArray[index].m58_flags & 0x80) == 0) {
        fieldEntityArray[index].mC_matrix.t[1] = local_48[pFieldScriptEntity->m10_walkmeshId].vy;
    }

    (pFieldScriptEntity->m20_position).vx = (int)fieldEntityArray[index].mC_matrix.t[0] << 0x10;
    (pFieldScriptEntity->m20_position).vy = (int)fieldEntityArray[index].mC_matrix.t[1] << 0x10;
    (pFieldScriptEntity->m20_position).vz = (int)fieldEntityArray[index].mC_matrix.t[2] << 0x10;

    pFieldScriptEntity->m72_elevation = fieldEntityArray[index].mC_matrix.t[1];
}

void initFieldScriptEntity2dSprite(sFieldEntity2dSprite* pSprite)
{
    MissingCode();
}

int numInitializedFieldScriptEntities = 0;

void initFieldScriptEntity(int index)
{
    if (index < totalActors)
    {
        numInitializedFieldScriptEntities++;
        sFieldScriptEntity* pNewFieldScriptEntity = new sFieldScriptEntity;
        fieldEntityArray[index].m4C_scriptEntity = pNewFieldScriptEntity;
        memset(pNewFieldScriptEntity, 0, sizeof(sFieldScriptEntity));
        new(pNewFieldScriptEntity) sFieldScriptEntity;

        fieldEntityArray[index].m5A = 0;

        if (fieldEntityArray[index].m58_flags & 0x2000)
        {
            pNewFieldScriptEntity->m118.resize(32);
            MissingCode();
        }

        initFieldScriptEntityValues(index);
        fieldEntityArray[index].m8_2dSprite = new sFieldEntity2dSprite;
        initFieldScriptEntity2dSprite(fieldEntityArray[index].m8_2dSprite);
    }
}

void traceModelFunctionState(int state)
{
    MissingCode();
}

void initModel1(sModelBlock& pModelBlock, std::vector<s16>& outputBuffer, std::vector<s16>::iterator& outputBufferEnd)
{
    traceModelFunctionState(0x25);

    outputBuffer.resize(pModelBlock.m34_count);
    outputBufferEnd = outputBuffer.end();
}

int fieldScriptEntityAlreadyInitialized = 0;

// 0: scenarioFlag
std::array<s16, 1024> fieldVars;

void setVar(int varIndex, s16 value)
{
    fieldVars[varIndex / 2] = value;
}

void setVarsForCurrentParty()
{
    setVar(0x3E, currentParty[0]);
    setVar(0x40, currentParty[1]);
    setVar(0x42, currentParty[2]);
}

sFieldEntity* pCurrentFieldEntity;
int fieldScriptInitVar0;
int currentScriptFinished;

u16 getScriptEntryPoint(int entityId, int scriptIndex)
{
    return READ_LE_U16(rawFieldScriptData.begin() + (entityId * 0x20 + scriptIndex) * 2 + 0x84);
}

int breakCurrentScript;
int fieldExectuteMaxCycles;

int fieldDebugDisable = 0;

void sprintf_screen(const char* format, ...)
{
    MissingCode();
}

void initModel3(int, int)
{
    MissingCode();
}

void deleteFieldEntitySub4(sFieldEntitySub4* param_1)
{
    MissingCode();
}

void initsFieldEntitySub4_B4(sFieldEntitySub4_B4* pThis)
{
    pThis->m0_rotation.vx = 0;
    pThis->m0_rotation.vy = 0;
    pThis->m0_rotation.vz = 0;
    pThis->m2C = nullptr;
}

void initFieldEntitySub4Sub2(sFieldEntitySub4* pThis)
{
    pThis->m20 = &pThis->mB4;
    initsFieldEntitySub4_B4(&pThis->mB4);
    pThis->m7C = &pThis->mF4;
    pThis->m20->m34 = &pThis->m124;
    pThis->m24 = &pThis->m110;
    pThis->m20->m38 = 0;
}

void initFieldEntitySub4Sub3(sFieldEntitySub4* param_1, int param_2)
{
    sFieldEntitySub4_B4* psVar1;

    psVar1 = param_1->m20;
    if (psVar1 != nullptr) {
        param_1->m2C_scale = param_2;
        psVar1->m6_scale.vx = param_2;
        psVar1->m6_scale.vy = param_2;
        psVar1->m6_scale.vz = param_2;
        param_1->m3C = param_1->m3C | 0x10000000;
    }
}

s8 initFieldVar1 = 0;
s32 initFieldVar2 = 0;

int initFieldEntitySub4Sub4(const sPS1Pointer& param_1)
{
    return (READ_LE_U16(param_1) >> 9) & 0x3F;
}

int initFieldVar4 = 0;
int initFieldVar5 = 0;

void initFieldEntitySub4Sub5Sub0(sFieldEntitySub4_110* param_1, sFieldActorSetupParams* param_2, sVec2_s16 param_3_vramLocation, sFP1616 param_4)

{
    u16 uVar1;
    char cVar2;
    u16* puVar3;

    param_1->m4_vramLocation = param_3_vramLocation;
    param_1->m8 = param_4;
    param_1->mC = param_2->mC_pData;
    cVar2 = initFieldVar1;
    param_1->m0 = param_2->m8_pData;
    initFieldVar4 = 0;
    param_1->m10 = param_2->m4_pData;

    if ((cVar2 != '\0') && (uVar1 = READ_LE_U16(param_2->m4_pData) >> 6, (uVar1 & 0x3f) != 0)) {
        initFieldVar5 = (u8)uVar1 & 0x3f;
    }
    return;
}

int initFieldEntitySub4Sub5Sub1(const sPS1Pointer& param_1)
{
    return READ_LE_U8(param_1 + 1) >> 7;
}

void initFieldEntitySub4Sub5(sFieldEntitySub4* param_1, sFieldActorSetupParams* param_2)
{
    sFieldEntitySub4_110* psVar2 = param_1->m24;
    if (param_2 != 0) {
        if (param_2 != param_1->m44) {
            initFieldEntitySub4Sub5Sub0(psVar2, param_2, psVar2->m4_vramLocation, psVar2->m8);
            param_1->m44 = param_2;
            param_1->m3C = param_1->m3C | 0x40000000;
        }
        if (initFieldVar1 != '\0') {
            if (initFieldEntitySub4Sub5Sub1(psVar2->m0) == 0) {
                psVar2->m4_vramLocation.vx = 0x300;
                psVar2->m4_vramLocation.vy = 0x100;
            }
            else {
                psVar2->m4_vramLocation.vx = param_1->m7C->mE_vramLocation.vx;
                psVar2->m4_vramLocation.vy = param_1->m7C->mE_vramLocation.vy;
            }
        }
    }
}

int OP_INIT_ENTITY_SCRIPT_sub0Sub6Sub1_var = 0x2000;

void createRotationMatrix(SVECTOR*, MATRIX*)
{
    MissingCode();
}

void ScaleMatrixL(MATRIX*, sVec3*)
{
    MissingCode();
}

void ScaleMatrix(MATRIX*, sVec3*)
{
    MissingCode();
}

void MulMatrix0(MATRIX* m0, MATRIX* m1, MATRIX* m2)
{
    MissingCode();
}

void OP_INIT_ENTITY_SCRIPT_sub0Sub6Sub1Sub0(sFieldEntitySub4* param_1)

{
    sVec3 local_70;
    sVec3 local_60;
    MATRIX tempMatrix2;
    MATRIX tempMatrix;

    if ((param_1->m40 & 1) == 0) {
        local_70.vx = param_1->m20->m6_scale.vx;
        local_70.vy = param_1->m20->m6_scale.vy;
        local_70.vz = param_1->m20->m6_scale.vz;
        createRotationMatrix(&param_1->m20->m0_rotation, &param_1->m20->m20);
        ScaleMatrixL(&param_1->m20->m20, &local_70);
    }
    else {
        tempMatrix.m[0][0] = 0x1000;
        tempMatrix.m[0][2] = 0;
        tempMatrix.m[1][1] = 0x1000;
        tempMatrix.m[2][0] = 0;
        tempMatrix.m[2][2] = 0x1000;
        tempMatrix.t[0] = 0;
        tempMatrix.t[1] = 0;
        tempMatrix.t[2] = 0;
        local_60.vx = (int)param_1->m20->m6_scale.vx;
        local_60.vy = (int)param_1->m20->m6_scale.vy;
        local_60.vz = (int)param_1->m20->m6_scale.vz;
        ScaleMatrixL((sMatrix*)&tempMatrix, &local_60);
        createRotationMatrix((SVECTOR*)param_1->m20, &tempMatrix2);
        MulMatrix0(&tempMatrix2, &tempMatrix, &param_1->m20->m20);
    }
    local_70.vx = (uint)((ushort)param_1->m3A >> 1);
    if (param_1->m3A != 0) {
        local_70.vy = (uint)((ushort)param_1->m3A >> 1);
        local_70.vz = (uint)((ushort)param_1->m3A >> 1);
        ScaleMatrix((MATRIX*)&param_1->m20->m20, &local_70);
    }
}

void OP_INIT_ENTITY_SCRIPT_sub0Sub6Sub1Sub1(sFieldEntitySub4* param_1)
{
    int iVar1;
    int iVar2;

    iVar1 = 0;
    do {
        (*param_1->m20->m34)[iVar1].m0 = 0;
        (*param_1->m20->m34)[iVar1].m1 = 0;
        (*param_1->m20->m34)[iVar1].m2 = 0;
        (*param_1->m20->m34)[iVar1].m4 = 0;
        (*param_1->m20->m34)[iVar1].m6 = 0;
        iVar2 = iVar1 + 1;
        iVar1 = iVar2;
    } while (iVar2 != 8);
    return;
}

int initFieldVar3 = 0;

//header is
//u16 m0: flags
//u16 m2: offset to byte code
//u16 m4: offset to?

void OP_INIT_ENTITY_SCRIPT_sub0Sub6Sub1(sFieldEntitySub4* param_1, const sPS1Pointer& param_2)
{
    uint uVar1;
    sFieldEntitySub4_B4* psVar2;
    sFieldEntitySub4_F4* psVar3;
    int iVar5;

    u16 flags = READ_LE_U16(param_2);
    u16 offsetToByteCode = READ_LE_U16(param_2 + 2);
    u16 offset2 = READ_LE_U16(param_2 + 4);

    param_1->m58 = param_2;
    param_1->m64_spriteByteCode = param_2 + offsetToByteCode + 2;
    param_1->mA8 = param_1->mA8 & 0xffcfffff | (flags & 3) << 0x14;
    param_1->m54 = param_2 + offset2 + 4;

    uVar1 = (uint)(flags >> 2) & 0x3f;
    if ((flags >> 2 & 0x20) != 0) {
        uVar1 = uVar1 | 0xffffffc0;
    }

    param_1->m1C = uVar1 * 0x400;
    int iVar4 = (initFieldVar3 + 1) * (initFieldVar3 + 1) * param_1->m82;
    if (iVar4 < 0) {
        iVar4 = iVar4 + 0xfff;
    }
    iVar4 = uVar1 * 0x400 * (iVar4 >> 0xc);
    param_1->m1C = iVar4;

    iVar5 = 0x10000 / (int)(param_1->mAC >> 7 & 0xfff);
    iVar5 = iVar5 * iVar5;
    if (iVar5 < 0) {
        iVar5 = iVar5 + 0xff;
    }
    iVar4 = iVar4 * (iVar5 >> 8);
    param_1->m1C = iVar4;
    if (iVar4 < 0) {
        iVar4 = iVar4 + 0xff;
    }
    param_1->m1C = iVar4 >> 8;


    if ((flags >> 0xb & 1) == 0) {
        param_1->mC.vz = 0;
        param_1->mC.vy = 0;
        param_1->mC.vx = 0;
        param_1->m18 = 0;
    }
    psVar2 = param_1->m20;
    if (psVar2)
    {
        if ((flags >> 0xc & 1) == 0) {
            psVar2->m0_rotation.vx = 0;
            psVar2->m0_rotation.vy = 0;
            psVar2->m0_rotation.vz = 0;
            OP_INIT_ENTITY_SCRIPT_sub0Sub6Sub1Sub0(param_1);
        }
        if ((flags >> 0xd & 1) == 0) {
            if (initFieldVar1 != '\0') {
                initFieldEntitySub4Sub3(param_1, (short)OP_INIT_ENTITY_SCRIPT_sub0Sub6Sub1_var);
                goto LAB_800236f4;
            }
        }
        else {
        LAB_800236f4:
            if (initFieldVar1 != '\0') {
                OP_INIT_ENTITY_SCRIPT_sub0Sub6Sub1Sub0(param_1);
            }
        }
        if ((param_1->m3C & 3) == 1) {
            psVar2 = param_1->m20;
            psVar2->m3D = 0;
            psVar2->m3C = 0;
            if (((param_1->m40 >> 0x14 & 1) == 0) && (param_1->m20->m34 != nullptr)) {
                OP_INIT_ENTITY_SCRIPT_sub0Sub6Sub1Sub1(param_1);
            }
        }
    }
    param_1->m8C = 0x10;
    uVar1 = param_1->mA8;
    param_1->m30 = 0;
    param_1->mA8 = uVar1 & 0xfffff801;
    param_1->m9E = 1;
    psVar3 = param_1->m7C;
    param_1->mA8 = uVar1 & 0xc03ff801 | 0x2001f800;
    if ((psVar3 != (sFieldEntitySub4_F4*)0x0) && ((uVar1 & 1) == 1)) {
        psVar3->m4 = 0;
        psVar3->m0 = 0;
        param_1->m7C->mC = 0;
    }
    return;
}

void executeSpriteBytecode(sFieldEntitySub4* param_1, sPS1Pointer param_2, uint param_3)
{
    while (true)
    {
        sPS1Pointer pbVar6 = param_1->m64_spriteByteCode;
        if ((pbVar6 == param_2) && ((param_1->mA8 >> 0x16 & 0x3f) == param_3)) {
            return;
        }
        u8 uVar7 = READ_LE_U8(pbVar6);
        if (0x7f < uVar7)
        {
            assert(0);
        }
        else
        {
            pbVar6 = pbVar6 + 1;
            assert(0);
        }
    }
}

void OP_INIT_ENTITY_SCRIPT_sub0Sub6Sub2(sFieldEntitySub4* param_1, short param_2)
{
    short sVar1;
    ushort uVar2;
    uint uVar3;
    uint uVar4;

    param_1->m80 = param_2;
    uVar3 = param_1->mA8;
    if (((int)param_2 + 0x400U & 1) == 0) {
        uVar4 = param_1->mAC & 0xfffffffb;
    }
    else {
        uVar4 = param_1->mAC | 4;
    }
    param_1->mAC = uVar4;
    if (param_1->m48 == nullptr) {
        return;
    }
    uVar4 = param_1->mA8 >> 0x14 & 3;
    switch (uVar4)
    {
    case 2:
        uVar4 = param_2 + 0x500 >> 9 & 7;
        if (uVar4 > 7)
        {
            uVar4 = uVar4 - 5 ^ 3;
            uVar2 = READ_LE_U16(param_1->m58 + uVar4 * 2 + 4);
            param_1->mAC = param_1->mAC | 4;
            param_1->m54 = param_1->m58 + (uint)uVar2 + uVar4 * 2 + 4;
        }
        else
        {
            uVar2 = READ_LE_U16(param_1->m58 + uVar4 * 2 + 4);
            param_1->mAC = param_1->mAC & 0xfffffffb;
            param_1->m54 = param_1->m58 + (uint)uVar2 + uVar4 * 2 + 4;
        }
        param_1->mA8 = param_1->mA8 & 0xfff1ffff | (uVar4 & 7) << 0x11;
        break;
    default:
        assert(0);
    }

    uVar4 = param_1->mA8;
    if ((uVar3 >> 0x11 & 7) != (uVar4 >> 0x11 & 7)) {
        sVar1 = param_1->m9E;
        uVar2 = READ_LE_U16(param_1->m58 + 2);
        sPS1Pointer puVar5 = param_1->m64_spriteByteCode;
        param_1->mA8 = param_1->mA8 & 0xf03fffff | 0x1f800;
        param_1->m64_spriteByteCode = param_1->m58 + uVar2 + 2;
        executeSpriteBytecode(param_1, puVar5, uVar4 >> 0x16 & 0x3f);
        param_1->m9E = sVar1;
    }

    param_1->m3C = param_1->m3C & 0xfffffff7 | (param_1->mAC >> 3 & 1 ^ param_1->mAC >> 2 & 1) << 3;
}

void OP_INIT_ENTITY_SCRIPT_sub0Sub6(sFieldEntitySub4* param_1, int param_2)
{
    ushort uVar1;
    uint uVar2;
    int iVar3;

    if (param_1->m48 == nullptr) {
        param_1->m64_spriteByteCode.makeNull();
    }
    else {
        if (param_1->m44 == param_1->m48) {
            uVar2 = param_1->mB0 & 0xfffffbff;
        }
        else {
            uVar2 = param_1->mB0 | 0x400;
        }
        param_1->mB0 = uVar2;
        if (param_2 < 0) {
            initFieldEntitySub4Sub5(param_1, param_1->m4C_specialAnimation);
            if ((initFieldVar1 != '\0') &&
                (iVar3 = initFieldEntitySub4Sub5Sub1(param_1->m24->m0), iVar3 == 0)) {
                param_1->m24->m4_vramLocation.vx = 0x100;
                param_1->m24->m4_vramLocation.vy = 0x300;
            }
        }
        else {
            initFieldEntitySub4Sub5(param_1, param_1->m48);
            if (initFieldVar1 != '\0') {
                param_1->m24->m4_vramLocation = param_1->m7C->mE_vramLocation;
            }
        }
        param_1->mAC = (param_1->mAC & 0xFF00FFFF) | (((char)param_2) << 16);
        if ((int)param_2 < 0) {
            param_2 = ~param_2;
        }
        
        int uVar1 = READ_LE_U16(param_1->m24->m10 + param_2 * 2 + 2);
        param_1->m40 = param_1->m40 | 0x100000;
        param_1->m58 = param_1->m24->m10 + uVar1;
        OP_INIT_ENTITY_SCRIPT_sub0Sub6Sub1(param_1, param_1->m58);
        OP_INIT_ENTITY_SCRIPT_sub0Sub6Sub2(param_1, param_1->m80);
    }
}

void initFieldEntitySub4Sub1(sFieldEntitySub4* param_1)
{
    param_1->m3C = 0;
    param_1->m2B = 0x2d;
    param_1->m40 = 0;
    param_1->m3A = 0;
    param_1->m30 = 0;
    param_1->m32 = 0;
    param_1->m34 = 0;
    param_1->mA8 = 0;
    param_1->m3C = param_1->m3C & 0xfe00ffe3;
    param_1->m40 = param_1->m40 & 0xfffe0003;
    param_1->mAC = 0;
    param_1->mB0 = 0;
    int iVar1 = (initFieldVar3 + 1) * (initFieldVar3 + 1) * 0x4000 * param_1->m82;
    param_1->mAC = param_1->mAC & 0xfff8007f | 0x8000;
    param_1->mA8 = param_1->mA8 & 0xfff1ffff;
    if (iVar1 < 0) {
        iVar1 = iVar1 + 0xfff;
    }
    param_1->m1C = iVar1 >> 0xc;
    param_1->m64_spriteByteCode.makeNull();
    param_1->m70 = 0;
    param_1->m44 = 0;
    param_1->m68 = 0;
    param_1->m80 = 0;
    param_1->m8C = 0x10;
    param_1->m84 = 0;
    param_1->m6C = (sFieldEntitySub4*)0x0;
    param_1->m50 = 0;
}

sFieldEntitySub4* initFieldEntitySub4(sFieldEntitySub4* param_1, sFieldActorSetupParams* pSetup, int param_3, int param_4, int vramX, int vramY, int param_7)
{
    initFieldEntitySub4Sub1(param_1);
    initFieldEntitySub4Sub2(param_1);
    initFieldEntitySub4Sub3(param_1, 0x10000);

    param_1->m3C = (param_1->m3C & ~0x3) | 1;
    param_1->m40 &= ~0x0001E000;

    if (initFieldVar1 == 0)
    {
        param_1->mA8 |= 1;
        param_1->m7C->m18 = 0;
    }
    else
    {
        param_1->mA8 &= ~1;
        param_1->m7C->m8 = 0;
        param_1->m7C->mC = 0;
    }

    param_1->m6C = param_1;
    param_1->m3C = param_1->m3C & 0xff00ffff | (initFieldVar2 & 0xf) << 0x14 | (initFieldVar2 & 0xf) << 0x10;;

    int count = initFieldEntitySub4Sub4(pSetup->m8_pData);
    param_1->m20->m2C = param_1->m20->m30 = new u8[count * 0x18]; // TODO: figure that

    param_1->m24->m4_vramLocation.vx = vramX;
    param_1->m24->m4_vramLocation.vy = vramY;
    param_1->m24->m8.set(param_3, param_4);

    param_1->m48 = pSetup;

    initFieldEntitySub4Sub5(param_1, pSetup);
    param_1->m60 = param_1->m24->m10 + (READ_LE_U16(param_1->m24->m10) & 0x3F) + 1;

    OP_INIT_ENTITY_SCRIPT_sub0Sub6(param_1, 0);

    return param_1;
}

sFieldEntitySub4* createFieldEntitySub4(sFieldActorSetupParams* pSetup, int param_2, int param_3, int vramX, int vramY, int param_6)
{
    sFieldEntitySub4* pNewEntry = new sFieldEntitySub4;
    pNewEntry->m86_thisSize = sizeof(sFieldEntitySub4);

    return initFieldEntitySub4(pNewEntry, pSetup, param_2, param_3, vramX, vramY, param_6);
}

int loadVramSpriteParam = 0;
sFieldEntitySub4* createFieldEntitySub4Ext(sFieldActorSetupParams* pSetup, int param_2, int param_3, int vramX, int vramY, int param_6, int param_7)
{
    loadVramSpriteParam = param_7;
    sFieldEntitySub4* pVar1 = createFieldEntitySub4(pSetup, param_2, param_3, vramX, vramY, param_6);
    loadVramSpriteParam = 0;
    return pVar1;
}

void OP_INIT_ENTITY_SCRIPT_sub0Sub4(sFieldEntitySub4* param_1, int param_2, int* param_3, int* param_4, int* param_5)
{
    byte bVar1;
    sPS1Pointer pbVar2;
    int iVar3;
    int iVar4;
    uint uVar5;

    pbVar2 = param_1->m24->m10;
    pbVar2 = pbVar2 + READ_LE_U16(pbVar2 + 2);
    bVar1 = READ_LE_U8(pbVar2 + READ_LE_U16(pbVar2 + 4) + 4);
    uVar5 = (uint)bVar1;
    pbVar2 = param_1->m24->m0;
    iVar3 = uVar5 << 1;
    if (bVar1 != 0) {
        uVar5 = uVar5 - 1;
        iVar3 = uVar5 * 2;
    }
    iVar4 = uVar5 << 1;
    if (READ_LE_U16(pbVar2 + iVar3) < (int)uVar5) {
        iVar4 = 0;
    }
    pbVar2 = pbVar2 + READ_LE_U16(pbVar2 + iVar4 + 2);
    iVar3 = READ_LE_U8(pbVar2 + 3) * param_1->m2C_scale;
    if (iVar3 < 0) {
        iVar3 = iVar3 + 0xfff;
    }
    *param_4 = iVar3 >> 0xc;
    iVar3 = READ_LE_U8(pbVar2 + 1) * param_1->m2C_scale;
    if (iVar3 < 0) {
        iVar3 = iVar3 + 0xfff;
    }
    *param_5 = iVar3 >> 0xc;
    iVar3 = READ_LE_U8(pbVar2 + 2) * param_1->m2C_scale;
    if (iVar3 < 0) {
        iVar3 = iVar3 + 0xfff;
    }
    *param_3 = iVar3 >> 0xc;
}

void OP_INIT_ENTITY_SCRIPT_sub0Sub5(sFieldEntitySub4* param1, int param2)
{
    param1->m40 = param1->m40 & 0xffffe0ff | (param2 & 0x1f) << 8;
}

void OP_INIT_ENTITY_SCRIPT_sub0Sub7Sub0(sFieldEntitySub4* param1)
{
    int iVar1;
    int iVar2;

    iVar2 = ((param1->m18 >> 4) << 8) / (int)(param1->mAC >> 7 & 0xfff);
    iVar1 = getAngleSin((int)param1->m32);
    param1->mC.vx = (iVar1 >> 2) * iVar2 >> 6;
    iVar1 = getAngleCos((int)param1->m32);
    param1->mC.vz = -((iVar1 >> 2) * iVar2) >> 6;
}

void OP_INIT_ENTITY_SCRIPT_sub0Sub7(sFieldEntitySub4* param1, int param2)
{
    param1->m32 = param2;
    OP_INIT_ENTITY_SCRIPT_sub0Sub7Sub0(param1);
}

void OP_INIT_ENTITY_SCRIPT_sub0Sub8(sFieldEntitySub4* param1, void(*callback)(sFieldEntitySub4*))
{
    param1->m68 = callback;
}

void fieldActorCallback(sFieldEntitySub4* pThis)
{
    fieldEntityArray[pThis->m7C->m14_actorId].m4C_scriptEntity->m4_flags |= 0x10000;
}

s16 isFogSetup = 0;

void OP_INIT_ENTITY_SCRIPT_sub0Sub3(sFieldEntitySub4* param_1, int param_2)

{
    sFieldEntitySub4_B4* psVar2;

    delete[] param_1->m20->m2C;
    u8* puVar1 = (u8*)malloc(param_2 * 0x18);
    psVar2 = param_1->m20;
    psVar2->m30 = puVar1;
    psVar2->m2C = puVar1;
    return;
}


void OP_INIT_ENTITY_SCRIPT_sub0(int actorId, int param_2, sFieldActorSetupParams* pSetup, int param_4, int param_5, int param_6, int param_7)
{
    initModel3(8, 0);
    fieldEntityArray[actorId].m4C_scriptEntity->m127 = param_2;
    fieldEntityArray[actorId].m4C_scriptEntity->m126 = param_6;
    fieldEntityArray[actorId].m4C_scriptEntity->m134.m0 = param_5;
    fieldEntityArray[actorId].m4C_scriptEntity->m130.m28 = param_4;
    fieldEntityArray[actorId].m4C_scriptEntity->m134.m4 = param_7;

    if (param_4 == 0)
    {
        s16 vramX = fieldVramMapping[param_2].m0_vramX;
        s16 vramY = fieldVramMapping[param_2].m2_vramY;

        if (param_5 == 0)
        {
            if (fieldEntityArray[actorId].m5A & 1)
            {
                deleteFieldEntitySub4(fieldEntityArray[actorId].m4_pVramSpriteSheet);
            }

            fieldEntityArray[actorId].m4_pVramSpriteSheet = createFieldEntitySub4(pSetup, 0x100, ((param_2 + 480) * 0x10000) >> 0x10, vramX, vramY, 0x40);
        }
        else
        {
            if ((fieldEntityArray[actorId].m5A & 1U) != 0) {
                deleteFieldEntitySub4(fieldEntityArray[actorId].m4_pVramSpriteSheet);
            }
            fieldEntityArray[actorId].m4_pVramSpriteSheet = createFieldEntitySub4Ext(pSetup, (short)((param_5 * 0x10 + 0x100) * 0x10000 >> 0x10), (short)((uint)((param_2 + 0x1e0) * 0x10000) >> 0x10), vramX, vramY, 0x40, param_5);
        }
    }
    else
    {
        int iVar4;
        short sVar5;

        if ((fieldEntityArray[actorId].m5A & 1U) != 0) {
            deleteFieldEntitySub4(fieldEntityArray[actorId].m4_pVramSpriteSheet);
        }
        if (param_4 == 1) {
            iVar4 = param_2 + 0xe0;
            sVar5 = 0x280;
        }
        else {
            iVar4 = param_2 + 0xe3;
            sVar5 = 0x2a0;
        }
        fieldEntityArray[actorId].m4_pVramSpriteSheet = createFieldEntitySub4(pSetup, 0x100, (short)((uint)(iVar4 * 0x10000) >> 0x10), sVar5, (short)param_2 * 0x40 + 0x100, 8);
        OP_INIT_ENTITY_SCRIPT_sub0Sub3(fieldEntityArray[actorId].m4_pVramSpriteSheet, 0x20);
    }

    fieldEntityArray[actorId].m5A |= 1;

    sFieldEntitySub4* pFieldEntitySub4 = fieldEntityArray[actorId].m4_pVramSpriteSheet;

    int temp0;
    int temp1;
    int temp2;
    OP_INIT_ENTITY_SCRIPT_sub0Sub4(pFieldEntitySub4, 0, &temp0, &temp1, &temp2);
    OP_INIT_ENTITY_SCRIPT_sub0Sub5(pFieldEntitySub4, 3);

    pFieldEntitySub4->m2C_scale = 0xC00;
    pFieldEntitySub4->m82 = 0x2000;

    if (!fieldScriptEntityAlreadyInitialized)
    {
        pFieldEntitySub4->m0_position.vx = fieldEntityArray[actorId].m4C_scriptEntity->m20_position.vx;
        pFieldEntitySub4->m0_position.vy = fieldEntityArray[actorId].m4C_scriptEntity->m20_position.vy;
        pFieldEntitySub4->m0_position.vz = fieldEntityArray[actorId].m4C_scriptEntity->m20_position.vz;
        pFieldEntitySub4->mC.vy = 0;
        pFieldEntitySub4->mC.vx = 0;
        pFieldEntitySub4->mC.vy = 0;
        pFieldEntitySub4->mC.vz = 0;
        pFieldEntitySub4->m1C = 0x10000;
        pFieldEntitySub4->m84 = fieldEntityArray[actorId].mC_matrix.t[1] & 0xFFFF;
        if (!param_4)
        {
            fieldEntityArray[actorId].m4C_scriptEntity->m18[1] = temp1 * 2;
        }
        else
        {
            fieldEntityArray[actorId].m4C_scriptEntity->m18[1] = 0x40;
        }
    }
    else
    {
        assert(0);
    }

    if (isFogSetup)
    {
        pFieldEntitySub4->m40 |= 0x40000;
    }

    OP_INIT_ENTITY_SCRIPT_sub0Sub6(pFieldEntitySub4, 0);
    OP_INIT_ENTITY_SCRIPT_sub0Sub7(pFieldEntitySub4, 0);
    initModel3(8, 0);

    pFieldEntitySub4->m7C->m14_actorId = actorId;
    OP_INIT_ENTITY_SCRIPT_sub0Sub8(pFieldEntitySub4, &fieldActorCallback);

    if (!param_7)
    {
        assert(0);
        MissingCode();
    }

    fieldEntityArray[actorId].mC_matrix.t[0] = fieldEntityArray[actorId].m4C_scriptEntity->m20_position.vx >> 16;
    fieldEntityArray[actorId].mC_matrix.t[1] = fieldEntityArray[actorId].m4C_scriptEntity->m20_position.vy >> 16;
    fieldEntityArray[actorId].mC_matrix.t[2] = fieldEntityArray[actorId].m4C_scriptEntity->m20_position.vz >> 16;

    fieldEntityArray[actorId].m2C_matrixBackup.t = fieldEntityArray[actorId].mC_matrix.t;

    pFieldEntitySub4->m84 = fieldEntityArray[actorId].mC_matrix.t[1] & 0xFFFF;

    pFieldEntitySub4->m0_position.vx = fieldEntityArray[actorId].m4C_scriptEntity->m20_position.vx;
    pFieldEntitySub4->m0_position.vy = fieldEntityArray[actorId].m4C_scriptEntity->m20_position.vy;
    pFieldEntitySub4->m0_position.vz = fieldEntityArray[actorId].m4C_scriptEntity->m20_position.vz;
    fieldScriptInitVar0++;
}

void OP_INIT_ENTITY_SCRIPT_sub1()
{
    fieldEntityArray[currentFieldActorId].mC_matrix.t[0] = fieldEntityArray[currentFieldActorId].m2C_matrixBackup.t[0] = pCurrentFieldScriptActor->m20_position.vx >> 16;
    fieldEntityArray[currentFieldActorId].mC_matrix.t[1] = fieldEntityArray[currentFieldActorId].m2C_matrixBackup.t[1] = pCurrentFieldScriptActor->m20_position.vy >> 16;
    fieldEntityArray[currentFieldActorId].mC_matrix.t[2] = fieldEntityArray[currentFieldActorId].m2C_matrixBackup.t[2] = pCurrentFieldScriptActor->m20_position.vz >> 16;

    fieldEntityArray[currentFieldActorId].m4_pVramSpriteSheet->m0_position.vx = pCurrentFieldScriptActor->m20_position.vx;
    fieldEntityArray[currentFieldActorId].m4_pVramSpriteSheet->m0_position.vy = pCurrentFieldScriptActor->m20_position.vy;
    fieldEntityArray[currentFieldActorId].m4_pVramSpriteSheet->m0_position.vz = pCurrentFieldScriptActor->m20_position.vz;

    fieldEntityArray[currentFieldActorId].m4_pVramSpriteSheet->mC.vy = 0;
    fieldEntityArray[currentFieldActorId].m4_pVramSpriteSheet->m84 = pCurrentFieldScriptActor->m20_position.vy >> 16;
    pCurrentFieldScriptActor->m72_elevation = pCurrentFieldScriptActor->m20_position.vy >> 16;
}

int asyncLoadingVar1 = 0xFF;
int asyncLoadingVar2 = 0;

int isAsyncLoadingProhibited()
{
    MissingCode();
    return 0;
}

int findFreePartySlot(int param_1, int* param_2)
{
    int iVar1;

    iVar1 = 0;
    while (true) {
        if (currentParty[iVar1] == param_1) {
            return -1;
        }
        if (currentParty[iVar1])
            break;
        iVar1 = iVar1 + 1;

        if (2 < iVar1) {
            return -1;
        }
    }
    *param_2 = iVar1;
    return 0;
}

int asyncPartyCharacterLoadingCharacterIndex = 0;
int asyncPartyCharacterLoadingIndex = 0;
int fieldExecuteVar1 = 0;
std::array<int, 3> asyncPartyCharacterLoadingTable;
std::vector<u8> asyncPartyCharacterLoadingBuffer;

int getGearForCharacter(int param_1)
{
    return pKernelGameState->m294[param_1].m78_partyData_gearNum;
}

void startPartyCharacterASyncLoading(int partyCharacter, int partySlot)
{
    size_t sVar1;
    void* pvVar2;
    int iVar3;
    int iVar4;

    asyncPartyCharacterLoadingCharacterIndex = partyCharacter;
    asyncPartyCharacterLoadingIndex = partySlot;
    setCurrentDirectory(4, 0);
    if (fieldExecuteVar1 == 0) {
        waitReadCompletion(0);
    }
    iVar3 = partyCharacter + 5;
    if ((fieldMapNumber & 0xc000) == 0) {
        sVar1 = getFileSizeAligned(iVar3);
        asyncPartyCharacterLoadingTable[asyncPartyCharacterLoadingIndex] = partyCharacter;

        asyncPartyCharacterLoadingBuffer.resize(sVar1);
    }
    else {
        iVar3 = getGearForCharacter(partyCharacter);
        iVar4 = iVar3 + 0x10;
        if (iVar3 == 0xff) {
            iVar4 = 0x10;
        }
        iVar3 = iVar4 + 5;
        sVar1 = getFileSizeAligned(iVar3);
        asyncPartyCharacterLoadingBuffer.resize(sVar1);
        asyncPartyCharacterLoadingTable[asyncPartyCharacterLoadingIndex] = iVar4;
    }
    readFile(iVar3, asyncPartyCharacterLoadingBuffer, 0, 0x80);
    if (fieldExecuteVar1 == 0) {
        waitReadCompletion(0);
    }
    asyncLoadingVar1 = 1;
    return;
}

std::array<std::vector<u8>, 3> partyCharacterBuffersRaw;
std::array<std::vector<u8>, 3> partyCharacterBuffersCompressed;
std::array<sFieldActorSetupParams, 3> partyCharacterBuffers;
s16 pcInitVar0 = 0;
s32 pcInitVar1 = 0;
std::array<int, 11> PCToActorArray;

const std::array<s8, 12> characterMappingTable = {
    0,1,2,3,4,5,6,7,8,2,6,0
};

s16 pcInitVar2 = 0;
std::array<int, 3> unkPartyTable;


u8 OPE7_param[3];


void setCurrentActor2DPosition(int posX, int posZ)
{
    VECTOR alStack136[4];
    SVECTOR auStack72[4];
    for (int i=0; i<numWalkMesh; i++)
    {
        pCurrentFieldScriptActor->m8_currentWalkMeshTriangle[i] = findTriangleInWalkMesh(posX, posZ, i, &auStack72[i], &alStack136[i]);
    }

    MissingCode();

    fieldEntityArray[currentFieldActorId].mC_matrix.t[0] = posX;
    fieldEntityArray[currentFieldActorId].m2C_matrixBackup.t[0] = posX;

    MissingCode();

    fieldEntityArray[currentFieldActorId].mC_matrix.t[2] = posZ;
    fieldEntityArray[currentFieldActorId].m2C_matrixBackup.t[2] = posZ;

    MissingCode();

    pCurrentFieldScriptActor->m20_position.vx = posX << 16;
    pCurrentFieldScriptActor->m20_position.vz = posZ << 16;

    MissingCode();
}


const std::array<u16, 8> actorDirectionTable = {
    0x8C00,  0x8E00,  0x8000,  0x8200,
    0x8400,  0x8600,  0x8800,  0x8A00
};

const std::array<u16, 8> actorDirectionTable3 = {
    0x8C00,  0x8400,  0x8800,  0x8000,
    0x8A00,  0x8E00,  0x8600,  0x8200
};

int getCharacter(int param_1)
{
    int iVar1;

    iVar1 = currentParty[2];
    if ((((param_1 != 0xff) && (iVar1 = currentParty[1], param_1 != 0xfe)) && (iVar1 = currentParty[0], param_1 != 0xfd)) && (iVar1 = 0xff, param_1 != 0xfc)) {
        iVar1 = param_1;
    }
    return iVar1;
}

int findCharacterInParty(int param_1)
{
    int iVar1;
    int* piVar2;

    iVar1 = 0;
    if (param_1 != 0xff) {
        do {
            if (currentParty[iVar1] == 0xff) {
                return 0xffffffff;
            }
            if (currentParty[iVar1] == param_1) {
                return iVar1;
            }
            iVar1 = iVar1 + 1;
        } while (iVar1 < 3);
    }
    return 0xffffffff;
}

void updateScriptActor3dRotation(int index)
{
    MissingCode();
}

void Square0(sVec3* v0, sVec3* v1)
{
    v1->vx = powl(v0->vx, 2);
    v1->vy = powl(v0->vy, 2);
    v1->vz = powl(v0->vz, 2);
}

s32 SquareRoot0(s32 value)
{
    return sqrtl(value);
}

s32 length1d(s32 param_1)
{
    sVec3 local_28;
    sVec3 local_18;
    local_18.vx = param_1;

    Square0(&local_28, &local_18);
    return SquareRoot0(local_18.vx);
}

s32 length2d(s32 param_1, s32 param_2)
{
    sVec3 local_28;
    sVec3 local_18;
    local_18.vx = param_1;
    local_18.vy = param_2;
    local_18.vz = 0;
    Square0(&local_28, &local_18);
    return SquareRoot0(local_18.vx + local_18.vy);
}

int ratan2(int x, int y)
{
    bool bVar1;
    bool bVar2;
    int iVar3;
    int iVar4;

    bVar1 = x < 0;
    if (bVar1) {
        x = -x;
    }
    bVar2 = y < 0;
    if (bVar2) {
        y = -y;
    }
    if ((x == 0) && (y == 0)) {
        iVar3 = 0;
    }
    else {
        if (y < x) {
            iVar3 = x >> 10;
            if ((y & 0x7fe00000U) == 0) {
                iVar4 = (y << 10) / x;
                if (x == 0) {
                    //trap(0x1c00);
                    assert(0);
                }
                if ((x == 0xffffffff) && (y << 10 == -0x80000000)) {
                    //trap(0x1800);
                    assert(0);
                }
            }
            else {
                iVar4 = y / iVar3;
                if (iVar3 == 0) {
                    //trap(0x1c00);
                    assert(0);
                }
                if ((iVar3 == -1) && (y == 0x80000000)) {
                    //trap(0x1800);
                    assert(0);
                }
            }
            iVar3 = (int)atanTable[iVar4];
        }
        else {
            iVar3 = y >> 10;
            if ((x & 0x7fe00000U) == 0) {
                iVar4 = (x << 10) / y;
                if (y == 0) {
                    //trap(0x1c00);
                    assert(0);
                }
                if ((y == 0xffffffff) && (x << 10 == -0x80000000)) {
                    //trap(0x1800);
                    assert(0);
                }
            }
            else {
                iVar4 = x / iVar3;
                if (iVar3 == 0) {
                    //trap(0x1c00);
                    assert(0);
                }
                if ((iVar3 == -1) && (x == 0x80000000)) {
                    //trap(0x1800);
                    assert(0);
                }
            }
            iVar3 = 0x400 - atanTable[iVar4];
        }
        if (bVar1) {
            iVar3 = 0x800 - iVar3;
        }
        if (bVar2) {
            iVar3 = -iVar3;
        }
    }
    return iVar3;
}

int fp_atan2(int* param_1)
{
    return -ratan2(param_1[2], param_1[0]) & 0xFFF;
}

int spriteWalkToPositionOrActor(int param_1)
{
    if ((fieldEntityArray[currentFieldActorId].m4C_scriptEntity->m4_flags & 0x2000) == 0)
    {
        if (fieldEntityArray[currentFieldActorId].m4_pVramSpriteSheet->m18 == 0)
        {
            fieldEntityArray[currentFieldActorId].m4_pVramSpriteSheet->m18 = 0x4000000 / pCurrentFieldScriptActor->m76;
        }
    }
    else
    {
        fieldEntityArray[currentFieldActorId].m4_pVramSpriteSheet->m18 = 0x8000000 / pCurrentFieldScriptActor->m76;
    }

    int local_30;
    int local_28;

    int lVar13 = 0;
    int lVar14 = 0;

    switch (pCurrentFieldScriptActor->m8C_scriptSlots[pCurrentFieldScriptActor->mCE_currentScriptSlot].m4_flags.m23_walkMode)
    {
    case 0:
        local_30 = getVar80(1, pCurrentFieldScriptFile[pCurrentFieldScriptActor->mCC_scriptPC + 5]);
        local_28 = getVar40(3, pCurrentFieldScriptFile[pCurrentFieldScriptActor->mCC_scriptPC + 5]);
        break;
    case 1:
        local_30 = getVar80(1, pCurrentFieldScriptFile[pCurrentFieldScriptActor->mCC_scriptPC + 5]) + pCurrentFieldScriptActor->mD0_targetPositionOffset[0];
        local_28 = getVar40(3, pCurrentFieldScriptFile[pCurrentFieldScriptActor->mCC_scriptPC + 5]) + pCurrentFieldScriptActor->mD0_targetPositionOffset[2];
        break;
    case 2:
        if (readCharacter(1) == 0xFF)
        {
            return 0;
        }
        lVar14 = length1d(fieldEntityArray[readCharacter(1)].m4C_scriptEntity->m18[3] + pCurrentFieldScriptActor->m18[3]);
        local_30 = fieldEntityArray[readCharacter(1)].m4C_scriptEntity->m20_position.vx >> 16;
        local_28 = fieldEntityArray[readCharacter(1)].m4C_scriptEntity->m20_position.vz >> 16;
        if (pCurrentFieldScriptFile[pCurrentFieldScriptActor->mCC_scriptPC + 1] == playerControlledEntity)
        {
            pCurrentFieldScriptActor->m0_flags |= 0x200000;
        }
        break;
    case 3:
        local_30 = pCurrentFieldScriptActor->mD0_targetPositionOffset[0] + ((getAngleSin(getImmediateOrVariableUnsigned(1) & 0xfff) << 0xc) >> 0xc);
        local_28 = pCurrentFieldScriptActor->mD0_targetPositionOffset[2] + (getAngleCos(getImmediateOrVariableUnsigned(1) & 0xfff) * -0x1000 >> 0xc);
        break;
    default:
        assert(0);
    }

    int targetPosition[3];
    targetPosition[0] = local_30 - (pCurrentFieldScriptActor->m20_position.vx >> 16);
    targetPosition[2] = local_28 - (pCurrentFieldScriptActor->m20_position.vz >> 16);
    targetPosition[1] = 0;

    pCurrentFieldScriptActor->m0_flags |= 0x400000;

    // Reached destination yet?
    if ((pCurrentFieldScriptActor->m8C_scriptSlots[pCurrentFieldScriptActor->mCE_currentScriptSlot].m4_flags.m0 == 0) ||
        (length2d(targetPosition[0], targetPosition[2]) <= length1d(fieldEntityArray[currentFieldActorId].m4_pVramSpriteSheet->m18 >> 0xf) + 1 + lVar14))
    {
        //reached location
        if (param_1 == 0)
        {
            pCurrentFieldScriptActor->m106_currentRotation = pCurrentFieldScriptActor->m104_rotation = fp_atan2(targetPosition);
        }
        else
        {
            if ((pCurrentFieldScriptActor->m0_flags & 0x8000) == 0)
            {
                pCurrentFieldScriptActor->m106_currentRotation = pCurrentFieldScriptActor->m104_rotation = pCurrentFieldScriptActor->m106_currentRotation | 0x8000;
            }
            else
            {
                pCurrentFieldScriptActor->m106_currentRotation = pCurrentFieldScriptActor->m104_rotation = pCurrentFieldScriptActor->m11C | 0x8000;
            }
        }

        pCurrentFieldScriptActor->m8C_scriptSlots[pCurrentFieldScriptActor->mCE_currentScriptSlot].m4_flags.m0 = 0xFFFF;
        pCurrentFieldScriptActor->m8C_scriptSlots[pCurrentFieldScriptActor->mCE_currentScriptSlot].m4_flags.m23_walkMode = 0;
        pCurrentFieldScriptActor->m0_flags &= 0xfddff7ff;
        return 0;
    }
    else
    {
        pCurrentFieldScriptActor->m8C_scriptSlots[pCurrentFieldScriptActor->mCE_currentScriptSlot].m4_flags.m0--;
        pCurrentFieldScriptActor->m106_currentRotation = pCurrentFieldScriptActor->m104_rotation = fp_atan2(targetPosition);
        breakCurrentScript = 1;
        return -1;
    }
}

void resetFieldScriptActor()
{
    breakCurrentScript = 1;
    pCurrentFieldScriptActor->m30_stepVector.vx = 0;
    pCurrentFieldScriptActor->m30_stepVector.vy = 0;
    pCurrentFieldScriptActor->m30_stepVector.vz = 0;
    pCurrentFieldScriptActor->m40.vx = 0;
    pCurrentFieldScriptActor->m40.vy = 0;
    pCurrentFieldScriptActor->m40.vz = 0;
    pCurrentFieldScriptActor->m104_rotation = pCurrentFieldScriptActor->m106_currentRotation = pCurrentFieldScriptActor->m104_rotation | 0x8000;
    fieldEntityArray[currentFieldActorId].m4_pVramSpriteSheet->mC.vx = 0;
    fieldEntityArray[currentFieldActorId].m4_pVramSpriteSheet->mC.vy = 0;
    fieldEntityArray[currentFieldActorId].m4_pVramSpriteSheet->m18 = 0;
}


void SetGeomScreen(s32)
{
    MissingCode();
}

s32 opA0_var0 = 0;
s32 opA0_var1 = 0;

s32 desiredCameraPosition[3] = { 0,0,0 };

s32 cameraTargetOverride[3] = { 0,0,0 };
s32 desiredCameraTarget[3] = { 0,0,0 };
s32 cameraPositionOverride[3] = { 0,0,0 };
s32 cameraInterpolationTargetStep[3] = { 0,0,0 };
s32 cameraInterpolationTargetStartPosition[3] = { 0,0,0 };
s32 cameraInterpolationPositionStep[3] = { 0,0,0 };
s32 cameraInterpolationStartPosition[3] = { 0,0,0 };
s32 cameraEye[3] = { 0,0,0 };
s32 cameraAt[3] = { 0,0,0 };
u16 cameraInterpolationFlags = 0;
s32 cameraInterpolationTargetNumSteps = 0;
s32 cameraInterpolationPositionNumSteps = 0;

s16 cameraRotation = 0;
void setCurrentActorRotation2(s16 param_1)
{
    int iVar1;
    sFieldScriptEntity* psVar2;
    ushort uVar3;

    psVar2 = pCurrentFieldScriptActor;
    iVar1 = fieldExecuteVar1;
    uVar3 = param_1 - cameraRotation & 0xfffU | 0x8000;
    pCurrentFieldScriptActor->m104_rotation = uVar3;
    psVar2->m106_currentRotation = uVar3;
    if (iVar1 == 0) {
        psVar2->m108_rotation3 = uVar3;
    }
    pCurrentFieldScriptActor->mCC_scriptPC = pCurrentFieldScriptActor->mCC_scriptPC + 3;
}


int getCurrentActorRotation()
{
    return (pCurrentFieldScriptActor->m106_currentRotation + 0x100 >> 9) + 2U & 7;
}

void setCurrentActorTargetRotation(s16 param_1)
{
    if (fieldExecuteVar1 == 0) {
        pCurrentFieldScriptActor->m104_rotation = param_1 | 0x8000;
        pCurrentFieldScriptActor->m106_currentRotation = param_1 | 0x8000;
        pCurrentFieldScriptActor->m108_rotation3 = param_1 | 0x8000;
    }
    pCurrentFieldScriptActor = pCurrentFieldScriptActor;
    pCurrentFieldScriptActor->m104_rotation = param_1 | 0x8000U;
    pCurrentFieldScriptActor->m106_currentRotation = param_1 | 0x8000U;
    pCurrentFieldScriptActor->mCC_scriptPC = pCurrentFieldScriptActor->mCC_scriptPC + 3;
}


int playMusicAuthorized = 0;
int musicVar1 = -1;
int musicVar2 = 0;
int currentlyPlayingMusic = 255;

void clearMusic()
{
    MissingCode();
}

void clearMusic2()
{
    MissingCode();
}

int isLoadCompleted()
{
    MissingCode();
    return 0;
}

void playMusic(int musicId, int)
{
    MissingCode();
}

s32 fieldExecuteVar2 = 0;
s32 fieldExecuteVar3 = 0;
s16 fieldRandomBattleVar = 0;

void OP_21_sub(sFieldEntitySub4* param_1, int param_2)
{
    param_1->mAC = param_1->mAC & 0xfff8007f | (param_2 & 0xfff) << 7;
}



void setCurrentActorElevation(short param_1)
{
    sFieldScriptEntity* psVar1;

    psVar1 = pCurrentFieldScriptActor;
    (pCurrentFieldScriptActor->m20_position).vy = (uint)param_1 << 0x10;
    psVar1->mEC_elevation = param_1;
    psVar1->m72_elevation = param_1;
    return;
}




s16 OPX47Var = 0;
void OPX_47()
{
    OPX47Var = getImmediateOrVariableUnsigned(1);
    pCurrentFieldScriptActor->mCC_scriptPC = pCurrentFieldScriptActor->mCC_scriptPC + 3;
}

s32 load2dAnimVar = 0;
s32 loadCompleted = 0;


void setupSpecialAnimation(sFieldEntitySub4* param_1, sFieldActorSetupParams* param_2)
{
    param_1->m4C_specialAnimation = param_2;
    return;
}




void updateGearState(int param_1)

{
    ushort uVar2;
    int uVar1;

    uVar2 = (ushort)fieldMapNumber;
    if (param_1 == 1) {
        setVar(0x30, uVar2 & 0xfff);
        setVar(0x32, 0);
        uVar1 = 0x34;
    }
    else {
        if (param_1 < 2) {
            if (param_1 != 0) {
                return;
            }
            setVar(0x2a, uVar2 & 0xfff);
            setVar(0x2c, 0);
            uVar1 = 0x2e;
        }
        else {
            if (param_1 != 2) {
                return;
            }
            setVar(0x36, uVar2 & 0xfff);
            setVar(0x38, 0);
            uVar1 = 0x3a;
        }
    }
    setVar(uVar1, 0);
    return;
}

u8 OPX_50Param = 0;
u8 OPX_52Param = 0;
u16 OPX_80Params[8] = { 0,0,0,0,0,0,0,0 };
s32 OPX_81Params[3] = { 0,0,0 };
s8 OPX_82Param0[4] = { 0,0,0,0 };
s8 OPX_82Param1[4] = { 0,0,0,0 };
s8 OPX_82Param2[4] = { 0,0,0,0 };
s16 OPX_82Param3[3] = { 0,0,0 };
s16 OPX_82Param4 = 0;
s32 OPX_86Param = 0;
s32 OPX8E_param0 = 0;
s32 OPX8E_param1 = 0;

int getCurrentDiscNumber()
{
    MissingCode();
    return 0;
}



s8 OPX_E0Param = 0;

void OPX_13Sub(int)
{
    MissingCode();
}


u16 padButtonForScripts = 0;


int findDialogWindowForCurrentActor(int*)
{
    MissingCode();
    return -1;
}



int isScriptAlreadyRunning(sFieldScriptEntity* pEntity, int scriptIndex)
{
    for (int i = 0; i < 8; i++)
    {
        if (pEntity->m8C_scriptSlots[i].m3_scriptIndex == scriptIndex)
        {
            return -1;
        }
    }
    return 0;
}



void setupRGBCalcMode(int, int, int, int, int, int)
{
    MissingCode();
}

void executeFieldScript(int param)
{
    breakCurrentScript = 0;
    fieldExectuteMaxCycles = param;
    int cycles = 0;
    if (param > 0)
    {
        while (cycles <= 0x400)
        {
            //printf("PC: 0x%04X ", pCurrentFieldScriptActor->mCC_scriptPC);
            u8 opcodeId = pCurrentFieldScriptFile[pCurrentFieldScriptActor->mCC_scriptPC];

            //printf("OP_%02X\n", opcodeId);

            if (fieldScriptOpcodes[opcodeId] == nullptr)
            {
                breakCurrentScript = 1;
                return;
            }

            //_CrtCheckMemory();
            fieldScriptOpcodes[opcodeId]();
            //_CrtCheckMemory();

            if (currentScriptFinished == 0) {
                fieldExectuteMaxCycles = 0xffff;
            }
            if (fieldExecuteVar1 != 0) {
                if (fieldExecuteVar2 == 0) {
                    return;
                }
                if (fieldExecuteVar3 == 0) {
                    return;
                }
                if (fieldChangePrevented == 0) {
                    return;
                }
            }
            if ((breakCurrentScript == 1) && (currentScriptFinished == 1)) {
                return;
            }

            cycles++;
            if (cycles >= fieldExectuteMaxCycles)
            {
                return;
            }
        }

        if (fieldDebugDisable == 0) {
            sprintf_screen("EVENTLOOP ERROR ACT=%d\n", currentFieldActorId);
        }
    }
}

void startAllEntityScripts()
{
    if (fieldScriptEntityAlreadyInitialized == 0)
    {
        setVar(0x10, 0);
        setVarsForCurrentParty();

        for (int i = 0; i < totalActors; i++)
        {
            // that was probably some macro
            pCurrentFieldEntity = &fieldEntityArray[i];
            pCurrentFieldScriptActor = pCurrentFieldEntity->m4C_scriptEntity;
            currentFieldActorId = i;
            pCurrentFieldScriptActor->mCC_scriptPC = getScriptEntryPoint(i, 2); // the update script

            // Does the entry point have any code?
            if ((READ_LE_U16(pCurrentFieldScriptFile + pCurrentFieldScriptActor->mCC_scriptPC) == 0))
            {
                pCurrentFieldScriptActor->m4_flags |= 0x4000000;
            }

            // again, this time for the init script
            pCurrentFieldEntity = &fieldEntityArray[i];
            pCurrentFieldScriptActor = pCurrentFieldEntity->m4C_scriptEntity;
            currentFieldActorId = i;
            pCurrentFieldScriptActor->mCC_scriptPC = getScriptEntryPoint(i, 0); // the init script

        }

        // execute the init script
        for (int i = 0; i < totalActors; i++)
        {
            pCurrentFieldEntity = &fieldEntityArray[i];
            pCurrentFieldScriptActor = pCurrentFieldEntity->m4C_scriptEntity;
            fieldScriptInitVar0 = 0;
            currentScriptFinished = 0;
            currentFieldActorId = i;

            executeFieldScript(0xFFFF);

            if (fieldScriptInitVar0 == 0)
            {
                OP_INIT_ENTITY_SCRIPT_sub0(i, 0, &fieldActorSetupParams[0], 0, 0, 0x80, 0);
                pCurrentFieldScriptActor->m4_flags |= 0x800;
            }
        }
    }
    else
    {
        assert(0);
    }
}

void initFieldData()
{
    resetFieldDefault();

    for (int i=0; i<32; i++)
    {
        fieldVramMapping[i].m0_vramX = READ_LE_S16(rawFieldBundle.begin() + i * 8 + 0);
        fieldVramMapping[i].m2_vramY = READ_LE_S16(rawFieldBundle.begin() + i * 8 + 2);
        fieldVramMapping[i].m4 = READ_LE_S16(rawFieldBundle.begin() + i * 8 + 4);
        fieldVramMapping[i].m6 = READ_LE_S16(rawFieldBundle.begin() + i * 8 + 6);
    }

    MissingCode();

    {
        {

            int rawFieldImageBundleSize = READ_LE_U32(&rawFieldBundle[0x10C]);
            rawFieldImageBundle.resize(rawFieldImageBundleSize + 0x10);
            fieldDecompress(rawFieldImageBundleSize + 0x10, rawFieldBundle.begin() + READ_LE_U32(&rawFieldBundle[0x130]), rawFieldImageBundle);

            int numImages = READ_LE_U32(rawFieldImageBundle.begin());
            for (int i = 0; i < numImages; i++)
            {
                int offset = READ_LE_U32(rawFieldImageBundle.begin() + i * 4);
                uploadFieldImages(rawFieldImageBundle.begin() + offset);
            }
        }
        
        {
            int rawFieldImageBundle2Size = READ_LE_U32(&rawFieldBundle[0x11C]);
            rawFieldImageBundle2.resize(rawFieldImageBundle2Size + 0x10);
            fieldDecompress(rawFieldImageBundle2Size + 0x10, rawFieldBundle.begin() + READ_LE_U32(&rawFieldBundle[0x140]), rawFieldImageBundle2);

            int numImages = READ_LE_U32(rawFieldImageBundle2.begin());
            for (int i = 0; i < numImages; i++)
            {
                int offset = READ_LE_U32(rawFieldImageBundle2.begin() + 4 + i * 4);

                if (fieldVramMapping[i].m6 == 0)
                {
                    int x = fieldVramMapping[i].m0_vramX;
                    int y = fieldVramMapping[i].m2_vramY;

                    uploadNpcSpriteSheet(rawFieldImageBundle2.begin() + offset, x, y);
                }
                
            }
        }

        DrawSync(0); // needs to be done to transfert to vram before the bundles get deallocated
    }

    {
        int rawFieldSize = READ_LE_U32(&rawFieldBundle[0x114]);
        rawFieldModels.resize(rawFieldSize + 0x10);
        fieldDecompress(rawFieldSize + 0x10, rawFieldBundle.begin() + READ_LE_U32(&rawFieldBundle[0x138]), rawFieldModels);

        int numModels = READ_LE_U32(rawFieldModels.begin());
        gCurrentFieldModels.clear();
        gCurrentFieldModels.resize(numModels);
        for (int i = 0; i < numModels; i++)
        {
            int offset = READ_LE_U32(rawFieldModels.begin() + 4 + i * 4);
            int nextOffset;
            
            if (i < numModels - 1)
            {
                nextOffset = READ_LE_U32(rawFieldModels.begin() + 4 + (i + 1) * 4);
            }
            else
            {
                nextOffset = rawFieldModels.size();
            }
            fieldModelRelocation(rawFieldModels.begin() + offset);
            gCurrentFieldModels[i].init(rawFieldModels.begin() + offset, nextOffset - offset);
        }
    }

    {
        int rawFieldSize = READ_LE_U32(&rawFieldBundle[0x120]);
        rawFieldScriptData.resize(rawFieldSize + 0x10);
        fieldDecompress(rawFieldSize + 0x10, rawFieldBundle.begin() + READ_LE_U32(&rawFieldBundle[0x144]), rawFieldScriptData);
        totalActors = READ_LE_U32(rawFieldScriptData.begin() + 0x80);
        pCurrentFieldScriptFile = rawFieldScriptData.begin() + 0x84 + totalActors * 0x40;
    }

    {
        int rawFieldSize = READ_LE_U32(&rawFieldBundle[0x12C]);
        rawFieldTriggerData.resize(rawFieldSize + 0x10);
        fieldDecompress(rawFieldSize + 0x10, rawFieldBundle.begin() + READ_LE_U32(&rawFieldBundle[0x150]), rawFieldTriggerData);
    }

    {
        int rawFieldSize = READ_LE_U32(&rawFieldBundle[0x128]);
        rawFieldDialogBundle.resize(rawFieldSize + 0x10);
        fieldDecompress(rawFieldSize + 0x10, rawFieldBundle.begin() + READ_LE_U32(&rawFieldBundle[0x14C]), rawFieldDialogBundle);
    }

    {
        int rawFieldSize = READ_LE_U32(&rawFieldBundle[0x110]);
        rawFieldWalkMesh.resize(rawFieldSize + 0x10);
        fieldDecompress(rawFieldSize + 0x10, rawFieldBundle.begin() + READ_LE_U32(&rawFieldBundle[0x134]), rawFieldWalkMesh);
        walkMesh.init(rawFieldWalkMesh);
    }

    {
        std::vector<u8>::iterator walkMeshIterator = rawFieldWalkMesh.begin();
        numWalkMesh = READ_LE_U32(walkMeshIterator);
        assert(numWalkMesh < 5);
        walkMeshIterator += 4;

        for (int i=0; i<4; i++)
        {
            u32 block_size = READ_LE_U32(walkMeshIterator);
            assert((block_size % 0xE) == 0);
            walkMeshNumTrianglePerBlock[i] = block_size / 0xE;

            walkMeshIterator += 4;
        }

        int iVar4 = 0;
        walkMeshVar1Raw = &(rawFieldWalkMesh[0]) + READ_LE_U32(walkMeshIterator);
        walkMeshIterator += 4;

        if (numWalkMesh > 0) {
            std::array<u8*, 5>::iterator piVar11 = walkMeshVerticesRaw.begin();
            std::array<u8*, 5>::iterator ppuVar8 = walkMeshTriangleRaw.begin();
            do {
                iVar4 = iVar4 + 1;
                *ppuVar8 = &rawFieldWalkMesh[0] + READ_LE_U32(walkMeshIterator);
                *piVar11 = &rawFieldWalkMesh[0] + READ_LE_U32(walkMeshIterator + 4);
                ppuVar8++;
                piVar11++;
                walkMeshIterator = walkMeshIterator + 2 * 4;
            } while (iVar4 < numWalkMesh);
        }
        walkMeshVar4 = (walkMeshTriangleRaw[0] - walkMeshVar1Raw) / 4;

        //////////////////////////////////////////////
        // Not in disassembly

        for (int i=0; i<numWalkMesh; i++)
        {
            walkMeshTriangle[i] = &walkMesh.m_blocks[i].m_triangles;
            walkMeshVertices[i] = &walkMesh.m_blocks[i].m_vertices;
        }
        walkMeshVar1 = &walkMesh.m_materials;
    }

    {
        int rawFieldSize = READ_LE_U32(&rawFieldBundle[0x118]);
        rawFieldActorSetupParams.resize(rawFieldSize + 0x10);
        fieldDecompress(rawFieldSize + 0x10, rawFieldBundle.begin() + READ_LE_U32(&rawFieldBundle[0x13C]), rawFieldActorSetupParams);

        u32 count = READ_LE_U32(rawFieldActorSetupParams.begin());
        fieldActorSetupParams.resize(count);
        for (int i=0; i<count; i++)
        {
            fieldActorSetupParams[i].init(rawFieldActorSetupParams.begin() + READ_LE_U32(4 + rawFieldActorSetupParams.begin() + 4 * i));
        }
    }

    fieldInitVar1[0] = 1;
    fieldInitVar1[1] = 1;
    fieldInitVar1[2] = 1;
    fieldInitVar1[3] = 1;

    setupField3d(rawFieldBundle.begin() + 0x154);

    totalObjects = READ_LE_U16(&rawFieldBundle[0x18C]);
    fieldEntityArray.resize(totalObjects);

    for (int i = 0; i < totalObjects; i++)
    {
        memset(&fieldEntityArray[i], 0, sizeof(sFieldEntity));
    }

    std::vector<u8>::iterator fieldEntitySetup = rawFieldBundle.begin() + 0x190;
    for (int i = 0; i < totalObjects; i++)
    {
        fieldEntityArray[i].m58_flags = READ_LE_U16(fieldEntitySetup);
        fieldEntityArray[i].m50_modelRotation[0] = READ_LE_S16(fieldEntitySetup + 2);
        fieldEntityArray[i].m50_modelRotation[1] = READ_LE_S16(fieldEntitySetup + 4);
        fieldEntityArray[i].m50_modelRotation[2] = READ_LE_S16(fieldEntitySetup + 6);

        fieldEntityArray[i].m2C_matrixBackup.t[0] = fieldEntityArray[i].mC_matrix.t[0] = READ_LE_S16(fieldEntitySetup + 8);
        fieldEntityArray[i].m2C_matrixBackup.t[1] = fieldEntityArray[i].mC_matrix.t[1] = READ_LE_S16(fieldEntitySetup + 10);
        fieldEntityArray[i].m2C_matrixBackup.t[2] = fieldEntityArray[i].mC_matrix.t[2] = READ_LE_S16(fieldEntitySetup + 12);

        // Is this a 3d model?
        if (!(fieldEntityArray[i].m58_flags & 0x40))
        {
            u16 modelIndex = READ_LE_U16(fieldEntitySetup + 14);

            fieldEntityArray[i].m0 = new sFieldEntitySub0;
            sModel& pModel = gCurrentFieldModels[modelIndex];
            std::vector<sModelBlock>::iterator pModelBlock = pModel.m10_blocks.begin();

            fieldEntityArray[i].m0->m4_pModelBlock = pModelBlock;

            initModel1(*pModelBlock, fieldEntityArray[i].m0->m8, fieldEntityArray[i].m0->mC_end);

            MissingCode(); // the whole model init stuff here
        }
        else
        {
            fieldEntityArray[i].m50_modelRotation[0] = 0;
            fieldEntityArray[i].m50_modelRotation[1] = 0;
            fieldEntityArray[i].m50_modelRotation[2] = 0;

        }

        initFieldScriptEntity(i);

        fieldEntitySetup += 16;
    }

    MissingCode();

    startAllEntityScripts();

    MissingCode();

    // hack!
    fieldIdForDebugger = currentFieldId0 / 2;
}

void flagAllocation(std::vector<u8>&)
{
    MissingCode();
}

void unflagAllocation(std::vector<u8>&)
{
    MissingCode();
}

int isCDBusy()
{
    MissingCode();
    return 0;
}



void loadRawFieldBundle(int fieldId)
{
    rawFieldBundle.resize(getFileSizeAligned(184 + fieldId));
    flagAllocation(rawFieldBundle);

    readFile(184 + fieldId, rawFieldBundle, 0, 0x80);
}

int loadNewField(int fieldId, int param)
{
    if ((currentFieldId1 == param) && (currentFieldId0 == fieldId))
    {
        return 0;
    }

    if (isCDBusy())
    {
        return -1;
    }

    waitReadCompletion(0);
    if (currentFieldId1 != -1)
    {
        unflagAllocation(rawFieldBundle);
        rawFieldBundle.clear();
    }
    loadRawFieldBundle(fieldId);

    currentFieldId0 = fieldId;
    currentFieldId1 = param;

    return -1;
}

void loadInitialField()
{
    waitReadCompletion(0);

    while (loadNewField((fieldMapNumber & 0xFFF) * 2, 0));
}


void* allocateBufferForVramUpload(int)
{
    MissingCode();
    return nullptr;
}

std::array<u8, 2048 * 512> gVram;
void clearModelTextureCache();

void loadImageFileToVram(int fileId, void* allocation, int, int, int, int, int, int, int, int)
{
    // this is completely different from the original code that was done async and using the cd callbacks
    MissingCode();

    // make sure we recreate all texture after loading this
    clearModelTextureCache();

    std::vector<u8> data;
    c_isoManager::getCurrentDisc()->readData(getFileStartSector(fileId), getFileSize(fileId), data);

    int offset = 0;
    while (offset < data.size() - 0x14)
    {
        std::vector<u8>::iterator texture = data.begin() + offset;
        u32 type = READ_LE_U16(texture + 0x00);
        u16 pos_x = READ_LE_U16(texture + 0x04);
        u16 pos_y = READ_LE_U16(texture + 0x06);
        u16 move_x = READ_LE_U16(texture + 0x08);
        u16 move_y = READ_LE_U16(texture + 0x0a);
        u16 width = READ_LE_U16(texture + 0x0c);
        u16 height = READ_LE_U16(texture + 0x0e);
        u16 chunks = READ_LE_U16(texture + 0x12);

        if (width > 2048 || height > 512 || width == 0 || height == 0) {
            return;
        }
        int blockSize = 0x1C + chunks * 2;
        offset += (blockSize + 2047) & ~2047;
        for (int i = 0; i < chunks; i++) {
            height = READ_LE_U16(texture + 0x1C + i * 2);
            for (int j = 0; j < height; j++) {
                memcpy(&gVram[0] + (pos_y + move_y + j) * 2048 + (pos_x + move_x) * 2, ((u8*)&data[0]) + offset + j * width * 2, width * 2);
            }
            pos_y += height;
            blockSize = width * height * 2;
            offset += (blockSize + 2047) & ~2047;
        }
    }
}

int fieldGraphicsUploaded = 0;
void loadFieldGraphics()
{
    if (!fieldGraphicsUploaded)
    {
        fieldGraphicsUploaded = 1;
        void* fieldGraphicsAllocation = allocateBufferForVramUpload(4);
        loadImageFileToVram((fieldMapNumber & 0xfff) * 2 + 0xb9, fieldGraphicsAllocation, 0, 0, 0, 0, 0, 0, 0, 0);
    }
}


void bootField()
{
    MissingCode();

    setCurrentDirectory(4, 0);
    loadInitialField();

    MissingCode();

    waitReadCompletion(0);
    setCurrentDirectory(4, 0);
    initFieldData();
    loadFieldGraphics();

    MissingCode();

    if (fieldGraphicsUploaded)
    {
        MissingCode();
        fieldGraphicsUploaded = 0;
        MissingCode();
    }

    MissingCode();
}

void allocatePartyCharacterBuffers()
{
    initModel3(8, 0);

    partyCharacterBuffersRaw[0].resize(0x14000);
    partyCharacterBuffersRaw[1].resize(0x14000);
    partyCharacterBuffersRaw[2].resize(0x14000);

    flagAllocation(partyCharacterBuffersRaw[0]);
    flagAllocation(partyCharacterBuffersRaw[1]);
    flagAllocation(partyCharacterBuffersRaw[2]);
}

void waitForReadFinished(void)

{
    int iVar1;

    do {
        iVar1 = isCDBusy();
    } while (iVar1 != 0);
    waitReadCompletion(0);
    return;
}

int characterOrGearsLoadingInProgress = 0;
int fieldRequestedGears = 0;
int typeOfPlayableCharacterLoaded = 0;

void finalizeLoadPlayableCharacters()
{
    if (characterOrGearsLoadingInProgress != 0) {
        waitForReadFinished();

        for (int i = 0; i < 3; i++)
        {
            unflagAllocation(partyCharacterBuffersRaw[i]);
            if (currentParty[i] != -1)
            {
                unflagAllocation(partyCharacterBuffersCompressed[i]);
                decompress(partyCharacterBuffersCompressed[i].begin(), partyCharacterBuffersRaw[i]);
                partyCharacterBuffersCompressed[i].clear();

                partyCharacterBuffers[i].init(partyCharacterBuffersRaw[i].begin());
            }
        }

        characterOrGearsLoadingInProgress = 0;
    }
}

void refinalizePlayableCharacters(int)
{
    MissingCode();
}

void setupFieldCurrentPartyFromKernelAsGears()
{
    MissingCode();
}

struct sLoadingBatchCommands
{
    u16 m0_fileIndex;
    std::vector<u8>* m4_loadPtr;
};

sLoadingBatchCommands playableCharacterLoadingBatchCommands[11];

void batchStartLoadingFiles(sLoadingBatchCommands* pCommands, int param_2)
{
    // TODO: this is a quick and dirty implementation, not how the original code worked
    while (pCommands->m4_loadPtr)
    {
        readFile(pCommands->m0_fileIndex, *pCommands->m4_loadPtr, 0, 0);

        pCommands++;
    }
}

void setupFieldCurrentPartyFromKernelAsCharacters()
{
    pKernelGameState = &gameState;

    for (int i=0; i<3; i++)
    {
        currentParty[i] = -1;
        if (gameState.m1D34_currentParty[i] != -1)
        {
            currentParty[i] = gameState.m1D34_currentParty[i];
        }
    }

    int loadSlot = 0;
    for (int i=0; i<3; i++)
    {
        if (currentParty[i] != -1)
        {
            playableCharacterLoadingBatchCommands[loadSlot].m0_fileIndex = currentParty[i] + 5;
            asyncPartyCharacterLoadingTable[i] = currentParty[i];
            partyCharacterBuffersCompressed[i].resize(getFileSizeAligned(currentParty[i] + 5));
            playableCharacterLoadingBatchCommands[loadSlot].m4_loadPtr = &partyCharacterBuffersCompressed[i];
            flagAllocation(partyCharacterBuffersCompressed[i]);
            loadSlot++;
        }
    }

    playableCharacterLoadingBatchCommands[loadSlot].m0_fileIndex = 0;
    playableCharacterLoadingBatchCommands[loadSlot].m4_loadPtr = nullptr;

    batchStartLoadingFiles(playableCharacterLoadingBatchCommands, 0);
    typeOfPlayableCharacterLoaded = 1;
}

void startLoadingPlayableCharacters()
{
    waitForReadFinished();
    if (characterOrGearsLoadingInProgress == 1) {
        finalizeLoadPlayableCharacters();
        if (fieldScriptEntityAlreadyInitialized != 0) {
            return;
        }
    }
    else {
        if (fieldScriptEntityAlreadyInitialized != 0) {
            refinalizePlayableCharacters(0);
            return;
        }
    }
    fieldRequestedGears = (fieldMapNumber & 0xc000) != 0;
    characterOrGearsLoadingInProgress = 0;
    if (fieldRequestedGears) {
        if (typeOfPlayableCharacterLoaded != 2) {
            setupFieldCurrentPartyFromKernelAsGears();
            characterOrGearsLoadingInProgress = 1;
        }
    }
    else {
        if (typeOfPlayableCharacterLoaded != 1) {
            setupFieldCurrentPartyFromKernelAsCharacters();
            characterOrGearsLoadingInProgress = 1;
        }
    }
}

void freeFieldData()
{
    MissingCode();

    fieldEntityArray.clear();
    rawFieldTriggerData.clear();
    rawFieldDialogBundle.clear();
    rawFieldScriptData.clear();
    rawFieldWalkMesh.clear();
    walkMesh.clear();
    rawFieldModels.clear();
    gCurrentFieldModels.clear();
    rawFieldActorSetupParams.clear();

    MissingCode();
}

void transitionFields()
{
    MissingCode();

    freeFieldData();

    MissingCode();

    switch (fieldTransitionMode)
    {
    case 2:
        MissingCode();
        startLoadingPlayableCharacters();
        finalizeLoadPlayableCharacters();
        initFieldData();
        loadFieldGraphics();
        if (fieldGraphicsUploaded)
        {
            MissingCode();
            fieldGraphicsUploaded = 0;
            MissingCode();
        }
        MissingCode();
        break;
    default:
        assert(0);
        break;
    }

    fieldTransitionMode = 2;
    MissingCode();

}

void ClearCacheAfterOverlayLoad()
{
    MissingCode();
}

char noUpdatesToPartyMemebers = 0;

int onlyUpdateDirector = 0;
void exectueEntitiesUpdateFunction()
{
    int numEntitiesToUpdate = totalActors;
    if (onlyUpdateDirector == 1)
    {
        numEntitiesToUpdate = 1;
    }

    MissingCode();

    for (int i = 0; i < numEntitiesToUpdate; i++)
    {
        sFieldEntity* pFieldEntity = &fieldEntityArray[i];
        if (((pFieldEntity->m58_flags & 0xf00) != 0) && ((pFieldEntity->m4C_scriptEntity->m4_flags & 0x100000) == 0))
        {
            MissingCode();

            pCurrentFieldScriptActor = pFieldEntity->m4C_scriptEntity;
            pCurrentFieldScriptActor->m0_flags &= 0xfeffffff;
            currentFieldActorId = i;
            pCurrentFieldEntity = pFieldEntity;

            int maxScriptIndex = 0xF;
            if (noUpdatesToPartyMemebers)
            {
                assert(0);
            }
            for (int j = 0; j < 8; j++)
            {
                if(pCurrentFieldScriptActor->m8C_scriptSlots[j].m4_flags.m18 <= maxScriptIndex)
                {
                    pCurrentFieldScriptActor->mCE_currentScriptSlot = j;
                    maxScriptIndex = pCurrentFieldScriptActor->m8C_scriptSlots[j].m4_flags.m18;
                }
            }
            if (maxScriptIndex == 0xF)
            {
                pCurrentFieldScriptActor->m8C_scriptSlots[0].m0_scriptPC = getScriptEntryPoint(i, 1);
                pCurrentFieldScriptActor->mCE_currentScriptSlot = 0;
                pCurrentFieldScriptActor->m8C_scriptSlots[0].m4_flags.m18 = 7;
            }
            currentScriptFinished = 1;
            pCurrentFieldScriptActor->mCC_scriptPC = pCurrentFieldScriptActor->m8C_scriptSlots[pCurrentFieldScriptActor->mCE_currentScriptSlot].m0_scriptPC;
            if (!(pCurrentFieldScriptActor->m0_flags & 1))
            {
                executeFieldScript(8);
            }
            pCurrentFieldScriptActor->m8C_scriptSlots[pCurrentFieldScriptActor->mCE_currentScriptSlot].m0_scriptPC = pCurrentFieldScriptActor->mCC_scriptPC;
        }
    }
}

int entityUpdateVar0 = 0;
int entityUpdateVar1 = 0;

std::array<s16, 4> deltaMoveTable0 = {
    0x4, 0x8, 0x10, 0x20
};

std::array<s16, 8> deltaMoveTable1 = {
    0xC00, 0xE00, 0x0, 0x200,
    0x400, 0x600, 0x800, 0xA00
};

s16 deltaMoveVar0 = 0;

void computeDeltaMove(sVec3* param_1, int param_2, uint param_3)
{
    int iVar1;
    int iVar2;

    iVar2 = param_2 * 0x10 * entityMoveSpeedFactor >> 0xc;
    iVar1 = getAngleSin(param_3 & 0xfff);
    param_1->vx = iVar1 * iVar2;
    iVar1 = getAngleCos(param_3 & 0xfff);
    param_1->vy = 0;
    param_1->vz = -(iVar1 * iVar2);
    return;
}

void updateEntityEventCode2(int index, sFieldEntity* pFieldEntity, sFieldScriptEntity* pFieldScriptEntity)
{
    int triangleFlags = 0;
    if (((pFieldScriptEntity->m4_flags >> ((int)(short)pFieldScriptEntity->m10_walkmeshId + 3U & 0x1f) & 1) == 0) && (noUpdatesToPartyMemebers == '\0')) {
        triangleFlags = pFieldScriptEntity->m14_currentTriangleFlag;
    }

    sVec3 deltaMove;
    computeDeltaMove(&deltaMove, deltaMoveTable0[(triangleFlags >> 9) & 3], deltaMoveTable1[(triangleFlags >> 11) & 0x7] + deltaMoveVar0 & 0xfff);

    int iVar9 = 0;
    int iVar12 = 0;

    if ((pFieldScriptEntity->m0_flags & 0x41800) == 0)
    {
        if ((triangleFlags & 0x420000) != 0) {
            VECTOR local_60;
            local_60.vx = -((pFieldScriptEntity->m50).vx * (pFieldScriptEntity->m50).vy) >> 0xf;
            local_60.vz = -((pFieldScriptEntity->m50).vz * (pFieldScriptEntity->m50).vy) >> 0xf;
            if (local_60.vx == 0) {
                local_60.vx = 1;
            }
            local_60.vy = 1;
            if (local_60.vz == 0) {
                local_60.vz = 1;
            }
            VECTOR local_50;
            VectorNormal(&local_60, &local_50);
            if (local_50.vx == 0) {
                local_50.vx = 1;
            }
            if (local_50.vy == 0) {
                local_50.vy = 1;
            }
            if (local_50.vz == 0) {
                local_50.vz = 1;
            }
            int iVar13 = pFieldScriptEntity->mF0 >> 0x11;
            int iVar8 = 0xc;
            iVar9 = local_50.vx * iVar13 * 0x10;
            iVar12 = local_50.vz * iVar13 * 0x10;
            if ((triangleFlags & 0x400000) != 0) {
                iVar8 = 0x18;
            }
            iVar13 = iVar8 << 0x10;
            if (pFieldScriptEntity->mF0 >> 0x10 < iVar8) {
                iVar13 = pFieldScriptEntity->mF0 + pFieldEntity->m4_pVramSpriteSheet->m1C;
            }
            pFieldScriptEntity->mF0 = iVar13;
            pFieldEntity->m4_pVramSpriteSheet->mC.vy = pFieldScriptEntity->mF0 >> 1;
        }
        if ((triangleFlags & 0x400000) != 0) {
            pFieldScriptEntity->m40.vx += iVar9;
            pFieldScriptEntity->m40.vz += iVar12;
            pFieldScriptEntity->m104_rotation = pFieldScriptEntity->m104_rotation | 0x8000;
        }
        if (pFieldScriptEntity->m74 == -1)
        {
            if ((triangleFlags & 0x20000) != 0) {
                (pFieldScriptEntity->m40).vx = (pFieldScriptEntity->m40).vx + iVar9;
                (pFieldScriptEntity->m40).vz = (pFieldScriptEntity->m40).vz + iVar12;
            }
            if (triangleFlags & 0x8000)
            {
                pFieldScriptEntity->m40.vx += deltaMove.vx;
                pFieldScriptEntity->m40.vy += deltaMove.vy;
                pFieldScriptEntity->m40.vz += deltaMove.vz;
            }
        }
    }
    else
    {
        if (triangleFlags & 0x4000)
        {
            pFieldScriptEntity->m40.vx += deltaMove.vx;
            pFieldScriptEntity->m40.vy += deltaMove.vy;
            pFieldScriptEntity->m40.vz += deltaMove.vz;
        }
    }

    if (pFieldScriptEntity->m74 != -1)
    {
        assert(0);
    }

    if ((pFieldScriptEntity->m4_flags & 0x22000) == 0x22000) {
        assert(0);
    }
}

s16 playerCanRun = 1;
s32 updateEntityEventCode3Var0 = 0;
s32 updateEntityEventCode3Var1 = 0;
s32 updateEntityEventCode3Var2 = 0;
int updateEntityEventCode3Sub0(sFieldScriptEntity* param_1)
{
    int iVar1;

    iVar1 = -1;
    if (((((((param_1->m14_currentTriangleFlag & 0x420000U) == 0) && (iVar1 = -1, updateEntityEventCode3Var1 == 0)) && (iVar1 = -1, param_1->m30_stepVector.vx == 0)) &&
        ((iVar1 = -1, param_1->m30_stepVector.vy == 0 && (iVar1 = -1, param_1->m30_stepVector.vz == 0)))) &&
        ((iVar1 = -1, updateEntityEventCode3Var2 == 1 && ((iVar1 = -1, param_1->m74 == 0xff && (iVar1 = -1, (param_1->m0_flags & 0x401800) == 0)))))) &&
        (((param_1->m4_flags & 1) == 0 || (iVar1 = -1, param_1->m10_walkmeshId != 0)))) {
        if (((param_1->m4_flags & 2) == 0) || (param_1->m10_walkmeshId != 1)) {
            iVar1 = 0;
            if ((param_1->m4_flags & 4) != 0) {
                iVar1 = -(uint)(param_1->m10_walkmeshId == 2);
            }
        }
        else {
            iVar1 = -1;
        }
    }
    return iVar1;
}

void updateEntityEventCode3Sub1(sFieldEntitySub4* param_1, ushort rotation, sFieldEntity* param_3)
{
    int iVar1;
    sFieldScriptEntity* psVar2;
    int iVar3;
    uint uVar4;

    if ((param_3->m58_flags & 0x40) == 0) {
        uVar4 = 0x40000 / (ushort)param_3->m4C_scriptEntity->m76;
        if ((rotation & 0x8000) != 0) {
        LAB_Field__800821b0:
            (param_1->mC).vx = 0;
            (param_1->mC).vz = 0;
            goto LAB_Field__800821bc;
        }
    }
    else {
        if (((int)(short)rotation & 0x8000U) != 0) goto LAB_Field__800821b0;
        psVar2 = param_3->m4C_scriptEntity;
        uVar4 = psVar2->m4_flags;
        if ((uVar4 & 0x2000) == 0) {
            if ((uVar4 & 0x80000) == 0) {
                OP_INIT_ENTITY_SCRIPT_sub0Sub7(param_1, (int)(short)rotation);
            }
            else {
                iVar3 = ((int)(0x40000 / (ushort)psVar2->m76) >> 8) * 0x20;
                iVar1 = getAngleSin(rotation & 0xfff);
                (param_1->mC).vx = (iVar1 * iVar3 >> 0xc) * (int)param_3->m4C_scriptEntity->mF4_scale3d[0];
                iVar1 = getAngleCos(rotation & 0xfff);
                (param_1->mC).vz = (-(iVar1 * iVar3) >> 0xc) * (int)param_3->m4C_scriptEntity->mF4_scale3d[2];
                param_1->m18 = 0x4000000 / (ushort)param_3->m4C_scriptEntity->m76;
            }
            goto LAB_Field__800821bc;
        }
        if ((uVar4 & 0x20000) != 0) {
            uVar4 = psVar2->m12C_flags;
            assert(0);
            //(param_1->mC).vx = *(int*)(*(int*)(&DAT_801e8670 + (uVar4 >> 0xb & 0x1c)) + 0x128) * -0x10000;
            //(param_1->mC).vz = *(int*)(*(int*)(&DAT_801e8670 + (uVar4 >> 0xb & 0x1c)) + 0x130) * -0x10000;
            goto LAB_Field__800821bc;
        }
        uVar4 = 0x80000 / (ushort)psVar2->m76;
    }
    iVar3 = ((int)uVar4 >> 8) * 0x20;
    iVar1 = getAngleSin(rotation & 0xfff);
    (param_1->mC).vx = (iVar1 * iVar3 >> 0xc) * (int)param_3->m4C_scriptEntity->mF4_scale3d[0];
    iVar1 = getAngleCos(rotation & 0xfff);
    (param_1->mC).vz = (-(iVar1 * iVar3) >> 0xc) * (int)param_3->m4C_scriptEntity->mF4_scale3d[2];

LAB_Field__800821bc:
    (param_1->mC).vx = (param_1->mC).vx & 0xfffff000;
    (param_1->mC).vz = (param_1->mC).vz & 0xfffff000;
}

int updateEntityEventCode3Sub2(sVec3* param_1, sFieldScriptEntity* param_2)
{
    long lVar2;
    std::vector<u16>* pasVar3;

    if ((param_2->m12C_flags & 0x1000) != 0) {
        sFP1616 position;
        position.set(((param_2->m20_position).vx + param_1->vx >> 0x10), ((param_2->m20_position).vz + param_1->vz >> 0x10));

        std::vector<sVec2_s16>& pasVar3 = param_2->m114_movementBoundingZone;
        std::array<sFP1616, 4> boundingZone;
        boundingZone[0].set(pasVar3[0].vx, pasVar3[0].vx);
        boundingZone[1].set(pasVar3[1].vx, pasVar3[1].vx);
        boundingZone[2].set(pasVar3[2].vx, pasVar3[2].vx);
        boundingZone[3].set(pasVar3[3].vx, pasVar3[3].vx);

        if ((NCLIP(boundingZone[0], boundingZone[1], position) < 0) || (NCLIP(boundingZone[1], boundingZone[2], position) < 0) || (NCLIP(boundingZone[2], boundingZone[3], position) < 0)) {
            return -1;
        }
        else {
            lVar2 = NCLIP(boundingZone[2], boundingZone[0], position);
            return lVar2 >> 0x1f;
        }
    }
    return 0;
}

int updateEntityEventCode3Sub3Sub1(sVec3* param_1, VECTOR* param_2, sFieldScriptEntity* param_3, std::array<SVECTOR, 2>& param_4, SVECTOR* param_5, int param_6, uint* param_7)
{
    MissingCode();
    return 0;
}

uint updateEntityEventCode3Sub3Sub2(short param_1, std::array<SVECTOR, 2>& param_2, sVec3* param_3)

{
    short sVar1;
    short sVar2;
    long lVar3;
    uint uVar4;
    uint uVar5;
    VECTOR local_38;
    VECTOR local_28;

    lVar3 = ratan2(param_2[1].vz - param_2[0].vz, param_2[1].vx - param_2[0].vx);
    uVar4 = -lVar3 & 0xfff;
    uVar5 = (0xc00U - (int)param_1 & 0xfff) + uVar4 & 0xfff;
    if (uVar5 - 0x80 < 0xf01) {
        if (uVar5 < 0x800) {
            local_38.vx = param_2[0].vx - param_2[1].vx;
            sVar1 = param_2[0].vz;
            sVar2 = param_2[1].vz;
            uVar4 = uVar4 + 0x800 & 0xfff;
        }
        else {
            local_38.vx = param_2[1].vx - param_2[0].vx;
            sVar1 = param_2[1].vz;
            sVar2 = param_2[0].vz;
        }
        local_38.vy = 0;
        local_38.vz = (int)sVar1 - (int)sVar2;
        VectorNormal(&local_38, &local_28);
        lVar3 = length2d(param_3->vx >> 0xc, param_3->vz >> 0xc);

        param_3->vx = local_28.vx * lVar3;
        param_3->vy = 0;
        param_3->vz = local_28.vz * lVar3;
    }
    else {
        param_3->vx = 0;
        param_3->vy = 0;
        param_3->vz = 0;
    }
    return uVar4;
}

int updateEntityEventCode3Sub4Sub1(sVec3* deltaStep, VECTOR* position, sFieldScriptEntity* pFieldScriptEntity, std::array<SVECTOR,2>& param_4, SVECTOR* param_5, int param_6)
{
    int collisionFlag;
    int uVar2;

    int triangleId = (int)pFieldScriptEntity->m8_currentWalkMeshTriangle[pFieldScriptEntity->m10_walkmeshId];
    std::vector<sWalkMesh::sTriangleData>& pWalkMeshTriangles = *walkMeshTriangle[pFieldScriptEntity->m10_walkmeshId];
    std::vector<SVECTOR>& pWalkMeshVertices = *walkMeshVertices[pFieldScriptEntity->m10_walkmeshId];

    if (triangleId == -1) {
        uVar2 = -1;
    }
    else {
        param_5->vx = (position->vx + deltaStep->vx) >> 0x10;
        param_5->vy = 0;
        param_5->vz = (position->vz + deltaStep->vz) >> 0x10;

        sFP1616 startPosition;
        sFP1616 endPosition;
        startPosition.set((position->vx >> 0x10),(position->vz >> 0x10));
        endPosition.set((position->vx + deltaStep->vx) >> 0x10, (position->vz + deltaStep->vz) >> 0x10);

        u32 mask = 0;

        if ((pFieldScriptEntity->m4_flags >> ((int)pFieldScriptEntity->m10_walkmeshId + 3U & 0x1f) & 1) == 0) {
            mask = -(uint)(noUpdatesToPartyMemebers == '\0');
        }

        int tempTriangleId;

        sFieldScriptEntity* local_58 = pFieldScriptEntity;
        int iterationCount = 0;
        for (iterationCount = 0; iterationCount < 0x20 ;iterationCount++)
        {
            sWalkMesh::sTriangleData* pTriangle = &pWalkMeshTriangles[triangleId];

            sFP1616 vert0;
            sFP1616 vert1;
            sFP1616 vert2;

            vert0.set(pWalkMeshVertices[pTriangle->m0_verticeIndex[0]].vx, pWalkMeshVertices[pTriangle->m0_verticeIndex[0]].vz);
            vert1.set(pWalkMeshVertices[pTriangle->m0_verticeIndex[1]].vx, pWalkMeshVertices[pTriangle->m0_verticeIndex[1]].vz);
            vert2.set(pWalkMeshVertices[pTriangle->m0_verticeIndex[2]].vx, pWalkMeshVertices[pTriangle->m0_verticeIndex[2]].vz);

            tempTriangleId = triangleId;

            collisionFlag = 0;
            if (NCLIP(vert0, vert1, endPosition) < 0) {
                collisionFlag |= 1;
            }

            if (NCLIP(vert1, vert2, endPosition) < 0) {
                collisionFlag |= 2;
            }

            if (NCLIP(vert2, vert0, endPosition) < 0) {
                collisionFlag |= 4;
            }

            if (collisionFlag < 8) {
                switch (collisionFlag)
                {
                case 0:
                    mask = 0xFF;
                    break;
                case 1:
                    triangleId = pWalkMeshTriangles[triangleId].m6_connectivity[0];
                    break;
                case 2:
                    triangleId = pWalkMeshTriangles[triangleId].m6_connectivity[1];
                    break;
                case 3:
                    if (NCLIP(vert1, endPosition, startPosition) < 0)
                    {
                        triangleId = pWalkMeshTriangles[triangleId].m6_connectivity[0];
                        collisionFlag = 1;
                    }
                    else {
                        triangleId = pWalkMeshTriangles[triangleId].m6_connectivity[1];
                        collisionFlag = 2;
                    }
                    break;
                case 4:
                    triangleId = pWalkMeshTriangles[triangleId].m6_connectivity[2];
                    break;
                case 5:
                    if (NCLIP(vert0, endPosition, startPosition) < 0)
                    {
                        triangleId = pWalkMeshTriangles[triangleId].m6_connectivity[2];
                        collisionFlag = 4;
                    }
                    else {
                        triangleId = pWalkMeshTriangles[triangleId].m6_connectivity[0];
                        collisionFlag = 1;
                    }
                    break;
                case 6:
                    if (NCLIP(vert2, endPosition,startPosition) < 0)
                    {
                        triangleId = pWalkMeshTriangles[triangleId].m6_connectivity[1];
                        collisionFlag = 2;
                    }
                    else {
                        triangleId = pWalkMeshTriangles[triangleId].m6_connectivity[2];
                        collisionFlag = 4;
                    }
                    break;
                case 7:
                    triangleId = -1;
                    break;
                default:
                    assert(0);
                }
            }

            // todo: does this really happen to be -1?
            if (triangleId == -1)
            {
                return -1;
            }
            u32 uVar4 = ((*walkMeshVar1)[pWalkMeshTriangles[triangleId].mC_indexInWalkmeshData1]) & mask;
            if ((((local_58->m0_flags >> 9 & 3 & uVar4 >> 3) != 0) || ((local_58->m0_flags >> 8 & 7 & uVar4 >> 5) != 0)) || (((uVar4 & 0x800000) != 0 && (local_58->m10_walkmeshId == 0)))) {
                triangleId = -1;
                break;
            }

            if (triangleId == -1)
                break;
        }

        if ((triangleId == -1) || (iterationCount == 0x20)) {

            switch (collisionFlag)
            {
            case 1:
                param_4[0] = pWalkMeshVertices[pWalkMeshTriangles[tempTriangleId].m0_verticeIndex[1]];
                param_4[1] = pWalkMeshVertices[pWalkMeshTriangles[tempTriangleId].m0_verticeIndex[2]];
                break;
            case 2:
                param_4[0] = pWalkMeshVertices[pWalkMeshTriangles[tempTriangleId].m0_verticeIndex[1]];
                param_4[1] = pWalkMeshVertices[pWalkMeshTriangles[tempTriangleId].m0_verticeIndex[2]];
                break;
            case 4:
                param_4[0] = pWalkMeshVertices[pWalkMeshTriangles[tempTriangleId].m0_verticeIndex[1]];
                param_4[1] = pWalkMeshVertices[pWalkMeshTriangles[tempTriangleId].m0_verticeIndex[2]];
                break;
            default:
                return -1;
            }
            uVar2 = -1;
        }
        else {
            if (param_6 == -1) {
                uVar2 = 0;
            }
            else {
                //psVar6 = (short*)(puVar9 + iVar8 * 0xe);
                assert(0);
                //FUN_Field__8007b07c((short*)(puVar10 + *psVar6 * 8), (short*)(puVar10 + psVar6[1] * 8), (short*)(puVar10 + psVar6[2] * 8), param_5, &sStack104);
                uVar2 = 0;
            }
        }
    }
    return uVar2;
}

int updateEntityEventCode3Sub4(sVec3* position, sFieldScriptEntity* param_2, std::array<SVECTOR, 2>& param_3, s16 angle)
{
    VECTOR* psVar4;
    sVec3 local_60;
    SVECTOR auStack80;

    local_60.vx = position->vx + getAngleSin(angle & 0xfff) * 0x40;
    local_60.vz = position->vz + getAngleCos(angle & 0xfff) * -0x40;

    psVar4 = &param_2->m20_position;

    if (updateEntityEventCode3Sub4Sub1(&local_60, psVar4, param_2, param_3, &auStack80, -1) == -1) {
        local_60.vx = position->vx;
        local_60.vy = position->vy;
        local_60.vz = position->vz;
        updateEntityEventCode3Sub3Sub2(angle, param_3, &local_60);
    }
    else {
        int newAngle = angle - 0x100U & 0xfff;
        local_60.vx = position->vx + getAngleSin(newAngle) * 0x40;
        local_60.vz = position->vz + getAngleCos(newAngle) * -0x40;
        if (updateEntityEventCode3Sub4Sub1(&local_60, psVar4, param_2, param_3, &auStack80, -1) == -1)
        {
            local_60.vx = position->vx;
            local_60.vy = position->vy;
            local_60.vz = position->vz;
            updateEntityEventCode3Sub3Sub2(angle, param_3, &local_60);
        }
        else
        {
            int newAngle = angle + 0x100U & 0xfff;
            local_60.vx = position->vx + getAngleSin(newAngle) * 0x40;
            local_60.vz = position->vz + getAngleCos(newAngle) * -0x40;
            if (updateEntityEventCode3Sub4Sub1(&local_60, psVar4, param_2, param_3, &auStack80, -1) == -1)
            {
                local_60.vx = position->vx;
                local_60.vy = position->vy;
                local_60.vz = position->vz;
                updateEntityEventCode3Sub3Sub2(angle, param_3, &local_60);
            }
            else
            {
                local_60.vx = position->vx;
                local_60.vy = position->vy;
                local_60.vz = position->vz;
            }

        }
    }

    if (updateEntityEventCode3Sub4Sub1(&local_60, &param_2->m20_position, param_2, param_3, &auStack80, 0) == -1) {
        return -1;
    }
    else {
        if ((param_2->m0_flags & 0x40000) == 0) {
            if (((int)auStack80.vy << 0x10 < (param_2->m20_position).vy) && (updateEntityEventCode3Var1 == 0))
                return -1;
        }
        else {
            auStack80.vy = param_2->mEC_elevation;
        }

        position->vx = local_60.vx;
        position->vy = auStack80.vy * 0x10000 - param_2->m20_position.vy;
        position->vz = local_60.vz;

        param_2->m72_elevation = (param_2->m20_position.vy + position->vy) >> 0x10;
        return 0;
    }
}

int updateEntityEventCode3Sub3(sVec3* param_1, sFieldScriptEntity* param_2, std::array<SVECTOR, 2>& param_3, short angle)
{
    long lVar2;
    sVec3 local_88;
    SVECTOR local_68;
    VECTOR local_58;
    VECTOR local_48;
    uint local_38;

    local_88.vx = param_1->vx + getAngleSin(angle - 0x100U & 0xfff) * 0x40;
    local_88.vz = param_1->vz + getAngleCos(angle - 0x100U & 0xfff) * -0x40;
    if (updateEntityEventCode3Sub3Sub1(&local_88, &param_2->m20_position, param_2, param_3, &local_68, -1, &local_38) == -1) {
        local_88.vx = param_1->vx;
        local_88.vy = param_1->vy;
        local_88.vz = param_1->vz;
        updateEntityEventCode3Sub3Sub2(angle, param_3, &local_88);
    }
    else {
        local_88.vx = param_1->vx + getAngleSin(angle + 0x100U & 0xfff) * 0x40;
        local_88.vz = param_1->vz + getAngleCos(angle + 0x100U & 0xfff) * -0x40;
        if (updateEntityEventCode3Sub3Sub1(&local_88, &param_2->m20_position, param_2, param_3, &local_68, -1, &local_38) == -1)
        {
            local_88.vx = param_1->vx;
            local_88.vy = param_1->vy;
            local_88.vz = param_1->vz;
            updateEntityEventCode3Sub3Sub2(angle, param_3, &local_88);
        }
        else
        {
            local_88.vx = param_1->vx + getAngleSin(angle & 0xfff) * 0x40;
            local_88.vz = param_1->vz + getAngleCos(angle & 0xfff) * -0x40;
            if (updateEntityEventCode3Sub3Sub1(&local_88, &param_2->m20_position, param_2, param_3, &local_68, -1, &local_38) == -1)
            {
                local_88.vx = param_1->vx;
                local_88.vy = param_1->vy;
                local_88.vz = param_1->vz;
                updateEntityEventCode3Sub3Sub2(angle, param_3, &local_88);
            }
            else
            {
                local_88.vx = param_1->vx;
                local_88.vy = param_1->vy;
                local_88.vz = param_1->vz;
            }
        }
    }
    if (updateEntityEventCode3Sub3Sub1(&local_88, &param_2->m20_position, param_2, param_3, &local_68, 0, &local_38) == -1) {
        return -1;
    }
    if ((((param_2->m20_position.vy) >> 16) <= local_68.vy) && ((local_38 & 0x200000) == 0)) {
        if ((local_38 & 0x420000) == 0) {
            if (((param_2->m20_position.vy) >> 16) + 0x40 <= (int)local_68.vy)
            {
                param_1->vx = local_88.vx;
                param_1->vy = local_68.vy * 0x10000 - param_2->m20_position.vy;
                param_1->vz = local_88.vz;
                param_2->m72_elevation = (param_2->m20_position.vy + param_1->vy) >> 0x10;
                return 0;
            }
        }
        else {
            if ((param_2->m14_currentTriangleFlag & 0x420000U) == 0)
            {
                param_1->vx = local_88.vx;
                param_1->vy = local_68.vy * 0x10000 - param_2->m20_position.vy;
                param_1->vz = local_88.vz;
                param_2->m72_elevation = (param_2->m20_position.vy + param_1->vy) >> 0x10;
                return 0;
            }
        }
    }
    local_58.vx = -local_88.vx >> 8;
    local_58.vz = -local_88.vz >> 8;
    local_58.vy = local_68.vy * 0x10000 - (param_2->m20_position).vy >> 8;
    VectorNormal(&local_58, &local_48);
    lVar2 = length2d(local_88.vx >> 8, local_88.vz >> 8);

    local_88.vx = -(lVar2 * local_48.vx) >> 4;
    local_88.vy = lVar2 * local_48.vy >> 4;
    local_88.vz = -(lVar2 * local_48.vz) >> 4;
    if (updateEntityEventCode3Sub3Sub1(&local_88, &param_2->m20_position, param_2, param_3, &local_68, 0, &local_38) == -1) {
        return -1;
    }
    param_2->m0_flags = param_2->m0_flags | 0x4000000;

    param_1->vx = local_88.vx;
    param_1->vy = local_68.vy * 0x10000 - param_2->m20_position.vy;
    param_1->vz = local_88.vz;
    param_2->m72_elevation = (param_2->m20_position.vy + param_1->vy) >> 0x10;
    return 0;
}

s16 updateEntityEventCode4Var0 = 0;
s16 updateEntityEventCode4Var1 = 0;

void updateEntityEventCode4(sFieldEntitySub4* param_1, int param_2, sFieldEntity* param_3)
{
    sFieldScriptEntity* psVar1;

    if ((param_3->m58_flags & 0x40) != 0) {
        if ((param_2 != 3) && (updateEntityEventCode4Var0 == 0)) {
            param_3->m4C_scriptEntity->m0_flags = param_3->m4C_scriptEntity->m0_flags & 0xfffff7ff;
        }
        if (param_2 == 0xff) {
            param_2 = 0;
        }
        if (param_2 != updateEntityEventCode4Var1) {
            param_3->m4C_scriptEntity->m0_flags = param_3->m4C_scriptEntity->m0_flags & 0xfffff7ff;
        }
        psVar1 = param_3->m4C_scriptEntity;
        if ((psVar1->m4_flags & 0x2000) == 0) {
            if ((psVar1->m4_flags & 0x1000000) == 0) {
                OP_INIT_ENTITY_SCRIPT_sub0Sub6(param_1, param_2);
            }
        }
        else {
            assert(0);
        }
    }
    return;
}

void updateEntityEventCode3(int index, sFieldEntity* pFieldEntity, sFieldScriptEntity* pFieldScriptEntity)
{
    int rotation = pFieldScriptEntity->m104_rotation;
    std::array<SVECTOR, 2> auStack56;

    if ((pFieldScriptEntity->m0_flags & 0x1000000) != 0) {
        updateEntityEventCode3Var0 = index;
        return;
    }

    int walkSpeed = 1;
    if ((((pFieldScriptEntity->m0_flags & 0x4000) != 0) && ((padButtonForScripts & 0x40) != 0)) && (playerCanRun == 1)) {
        walkSpeed = 2;
    }
    if (((pFieldScriptEntity->m0_flags & 0x1800) != 0) && (pFieldScriptEntity->mE8 != walkSpeed)) {
        if (pFieldScriptEntity->mE8 == 1) {
            walkSpeed = 1;
        }
        else {
            if (pFieldScriptEntity->mE8 == 2) {
                walkSpeed = 2;
            }
        }
    }

    updateEntityEventCode3Var0 = index;

    if (8 < pFieldScriptEntity->mE3) {
        pFieldScriptEntity->mE3--;
    }

    int moveMask = (pFieldScriptEntity->m40).vx | (pFieldScriptEntity->m40).vy | (pFieldScriptEntity->m40).vz;
    if (updateEntityEventCode3Sub0(pFieldScriptEntity) == -1)
    {
        moveMask = 1;
    }

    sVec3 stepVector;

    bool bMoved = false;

    if (((((int)(short)rotation & 0x8000U) == 0) || (moveMask != 0)) || ((pFieldScriptEntity->m0_flags & 0x40800) != 0)) {
        if (((int)(short)rotation & 0x8000U) == 0) {
            updateEntityEventCode3Sub1(pFieldEntity->m4_pVramSpriteSheet, (int)(short)rotation, pFieldEntity);
            stepVector.vx = pFieldEntity->m4_pVramSpriteSheet->mC.vx + pFieldScriptEntity->m40.vx;
            stepVector.vy = pFieldEntity->m4_pVramSpriteSheet->mC.vy + pFieldScriptEntity->m40.vy;
            stepVector.vz = pFieldEntity->m4_pVramSpriteSheet->mC.vz + pFieldScriptEntity->m40.vz;
            pFieldScriptEntity->m106_currentRotation = rotation;
        }
        else {
            stepVector.vx = (pFieldScriptEntity->m40).vx;
            stepVector.vy = (pFieldScriptEntity->m40).vy;
            stepVector.vz = (pFieldScriptEntity->m40).vz;
            rotation = pFieldScriptEntity->m106_currentRotation & 0xfff;
        }

        if (updateEntityEventCode3Sub2(&stepVector, pFieldScriptEntity) != 0)
        {
            bMoved = false;
        }
        else
        {
            if ((stepVector.vx != 0) || (stepVector.vz != 0)) {
                int lVar2 = ratan2(stepVector.vz, stepVector.vx);
                rotation = -(short)lVar2 & 0xfff;
            }

            int iVar1 = -1;
            if (pFieldScriptEntity->m8_currentWalkMeshTriangle[pFieldScriptEntity->m10_walkmeshId] != -1) {
                int backupFlags = pFieldScriptEntity->m0_flags;
                if (index == playerControlledEntity) {
                    if (partyToFieldEntityArrayMapping[1] != 0xff) {
                        pFieldScriptEntity->m0_flags = pFieldScriptEntity->m0_flags | (fieldEntityArray[partyToFieldEntityArrayMapping[1]].m4C_scriptEntity)->m0_flags & 0x600;
                    }
                    if (partyToFieldEntityArrayMapping[2] != 0xff) {
                        pFieldScriptEntity->m0_flags = pFieldScriptEntity->m0_flags | (fieldEntityArray[partyToFieldEntityArrayMapping[2]].m4C_scriptEntity)->m0_flags & 0x600;
                    }
                }
                if ((((pFieldScriptEntity->m0_flags & 0x41800) == 0) && (pFieldScriptEntity->m74 == -1)) && (updateEntityEventCode3Var1 == 0)) {
                    iVar1 = updateEntityEventCode3Sub3(&stepVector, pFieldScriptEntity, auStack56, rotation);
                }
                else {
                    iVar1 = updateEntityEventCode3Sub4(&stepVector, pFieldScriptEntity, auStack56, rotation);
                }
                pFieldScriptEntity->m0_flags = pFieldScriptEntity->m0_flags & 0xfffff9ff | backupFlags & 0x600;
            }
            if (iVar1 == -1)
            {
                bMoved = false;
            }
        }
    }
    else
    {
        walkSpeed = pFieldScriptEntity->mE6;
        pFieldScriptEntity->m104_rotation = pFieldScriptEntity->m104_rotation | 0x8000;

        bMoved = false;
    }

    if (!bMoved)
    {
        pFieldScriptEntity->mF0 = 0x10000;
        (pFieldScriptEntity->m40).vx = 0;
        (pFieldScriptEntity->m40).vy = 0;
        (pFieldScriptEntity->m40).vz = 0;
        stepVector.vx = 0;
        stepVector.vy = 0;
        stepVector.vz = 0;
        (pFieldEntity->m4_pVramSpriteSheet->mC).vx = 0;
        (pFieldEntity->m4_pVramSpriteSheet->mC).vz = 0;
        pFieldScriptEntity->m106_currentRotation = pFieldScriptEntity->m106_currentRotation | 0x8000;
    }

    pFieldScriptEntity->m4_flags = pFieldScriptEntity->m4_flags & 0xffffefff;

    int sVar4 = pFieldScriptEntity->mE8;// TODO: can this be a different value?

    if ((pFieldScriptEntity->m0_flags & 0x800) == 0) {
        if (((int)pFieldScriptEntity->m104_rotation & 0x8000U) != 0) {
            walkSpeed = pFieldScriptEntity->mE6;
        }
        moveMask = getWalkmeshTriangleFlag(pFieldScriptEntity);
        sVar4 = walkSpeed;
        if ((moveMask & 0x200000) != 0) {
            if (((int)pFieldScriptEntity->m104_rotation & 0x8000U) != 0) {
                sVar4 = 6;
                if (pFieldScriptEntity->mE8 != 6) goto LAB_Field__800830ac;
                pFieldScriptEntity->m4_flags = pFieldScriptEntity->m4_flags | 0x1000;
            }
            sVar4 = 6;
        }
    }
    else
    {
        assert(0);
    }

LAB_Field__800830ac:
    if (pFieldScriptEntity->mEA_currentAnimationPlaying != 0xff) {
        sVar4 = pFieldScriptEntity->mEA_currentAnimationPlaying;
    }
    if (((int)pFieldScriptEntity->mE8 != (int)sVar4) && ((pFieldScriptEntity->m0_flags & 0x2000000) == 0)) {
        pFieldScriptEntity->mE8 = sVar4;
        updateEntityEventCode4(pFieldEntity->m4_pVramSpriteSheet, (int)sVar4, pFieldEntity);
    }
    if ((pFieldScriptEntity->m14_currentTriangleFlag & 0x100U) != 0) {
        stepVector.vx = stepVector.vx >> 1;
        stepVector.vz = stepVector.vz >> 1;
    }
    pFieldScriptEntity->m30_stepVector.vx = stepVector.vx;
    pFieldScriptEntity->m30_stepVector.vy = stepVector.vy;
    pFieldScriptEntity->m30_stepVector.vz = stepVector.vz;
    pFieldScriptEntity->m40.vx = 0;
    pFieldScriptEntity->m40.vy = 0;
    pFieldScriptEntity->m40.vz = 0;
}

void EntityMoveCheck0(uint entityIndex, sFieldEntity* pEntity, sFieldScriptEntity* pScriptEntity)
{
    MissingCode();
}

struct sEntityMoveCheck1StackStruct
{
    s32 m0[4];
    s32 m10[4];
    s32 m20[4];
    s16 m30[4];
    VECTOR m38[4];
    s32 m78_position[3];
    s16 m88[4];
};

void EntityMoveCheck1Sub1Sub1(int* param_1, int* param_2, int param_3)

{
    int iVar1;

    iVar1 = *param_1;
    if (param_3 < 0) {
        *param_1 = iVar1;
    }
    else {
        *param_1 = iVar1;
        iVar1 = iVar1 + param_3;
    }
    *param_2 = iVar1;
    return;
}

s32 EntityMoveCheck1Sub1(sFieldScriptEntity* pFieldScriptEntity, int walkmeshId, s32* param_3, VECTOR* param_4, s16* param_5, s32* param_6)
{
    if (pFieldScriptEntity->m8_currentWalkMeshTriangle[walkmeshId] == -1) {
        return -1;
    }

    int triangleId = pFieldScriptEntity->m8_currentWalkMeshTriangle[walkmeshId];

    sFP1616 refPos;
    sFP1616 refPos2;

    SVECTOR projectedPosition;
    projectedPosition.vx = (pFieldScriptEntity->m20_position.vx + pFieldScriptEntity->m30_stepVector.vx) >> 16;
    projectedPosition.vy = 0;
    projectedPosition.vz = (pFieldScriptEntity->m20_position.vz + pFieldScriptEntity->m30_stepVector.vz) >> 16;

    refPos.set((pFieldScriptEntity->m20_position.vx + pFieldScriptEntity->m30_stepVector.vx) >> 16, (pFieldScriptEntity->m20_position.vz + pFieldScriptEntity->m30_stepVector.vz) >> 16);
    refPos2.set(pFieldScriptEntity->m20_position.vx >> 16, pFieldScriptEntity->m20_position.vz >> 16);

    int mask = 0;
    if ((pFieldScriptEntity->m4_flags >> (walkmeshId + 3U & 0x1f) & 1) == 0) {
        mask = -(uint)(noUpdatesToPartyMemebers == '\0');
    }

    int oldWalkmeshId = walkmeshId;

    int iterationCount = 0;
    for (iterationCount = 0; iterationCount < 0x20; iterationCount++)
    {
        sWalkMesh::sTriangleData& pTriangle = (*walkMeshTriangle[walkmeshId])[triangleId];
        std::vector<sWalkMesh::sTriangleData>::iterator pWalkMeshTriangles = walkMeshTriangle[walkmeshId]->begin();
        std::vector<SVECTOR>::iterator pVertices = walkMeshVertices[walkmeshId]->begin();

        sFP1616 vert0;
        sFP1616 vert1;
        sFP1616 vert2;

        vert0.set(pVertices[pTriangle.m0_verticeIndex[0]].vx, pVertices[pTriangle.m0_verticeIndex[0]].vz);
        vert1.set(pVertices[pTriangle.m0_verticeIndex[1]].vx, pVertices[pTriangle.m0_verticeIndex[1]].vz);
        vert2.set(pVertices[pTriangle.m0_verticeIndex[2]].vx, pVertices[pTriangle.m0_verticeIndex[2]].vz);

        int collisionFlag = 0;
        if (NCLIP(vert0, vert1, refPos) < 0) {
            collisionFlag |= 1;
        }

        if (NCLIP(vert1, vert2, refPos) < 0) {
            collisionFlag |= 2;
        }

        if (NCLIP(vert2, vert0, refPos) < 0) {
            collisionFlag |= 4;
        }

        if (collisionFlag < 8) {
            switch (collisionFlag)
            {
            case 0:
                mask = 0xFF;
                break;
            case 1:
                triangleId = pWalkMeshTriangles[triangleId].m6_connectivity[0];
                break;
            case 2:
                triangleId = pWalkMeshTriangles[triangleId].m6_connectivity[1];
                break;
            case 3:
                if (NCLIP(vert1, refPos, refPos2) < 0)
                {
                    triangleId = pWalkMeshTriangles[triangleId].m6_connectivity[0];
                }
                else {
                    triangleId = pWalkMeshTriangles[triangleId].m6_connectivity[1];
                }
                break;
            case 4:
                triangleId = pWalkMeshTriangles[triangleId].m6_connectivity[2];
                break;
            case 5:
                if (NCLIP(vert0, refPos, refPos2) < 0)
                {
                    triangleId = pWalkMeshTriangles[triangleId].m6_connectivity[2];
                }
                else {
                    triangleId = pWalkMeshTriangles[triangleId].m6_connectivity[0];
                }
                break;
            case 6:
                if (NCLIP(vert2, refPos, refPos2) < 0)
                {
                    triangleId = pWalkMeshTriangles[triangleId].m6_connectivity[1];
                }
                else {
                    triangleId = pWalkMeshTriangles[triangleId].m6_connectivity[2];
                }
                break;
            case 7:
                triangleId = -1;
                break;
            default:
                assert(0);
            }
        }

        if (triangleId == -1)
        {
            return -1;
        }
    }
    if (iterationCount == 0x20)
    {
        return -1;
    }

    std::vector<SVECTOR>::iterator pVertices = walkMeshVertices[walkmeshId]->begin();
    sWalkMesh::sTriangleData& pTriangle = (*walkMeshTriangle[walkmeshId])[triangleId];

    projectPositionOnTriangle(pVertices[pTriangle.m0_verticeIndex[0]], pVertices[pTriangle.m0_verticeIndex[1]], pVertices[pTriangle.m0_verticeIndex[2]], &projectedPosition, param_4);

    *param_5 = triangleId;

    int triangleParamD = pTriangle.mD * 4;
    if (triangleParamD < 0)
    {
        triangleParamD = 0;
    }

    if (pFieldScriptEntity->m10_walkmeshId == oldWalkmeshId)
    {
        if (((*walkMeshVar1)[pTriangle.mC_indexInWalkmeshData1] & mask & 0x800000) != 0)
        {
            *param_3 = 0x7fffffff;
            *param_6 = 0x7fffffff;
            return 0;
        }

        if (((pFieldScriptEntity->m30_stepVector.vx == 0) && (pFieldScriptEntity->m30_stepVector.vy == 0)) && (pFieldScriptEntity->m30_stepVector.vz == 0)) {
            *param_3 = projectedPosition.vy;
        }
        else
        {
            *param_3 = pFieldScriptEntity->m72_elevation;
        }
    }
    else {
        if (((*walkMeshVar1)[pTriangle.mC_indexInWalkmeshData1] & mask & 0x800000) != 0)
        {
            *param_3 = 0x7fffffff;
            *param_6 = 0x7fffffff;
            return 0;
        }

        *param_3 = projectedPosition.vy;
    }

    EntityMoveCheck1Sub1Sub1(param_3, param_6, triangleId);
    return 0;
}

s16 EntityMoveCheck1Var0 = -1;
s8 EntityMoveCheck1Var1 = 0;
int EntityMoveCheck1(int entityIndex, int mask, sFieldEntity* pFieldEntity, sFieldScriptEntity* pFieldScriptEntity, uint param_5)
{
    sFieldEntitySub4* psVar17 = fieldEntityArray[entityIndex].m4_pVramSpriteSheet;
    if (entityIndex == playerControlledEntity) {
        EntityMoveCheck1Var0 = -1;
    }
    if ((pFieldScriptEntity->m0_flags & 0x1000000) != 0) {
        return -1;
    }
    if ((pFieldScriptEntity->m4_flags & 0x200000) != 0) {
        return -1;
    }
    if (((pFieldScriptEntity->m0_flags & 0x10000) != 0) ||
        ((((entityIndex != playerControlledEntity || (EntityMoveCheck1Var1 != '\x01')) && ((psVar17->mC).vy == 0)) &&
            (!updateEntityEventCode3Sub0(pFieldScriptEntity) && (psVar17->m84 == (pFieldScriptEntity->m20_position.vy >> 16)))))) {
        return -1;
    }

    sEntityMoveCheck1StackStruct stackVar;

    stackVar.m78_position[0] = pFieldScriptEntity->m20_position.vx;
    stackVar.m78_position[1] = pFieldScriptEntity->m20_position.vy;
    stackVar.m78_position[2] = pFieldScriptEntity->m20_position.vz;

    int sVar2 = pFieldScriptEntity->m10_walkmeshId;

    for (int i=0; i<4; i++)
    {
        stackVar.m88[i] = pFieldScriptEntity->m8_currentWalkMeshTriangle[i];
    }

    for (int i = 0; i < 4; i++)
    {
        stackVar.m20[i] = i;
        stackVar.m0[i] = 0x7fffffff;
        stackVar.m10[i] = 0x7fffffff;
    }

    int iVar3 = 0;
    for (iVar3 =0; iVar3 <numWalkMesh; iVar3++)
    {
        if (EntityMoveCheck1Sub1(pFieldScriptEntity, iVar3, &stackVar.m0[iVar3], &stackVar.m38[iVar3], &stackVar.m30[iVar3], &stackVar.m10[iVar3]));
        {
            break;
        }
    }

    if ((pFieldScriptEntity->m4_flags & 1) != 0) {
        stackVar.m0[0] = 0x7fffffff;
        stackVar.m10[0] = 0x7fffffff;
    }
    if ((pFieldScriptEntity->m4_flags & 2) != 0) {
        stackVar.m0[1] = 0x7fffffff;
        stackVar.m10[1] = 0x7fffffff;
    }
    if ((pFieldScriptEntity->m4_flags & 4) != 0) {
        stackVar.m0[2] = 0x7fffffff;
        stackVar.m10[2] = 0x7fffffff;
    }

    int mask2 = 0x7fffffff; // TODO: what is the initial value?
    int iVar13 = 0;
    int iVar4 = stackVar.m0[pFieldScriptEntity->m10_walkmeshId];
    do {
        int iVar12 = 0;
        int psVar7 = 0;
        s32* piVar11 = stackVar.m10;
        s32* ppsVar14 = stackVar.m20;
        do {
            ppsVar14 = ppsVar14++;
            piVar11 = piVar11 + 1;
            s32 iVar10 = stackVar.m0[psVar7 + 1];
            if (iVar10 < mask2) {
                s32 iVar5 = stackVar.m10[psVar7];
                stackVar.m0[psVar7 + 1] = mask2;
                stackVar.m0[psVar7] = iVar10;
                iVar10 = *piVar11;
                *piVar11 = iVar5;
                stackVar.m10[psVar7] = iVar10;
                mask2 = *(uint*)ppsVar14;
                *ppsVar14 = stackVar.m20[psVar7];
                stackVar.m20[psVar7] = mask2;
            }
            iVar12 = iVar12 + 1;
            psVar7++;
        } while (iVar12 < 2);
        iVar13 = iVar13 + 1;
    } while (iVar13 < 2);

    if (iVar3 == numWalkMesh - 1)
    {
        assert(0);
    }

    pFieldScriptEntity->mF0 = 0;

    if (updateEntityEventCode3Var1 == 0) {
        if (param_5 != 0) {
            if (fieldEntityArray[entityIndex].m4_pVramSpriteSheet->m84 < mask + 10) {
                pFieldScriptEntity->m74 = 0xff;
            }
            fieldEntityArray[entityIndex].m4_pVramSpriteSheet->m84 = (short)mask;
            (pFieldScriptEntity->m20_position).vy = mask << 0x10;
        }
    }
    else {
        if (param_5 < 2) {
            fieldEntityArray[entityIndex].m4_pVramSpriteSheet->m84 = (short)mask;
        }
    }

    auto psVar18 = fieldEntityArray[entityIndex].m4_pVramSpriteSheet;
    if ((pFieldScriptEntity->m0_flags & 0x40000) != 0) {
        (pFieldScriptEntity->m20_position).vy = (int)pFieldScriptEntity->mEC_elevation << 0x10;
        (psVar18->mC).vy = 0;
    }
    (pFieldScriptEntity->m20_position).vy = (pFieldScriptEntity->m20_position).vy + (psVar18->mC).vy;
    int uVar6 = getWalkmeshTriangleFlag(pFieldScriptEntity);
    if (pFieldScriptEntity->m10_walkmeshId != sVar2) {
        pFieldScriptEntity->m0_flags = pFieldScriptEntity->m0_flags & 0xfbffffff;
    }
    if ((pFieldScriptEntity->m0_flags & 0x4000000) == 0) {
        int sVar1 = (pFieldScriptEntity->m20_position).vy >> 16;
        if (psVar18->m84 <= sVar1) goto LAB_Field__80085104;
        if (psVar18->m84 != sVar1) {
            (psVar18->mC).vy = (psVar18->mC).vy + psVar18->m1C;
        }
        pFieldScriptEntity->m0_flags = pFieldScriptEntity->m0_flags | 0x1000;
        pFieldScriptEntity->mF0 = (psVar18->mC).vy;
    }
    else {
    LAB_Field__80085104:
        if ((uVar6 & 0x420000) == 0) {
            pFieldScriptEntity->mF0 = 0;
        }
        if (0 < (psVar18->mC).vy) {
            (psVar18->mC).vy = 0;
        }
        pFieldScriptEntity->m0_flags = pFieldScriptEntity->m0_flags & 0xffbfefff;
        (pFieldScriptEntity->m20_position).vy = (int)psVar18->m84 << 0x10;
    }
    pFieldScriptEntity->m0_flags = pFieldScriptEntity->m0_flags & 0xfbffffff;
    iVar3 = 0;
    if (0 < numWalkMesh + -1) {
        iVar4 = pFieldScriptEntity->m20_position.vy >> 16;
        int psVar8 = 0;
        do {
            if (((stackVar.m0[psVar8] < iVar4) && ((int)(iVar4 - (uint)(ushort)pFieldScriptEntity->m18[1]) < stackVar.m10[psVar8])) && (stackVar.m0[psVar8] != stackVar.m10[0])) break;
            iVar3 = iVar3 + 1;
            psVar8++;
        } while (iVar3 < numWalkMesh + -1);
    }
    if ((iVar3 == numWalkMesh + -1) &&
        ((iVar3 = (*walkMeshTriangle[pFieldScriptEntity->m10_walkmeshId])[pFieldScriptEntity->m8_currentWalkMeshTriangle[pFieldScriptEntity->m10_walkmeshId]].mD * 4, -1 < iVar3 ||
            (iVar3 + psVar18->m84 <= ((pFieldScriptEntity->m20_position.vy >> 16) - (uint)(ushort)pFieldScriptEntity->m18[1]))))) {
        psVar18->m0_position.vx = (pFieldScriptEntity->m20_position).vx;
        psVar18->m0_position.vy = (pFieldScriptEntity->m20_position).vy;
        psVar18->m0_position.vz = (pFieldScriptEntity->m20_position).vz;
        fieldEntityArray[entityIndex].mC_matrix.t[0] = pFieldScriptEntity->m20_position.vx >> 16;
        fieldEntityArray[entityIndex].mC_matrix.t[1] = pFieldScriptEntity->m20_position.vy >> 16;
        fieldEntityArray[entityIndex].mC_matrix.t[2] = pFieldScriptEntity->m20_position.vz >> 16;
        iVar3 = getWalkmeshTriangleFlag(pFieldScriptEntity);
        pFieldScriptEntity->m14_currentTriangleFlag = iVar3;
    }
    else {
        iVar3 = 0;
        assert(0);
        sEntityMoveCheck1StackStruct* psVar8 = &stackVar;
        (pFieldScriptEntity->m20_position).vx = stackVar.m78_position[0];
        pFieldScriptEntity->m10_walkmeshId = sVar2;
        pFieldScriptEntity->mF0 = 0;
        (pFieldScriptEntity->m20_position).vz = stackVar.m78_position[2];
        auto psVar10 = pFieldScriptEntity;
        do {
            auto psVar17 = psVar8->m88;
            psVar8 = (sEntityMoveCheck1StackStruct*)((int)psVar8->m0 + 2);
            iVar3 = iVar3 + 1;
            psVar10->m8_currentWalkMeshTriangle[0] = *psVar17;
            psVar10 = (sFieldScriptEntity*)((int)&psVar10->m0_flags + 2);
        } while (iVar3 < 4);
        if (psVar18->m84 != *(short*)((int)&(pFieldScriptEntity->m20_position).vy + 2)) {
            (psVar18->mC).vy = (psVar18->mC).vy + psVar18->m1C;
        }
        if ((psVar18->mC).vy < 0) {
            (psVar18->mC).vy = 0;
            (pFieldScriptEntity->m20_position).vy = stackVar.m78_position[1];
        }
        psVar18->m0_position.vx = (pFieldScriptEntity->m20_position).vx;
        psVar18->m0_position.vy = (pFieldScriptEntity->m20_position).vy;
        psVar18->m0_position.vz = (pFieldScriptEntity->m20_position).vz;
        fieldEntityArray[entityIndex].mC_matrix.t[1] = pFieldScriptEntity->m20_position.vy >> 16;
    }
LAB_Field__80085490:
    MissingCode();
    //initFollowStructForPlayer(entityIndex);
    return 0;
}

void updateScriptAndMoveEntities()
{
    entityUpdateVar0 = -1;

    exectueEntitiesUpdateFunction();

    for (int i=0; i<totalActors; i++)
    {
        fieldEntityArray[i].m4C_scriptEntity->m68_oldPosition[0] = fieldEntityArray[i].m4C_scriptEntity->m20_position.vx >> 16;
        fieldEntityArray[i].m4C_scriptEntity->m68_oldPosition[1] = fieldEntityArray[i].m4C_scriptEntity->m20_position.vy >> 16;
        fieldEntityArray[i].m4C_scriptEntity->m68_oldPosition[2] = fieldEntityArray[i].m4C_scriptEntity->m20_position.vz >> 16;
    }
    if (fieldDebugDisable == 0)
    {
        assert(0); // "EVENT_CODE"
    }

    entityUpdateVar1 = 0;

    for (int i = 0; i < totalActors; i++)
    {
        sFieldEntity* pFieldEntity = &fieldEntityArray[i];
        sFieldScriptEntity* pFieldScriptEntity = pFieldEntity->m4C_scriptEntity;

        if ((fieldEntityArray[i].m58_flags & 0xF80) == 0x200)
        {
            if ((pFieldScriptEntity->m0_flags & 0x10001) == 0)
            {
                if ((pFieldScriptEntity->m4_flags & 0x600) != 0x200)
                {
                    pFieldScriptEntity->m14_currentTriangleFlag = getWalkmeshTriangleFlag(pFieldScriptEntity);
                    updateEntityEventCode2(i, pFieldEntity, pFieldScriptEntity);
                    updateEntityEventCode3(i, pFieldEntity, pFieldScriptEntity);
                }
            }
            else
            {
                MissingCode();
            }
        }
    }

    MissingCode();

    EntityMoveCheck0(playerControlledEntity, &fieldEntityArray[playerControlledEntity], fieldEntityArray[playerControlledEntity].m4C_scriptEntity);

    MissingCode();

    for (int i=0; i<totalActors; i++)
    {
        if (fieldEntityArray[i].m58_flags & 0xF00)
        {
            sFieldScriptEntity* pFieldScriptEntity = fieldEntityArray[i].m4C_scriptEntity;
            if (((((pFieldScriptEntity->m4_flags & 0x600) != 0x200) && ((fieldEntityArray[i].m58_flags & 0xf80) == 0x200)) && ((pFieldScriptEntity->m0_flags & 0x10001) == 0)) &&
                ((i != playerControlledEntity &&
                    EntityMoveCheck1(i, 0x7fffffff, &fieldEntityArray[i], pFieldScriptEntity, 0) && (fieldEntityArray[i].m4_pVramSpriteSheet->m7C->mC == 1)))) {
                pFieldScriptEntity->m0_flags = pFieldScriptEntity->m0_flags & 0xfffff7ff;
            }
        }
    }

    MissingCode();
}

void updateAllEntities()
{
    updateScriptAndMoveEntities();
    MissingCode();
}

enum class eCameraTrackingMode : s16
{
    e0_followPlayer = 0,
};
eCameraTrackingMode cameraTrackingMode = eCameraTrackingMode::e0_followPlayer;

struct sUpdateCameraAtStruct
{
    s32 m0[4];
    s32 m10[4];
    s32 m20[4];
    s32 m30[4];
    s32 m40[4];
    s32 m50[4];
};

void updateCameraAt(VECTOR* pCameraAt)
{
    sUpdateCameraAtStruct local_98;
    for (int i=0; i<3; i++)
    {
        local_98.m0[i] = 0xFFFF;
        local_98.m10[i] = -1;
        local_98.m40[i] = 0;
        local_98.m30[i] = 0;
        local_98.m50[i] = 0;
        local_98.m20[i] = 0;
    }

    for (int i = 0; i < totalActors; i++)
    {
        MissingCode();
    }

    MissingCode();
}

void updateCamera()
{
    switch (cameraTrackingMode)
    {
    case eCameraTrackingMode::e0_followPlayer: // follow player
        updateCameraAt(&fieldEntityArray[playerControlledEntity].m4C_scriptEntity->m20_position);
        break;
    default:
        assert(0);
    }
}

void updateAndRenderField()
{
    MissingCode();
    updateAllEntities();
    updateCamera();
    MissingCode();
}

int runningOnDTL = -1;

void fieldEntryPoint()
{
    fieldDebugDisable = (runningOnDTL == -1);
    ClearCacheAfterOverlayLoad();
    if (fieldDebugDisable == 0) {
        assert(0);
        //DrawSyncCallback(fieldDebuggerDrawSyncCallback);
    }

    MissingCode();

    setCurrentDirectory(4, 0); // TODO: this is not explicitly called at this level

    allocatePartyCharacterBuffers();

    MissingCode();

    fieldExecuteVar3 = -1;
    fieldExecuteVar2 = -1;
    playMusicAuthorized = -1;

    MissingCode();

    fieldMapNumber = gameState.m231A_fieldID;
    pKernelGameState = &gameState;

    MissingCode();

    startLoadingPlayableCharacters();
    finalizeLoadPlayableCharacters();

    MissingCode();

    bootField();

    MissingCode();

    while (!noahFrame_end())
    {
        noahFrame_start();

        MissingCode();
        ////
        updateAndRenderField();

        MissingCode();
        ////
        if ((fieldChangePrevented == 0) /*&& (fieldChangePrevented2 == 0)*/)
        {
            //if ((asyncLoadingVar1 == 0xff) && (DAT_Field__800adb90 == 0))
            {
                setCurrentDirectory(4, 0); //TODO: shouldn't be necessary!
                if (loadNewField((fieldMapNumber & 0xfff) * 2, 0) == 0)
                {
                    if (isCDBusy() == 0)
                    {
                        //if (screenEffects[0].m3C_duration == 0)
                        {
                            //fieldTransitionCompleted = 0;
                            //saveStateToKernel();
                            waitReadCompletion(0);
                            transitionFields();
                            //resetInputs();
                            //fieldTransitionCompleted = 1;
                        }
                    }
                }
            }
        }
        ////
        MissingCode();
    }
}
